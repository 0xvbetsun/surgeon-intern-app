// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package logbookService

import (
	"context"
	"github.com/cychiuae/casbin-pg-adapter"
	activities2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/activities"
	assessments2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/assessments"
	clinics2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/clinics"
	evaluationforms2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/evaluationforms"
	examinations2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/examinations"
	"github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/examinationsactivities"
	examinationsactivitiesreviews2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/examinationsactivitiesreviews"
	hospitals2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/hospitals"
	logbookentries2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/logbookentries"
	notifications2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/notifications"
	organisations2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/organisations"
	orthopedicSurgeries2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/orthopedicSurgeries"
	"github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/practicalActivityTypes"
	procedures2 "github.com/vbetsun/surgeon-intern-app/internal/logbookService/pkg/services/procedures"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/db"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/services/authorization"
	users2 "github.com/vbetsun/surgeon-intern-app/internal/pkg/services/users"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/thirdparty"
	"github.com/vbetsun/surgeon-intern-app/internal/util"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/OrganizationalUnits"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/activities"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/assessments"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/clinics"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/dbexecutor"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/evaluationforms"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/examinationactivity"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/examinations"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/examinationsactivitiesreviews"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/examinationsactivityreview"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/hospitals"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/logbookentries"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/notifications"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/organisations"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/orthopedicSurgeries"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/practicalactivitytypes"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/procedures"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/roles"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/specialties"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/surgeries"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/users"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context, pgConnectionParameters db.ConnectionParameters, casbinTableName string, casbinConfigFilePath authorization.CasbinConfigFilePath) (*App, error) {
	postgresql, err := db.NewSqlConnection(pgConnectionParameters)
	if err != nil {
		return nil, err
	}
	sqlDB := postgresql.Conn
	iActivitiesRepo := activities.NewActivitiesRepo(sqlDB)
	userOrganizationalUnitRoleRepo := users.NewUserOrganizationalUnitRoleRepo(sqlDB)
	iRepo := roles.NewRepo(sqlDB)
	usersIRepo := users.NewRepo(sqlDB, userOrganizationalUnitRoleRepo, iRepo)
	idbExecutor := dbexecutor.NewDBExecutor(sqlDB)
	iActivitiesService := activities2.NewActivitiesService(iActivitiesRepo, usersIRepo, idbExecutor)
	specialtiesIRepo := specialties.NewRepo(sqlDB)
	practicalactivitytypesIRepo := practicalactivitytypes.NewRepo(sqlDB, specialtiesIRepo)
	iService := practicalActivityTypes.NewService(practicalactivitytypesIRepo)
	examinationsIRepo := examinations.NewRepo(sqlDB)
	examinationsIService := examinations2.NewService(examinationsIRepo)
	proceduresIRepo := procedures.NewRepo(sqlDB)
	proceduresIService := procedures2.NewService(proceduresIRepo)
	examinationactivityIRepo := examinationactivity.NewRepo(sqlDB)
	examinationsactivityreviewIRepo := examinationsactivityreview.NewRepo(sqlDB)
	examinationsactivitiesreviewsIRepo := examinationsactivitiesreviews.NewRepo(sqlDB)
	service := examinationsactivities.NewService(examinationsIRepo, usersIRepo, examinationactivityIRepo, examinationsactivityreviewIRepo, examinationsactivitiesreviewsIRepo)
	examinationsactivitiesreviewsIService := examinationsactivitiesreviews2.NewService(examinationsactivityreviewIRepo, examinationsactivitiesreviewsIRepo, usersIRepo)
	iAdder := organisations.NewAdder(sqlDB, ctx)
	organisationsIAdder := organisations2.NewAdder(iAdder)
	iGetter := organisations.NewGetter(sqlDB, ctx)
	adapter, err := casbinpgadapter.NewAdapter(sqlDB, casbinTableName)
	if err != nil {
		return nil, err
	}
	repo := OrganizationalUnits.NewRepo(sqlDB)
	typesRepo := OrganizationalUnits.NewTypesRepo(sqlDB)
	authorizationIService, err := authorization.NewService(adapter, usersIRepo, casbinConfigFilePath, repo, typesRepo)
	if err != nil {
		return nil, err
	}
	organisationsIGetter := organisations2.NewGetter(iGetter, authorizationIService)
	iUpdater := organisations2.NewUpdater()
	iDeleter := organisations2.NewDeleter()
	organisationsService := organisations2.NewService(organisationsIAdder, organisationsIGetter, iUpdater, iDeleter)
	viper := util.GetViper()
	auth0, err := thirdparty.NewAuth0ManagementApi(viper)
	if err != nil {
		return nil, err
	}
	usersIService := users2.NewService(usersIRepo, auth0, repo, typesRepo, iRepo)
	hospitalsIRepo := hospitals.NewRepo(sqlDB, typesRepo)
	hospitalsIService := hospitals2.NewService(hospitalsIRepo, repo, typesRepo)
	clinicsIRepo := clinics.NewRepo(sqlDB, typesRepo)
	clinicsIService := clinics2.NewService(clinicsIRepo, repo, typesRepo)
	iLogbookEntriesRepo := logbookentries.NewLogbookEntriesRepo(sqlDB)
	iAssessmentsRepo := assessments.NewAssessmentsRepo(sqlDB)
	orthopedicSurgeriesIActivitiesRepo := orthopedicSurgeries.NewActivitiesRepo(sqlDB)
	iReviewsRepo := orthopedicSurgeries.NewReviewsRepo(sqlDB)
	orthopedicSurgeriesRepo := orthopedicSurgeries.NewRepo(orthopedicSurgeriesIActivitiesRepo, iReviewsRepo)
	iEvaluationFormsRepo := evaluationforms.NewEvaluationFormsRepo(sqlDB)
	iDopsRepo := evaluationforms.NewDopsRepo(sqlDB)
	iMiniCexRepo := evaluationforms.NewMiniCexRepo(sqlDB)
	evaluationformsRepo := evaluationforms.NewRepo(iEvaluationFormsRepo, iDopsRepo, iMiniCexRepo)
	surgeriesIRepo := surgeries.NewRepo(sqlDB)
	iActivities := orthopedicSurgeries2.NewActivities(iActivitiesRepo, iLogbookEntriesRepo, iAssessmentsRepo, orthopedicSurgeriesRepo, evaluationformsRepo, surgeriesIRepo, usersIRepo, practicalactivitytypesIRepo, idbExecutor)
	iReviews := orthopedicSurgeries2.NewReviews(iActivitiesRepo, iAssessmentsRepo, surgeriesIRepo, orthopedicSurgeriesRepo, usersIRepo, idbExecutor)
	iSurgeries := orthopedicSurgeries2.NewSurgeries(orthopedicSurgeriesRepo, surgeriesIRepo, idbExecutor)
	orthopedicSurgeriesService := orthopedicSurgeries2.NewService(iActivities, iReviews, iSurgeries)
	iEvaluationForms := evaluationforms2.NewEvaluationForms(evaluationformsRepo, usersIRepo, orthopedicSurgeriesIActivitiesRepo, idbExecutor)
	iDops := evaluationforms2.NewDops(iActivitiesRepo, iAssessmentsRepo, evaluationformsRepo, orthopedicSurgeriesRepo, surgeriesIRepo, usersIRepo, idbExecutor)
	iMiniCex := evaluationforms2.NewMiniCex(iActivitiesRepo, iAssessmentsRepo, evaluationformsRepo, orthopedicSurgeriesRepo, surgeriesIRepo, usersIRepo, idbExecutor)
	evaluationformsService := evaluationforms2.NewService(iEvaluationForms, iDops, iMiniCex)
	iLogbookEntriesService := logbookentries2.NewActivityService(iLogbookEntriesRepo, usersIRepo)
	iAssessmentsService := assessments2.NewAssessmentsService(iAssessmentsRepo, usersIRepo)
	iNotificationsRepo := notifications.NewNotificationsRepo(sqlDB)
	iNotificationsService := notifications2.NewNotificationsService(iNotificationsRepo, usersIRepo, idbExecutor)
	logbookServiceService, err := NewService(iActivitiesService, iService, examinationsIService, proceduresIService, service, examinationsactivitiesreviewsIService, organisationsService, usersIService, hospitalsIService, clinicsIService, authorizationIService, orthopedicSurgeriesService, evaluationformsService, iLogbookEntriesService, iAssessmentsService, iNotificationsService)
	if err != nil {
		return nil, err
	}
	resolver := NewResolver(logbookServiceService)
	authDirectives := NewAuthDirectives(authorizationIService, usersIService)
	config := NewQlConfig(resolver, authDirectives)
	app := NewApp(config)
	return app, nil
}
