// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	commonModel "github.com/vbetsun/surgeon-intern-app/internal/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Clinic() ClinicResolver
	DopsEvaluation() DopsEvaluationResolver
	Hospital() HospitalResolver
	MiniCexEvaluation() MiniCexEvaluationResolver
	Mutation() MutationResolver
	OrthopedicSurgeryActivity() OrthopedicSurgeryActivityResolver
	Query() QueryResolver
	ResidentExamination() ResidentExaminationResolver
	SupervisorExaminationReview() SupervisorExaminationReviewResolver
}

type DirectiveRoot struct {
	Binding        func(ctx context.Context, obj interface{}, next graphql.Resolver, constraint string) (res interface{}, err error)
	HasAtLeastRole func(ctx context.Context, obj interface{}, next graphql.Resolver, role commonModel.RoleInput) (res interface{}, err error)
	HasOneOfRoles  func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []*commonModel.RoleInput) (res interface{}, err error)
}

type ComplexityRoot struct {
	Activity struct {
		Assessment   func(childComplexity int) int
		LogbookEntry func(childComplexity int) int
		OccurredAt   func(childComplexity int) int
	}

	Aid struct {
		DisplayName func(childComplexity int) int
		Routes      func(childComplexity int) int
	}

	Assessment struct {
		Dops          func(childComplexity int) int
		MiniCex       func(childComplexity int) int
		SurgeryReview func(childComplexity int) int
	}

	Clinic struct {
		ClinicID    func(childComplexity int) int
		DisplayName func(childComplexity int) int
		Hospital    func(childComplexity int) int
		HospitalID  func(childComplexity int) int
		Specialty   func(childComplexity int) int
	}

	ClinicDepartment struct {
		ClinicID       func(childComplexity int) int
		DepartmentID   func(childComplexity int) int
		DepartmentName func(childComplexity int) int
	}

	ClinicRole struct {
		Clinic func(childComplexity int) int
		Role   func(childComplexity int) int
	}

	Description struct {
		Subrows func(childComplexity int) int
		Title   func(childComplexity int) int
	}

	DescriptionRow struct {
		Subtitle          func(childComplexity int) int
		SubtitleHighlight func(childComplexity int) int
		Title             func(childComplexity int) int
	}

	DopsEvaluation struct {
		ActiveStep       func(childComplexity int) int
		Annotations      func(childComplexity int) int
		CompletedStep    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Department       func(childComplexity int) int
		DepartmentID     func(childComplexity int) int
		Description      func(childComplexity int) int
		Difficulty       func(childComplexity int) int
		DopsEvaluationID func(childComplexity int) int
		InProgress       func(childComplexity int) int
		IsEvaluated      func(childComplexity int) int
		Resident         func(childComplexity int) int
		ResidentID       func(childComplexity int) int
		Supervisor       func(childComplexity int) int
		SupervisorID     func(childComplexity int) int
		SurgeryActivity  func(childComplexity int) int
		SurgeryMetadata  func(childComplexity int) int
	}

	EvaluationForm struct {
		Annotations      func(childComplexity int) int
		Citations        func(childComplexity int) int
		Difficulty       func(childComplexity int) int
		DisplayName      func(childComplexity int) int
		EvaluationFormID func(childComplexity int) int
	}

	EvaluationFormAnnotation struct {
		Comment     func(childComplexity int) int
		Description func(childComplexity int) int
		Options     func(childComplexity int) int
		Subject     func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	EvaluationFormAnnotations struct {
		Comment            func(childComplexity int) int
		Description        func(childComplexity int) int
		DescriptionComment func(childComplexity int) int
		NotObserved        func(childComplexity int) int
		Options            func(childComplexity int) int
		Subject            func(childComplexity int) int
		Type               func(childComplexity int) int
		Value              func(childComplexity int) int
	}

	Examination struct {
		Annotations   func(childComplexity int) int
		ClinicID      func(childComplexity int) int
		DisplayName   func(childComplexity int) int
		ExaminationID func(childComplexity int) int
	}

	ExaminationAnnotations struct {
		EvaluationGroup func(childComplexity int) int
		Group           func(childComplexity int) int
		Label           func(childComplexity int) int
	}

	Finding struct {
		DisplayName func(childComplexity int) int
	}

	Hospital struct {
		Clinics     func(childComplexity int) int
		DisplayName func(childComplexity int) int
		HospitalID  func(childComplexity int) int
	}

	LogbookEntry struct {
		Examination func(childComplexity int) int
		Procedure   func(childComplexity int) int
		Surgery     func(childComplexity int) int
	}

	Method struct {
		Aids        func(childComplexity int) int
		DisplayName func(childComplexity int) int
	}

	MiniCexArea struct {
		DepartmentID  func(childComplexity int) int
		MiniCexAreaID func(childComplexity int) int
		Name          func(childComplexity int) int
	}

	MiniCexEvaluation struct {
		ActiveStep    func(childComplexity int) int
		Annotations   func(childComplexity int) int
		Area          func(childComplexity int) int
		CompletedStep func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Department    func(childComplexity int) int
		DepartmentID  func(childComplexity int) int
		Description   func(childComplexity int) int
		Difficulty    func(childComplexity int) int
		Focuses       func(childComplexity int) int
		ID            func(childComplexity int) int
		InProgress    func(childComplexity int) int
		IsEvaluated   func(childComplexity int) int
		OccurredAt    func(childComplexity int) int
		Resident      func(childComplexity int) int
		ResidentID    func(childComplexity int) int
		Supervisor    func(childComplexity int) int
		SupervisorID  func(childComplexity int) int
	}

	MiniCexFocus struct {
		MiniCexFocusID func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	Mutation struct {
		ConnectActivityToDopsEvaluation           func(childComplexity int, activityID string, dopsEvaluationID string) int
		DeleteInProgressDopsEvaluation            func(childComplexity int, dopsEvaluationID string) int
		DeleteInProgressMiniCexEvaluation         func(childComplexity int, miniCexEvaluationID string) int
		DeleteInProgressOrthopedicSurgeryActivity func(childComplexity int, activityID string) int
		RequestMiniCexEvaluation                  func(childComplexity int, requestInput commonModel.MiniCexRequestInput) int
		SetHasSeenNotifications                   func(childComplexity int, seenNotifications []*commonModel.SeenNotificationInput) int
		SubmitDopsEvaluation                      func(childComplexity int, evaluationInput commonModel.DopsEvaluationInput) int
		SubmitMiniCexEvaluation                   func(childComplexity int, evaluationInput commonModel.MiniCexEvaluationInput) int
		SubmitOrthopedicSurgeryActivity           func(childComplexity int, activityInput commonModel.OrthopedicSurgeryActivityInput) int
		SubmitOrthopedicSurgeryActivityReview     func(childComplexity int, reviewInput commonModel.OrthopedicSurgeryActivityReviewInput) int
		SubmitResidentExamination                 func(childComplexity int, examination commonModel.ResidentExaminationInput) int
		SubmitSupervisorExaminationReview         func(childComplexity int, reviewedExamination commonModel.SupervisorExaminationReviewInput) int
	}

	Notification struct {
		Annotations func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		SeenAt      func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	NotificationAnnotations struct {
		NotificationType func(childComplexity int) int
		NotificationURL  func(childComplexity int) int
		RelatedID        func(childComplexity int) int
	}

	OrthopedicSurgeryActivity struct {
		ActiveStep       func(childComplexity int) int
		Annotations      func(childComplexity int) int
		AssistantID      func(childComplexity int) int
		Comments         func(childComplexity int) int
		CompletedStep    func(childComplexity int) int
		Complications    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		Dops             func(childComplexity int) int
		DopsRequested    func(childComplexity int) int
		ID               func(childComplexity int) int
		InProgress       func(childComplexity int) int
		OperatorID       func(childComplexity int) int
		Resident         func(childComplexity int) int
		ResidentUserID   func(childComplexity int) int
		Review           func(childComplexity int) int
		ReviewRequested  func(childComplexity int) int
		Supervisor       func(childComplexity int) int
		SupervisorUserID func(childComplexity int) int
		SurgeryMetadata  func(childComplexity int) int
	}

	OrthopedicSurgeryActivityAnnotations struct {
		Closing            func(childComplexity int) int
		Incision           func(childComplexity int) int
		Inspection         func(childComplexity int) int
		Opening            func(childComplexity int) int
		OperationPlanning  func(childComplexity int) int
		Osteosyntes        func(childComplexity int) int
		PatientPositioning func(childComplexity int) int
		Plastering         func(childComplexity int) int
		PostOp             func(childComplexity int) int
		Repositioning      func(childComplexity int) int
		SawingAndDrillning func(childComplexity int) int
	}

	OrthopedicSurgeryActivityAnnotationsField struct {
		WithAssistance    func(childComplexity int) int
		WithoutAssistance func(childComplexity int) int
	}

	OrthopedicSurgeryActivityReview struct {
		ActiveStep       func(childComplexity int) int
		Activity         func(childComplexity int) int
		ActivityID       func(childComplexity int) int
		Annotations      func(childComplexity int) int
		AssistantID      func(childComplexity int) int
		Comments         func(childComplexity int) int
		CompletedStep    func(childComplexity int) int
		Complications    func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Description      func(childComplexity int) int
		InProgress       func(childComplexity int) int
		OperatorID       func(childComplexity int) int
		Resident         func(childComplexity int) int
		ResidentUserID   func(childComplexity int) int
		ReviewComment    func(childComplexity int) int
		ReviewID         func(childComplexity int) int
		SignedAt         func(childComplexity int) int
		Supervisor       func(childComplexity int) int
		SupervisorUserID func(childComplexity int) int
		SurgeryMetadata  func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	OrthopedicSurgeryMetadata struct {
		CaseNotes     func(childComplexity int) int
		OccurredAt    func(childComplexity int) int
		PatientAge    func(childComplexity int) int
		PatientGender func(childComplexity int) int
		Surgeries     func(childComplexity int) int
	}

	PracticalActivityType struct {
		DisplayName             func(childComplexity int) int
		Name                    func(childComplexity int) int
		PracticalActivityTypeID func(childComplexity int) int
	}

	Procedure struct {
		Annotations func(childComplexity int) int
		Branches    func(childComplexity int) int
		ClinicID    func(childComplexity int) int
		DisplayName func(childComplexity int) int
		ProcedureID func(childComplexity int) int
	}

	ProcedureAnnotations struct {
		Methods func(childComplexity int) int
	}

	ProcedureBranch struct {
		Branches func(childComplexity int) int
		Label    func(childComplexity int) int
	}

	Purpose struct {
		DisplayName func(childComplexity int) int
		Findings    func(childComplexity int) int
	}

	Query struct {
		Activities                          func(childComplexity int, queryFilter commonModel.ActivityQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) int
		Assessments                         func(childComplexity int, queryFilters commonModel.AssessmentQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) int
		ClinicDepartment                    func(childComplexity int, departmentID string) int
		ClinicDepartments                   func(childComplexity int, clinicID string) int
		Clinics                             func(childComplexity int, hospitalID *string) int
		DopsEvaluation                      func(childComplexity int, dopsID *string, activityID *string) int
		DopsEvaluations                     func(childComplexity int, queryFilter commonModel.DopsQueryFilter, orderBy *commonModel.QueryOrder) int
		EvaluationForms                     func(childComplexity int) int
		Examination                         func(childComplexity int, id string) int
		Examinations                        func(childComplexity int) int
		Hospitals                           func(childComplexity int, organisationID *string) int
		LogbookEntries                      func(childComplexity int, queryFilters commonModel.LogbookEntryQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) int
		MiniCexAreas                        func(childComplexity int, departmentID string) int
		MiniCexEvaluation                   func(childComplexity int, miniCexEvaluationID string) int
		MiniCexEvaluations                  func(childComplexity int, queryFilter commonModel.MiniCexQueryFilter, orderBy *commonModel.QueryOrder) int
		MiniCexFocuses                      func(childComplexity int) int
		Notifications                       func(childComplexity int, notificationType *commonModel.NotificationType, hasSeen bool) int
		OrthopedicSurgeryActivities         func(childComplexity int, queryFilter commonModel.SurgeryLogbookEntryQueryFilter, orderBy *commonModel.QueryOrder) int
		OrthopedicSurgeryActivityByID       func(childComplexity int, activityID string) int
		OrthopedicSurgeryActivityReviewByID func(childComplexity int, reviewID string) int
		PracticalActivityTypes              func(childComplexity int) int
		Procedures                          func(childComplexity int) int
		ResidentExamination                 func(childComplexity int, residentExaminationID string) int
		ResidentExaminations                func(childComplexity int, residentUserID *string, supervisorUserID *string) int
		Residents                           func(childComplexity int, clinicID *string) int
		SupervisorExaminationReview         func(childComplexity int, supervisorExaminationReviewID string) int
		SupervisorExaminationReviews        func(childComplexity int, reviewed *bool) int
		Supervisors                         func(childComplexity int, clinicID *string) int
		Surgeries                           func(childComplexity int, clinicID *string, orderBy *commonModel.SurgeryOrder, paging *commonModel.QueryPaging) int
		SurgeriesByDiagnose                 func(childComplexity int, diagnoseID string) int
		SurgeriesByMethod                   func(childComplexity int, methodID string) int
		SurgeryByDiagnoseAndMethod          func(childComplexity int, methodID string, diagnoseID string) int
		SurgeryByID                         func(childComplexity int, surgeryID string) int
		User                                func(childComplexity int, userID *string) int
		UserRoles                           func(childComplexity int, userID *string) int
	}

	ResidentExamination struct {
		Annotations           func(childComplexity int) int
		ClinicID              func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		DisplayName           func(childComplexity int) int
		ExaminationID         func(childComplexity int) int
		Resident              func(childComplexity int) int
		ResidentExaminationID func(childComplexity int) int
		ResidentUserID        func(childComplexity int) int
		Supervisor            func(childComplexity int) int
		SupervisorUserID      func(childComplexity int) int
	}

	ResidentExaminationAnnotations struct {
		EvaluationGroup func(childComplexity int) int
		EvaluationValue func(childComplexity int) int
		Group           func(childComplexity int) int
		Label           func(childComplexity int) int
		Value           func(childComplexity int) int
	}

	Role struct {
		DisplayName    func(childComplexity int) int
		RoleIdentifier func(childComplexity int) int
	}

	Route struct {
		DisplayName func(childComplexity int) int
		Purposes    func(childComplexity int) int
	}

	SupervisorExaminationReview struct {
		Annotations                   func(childComplexity int) int
		Comment                       func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		DisplayName                   func(childComplexity int) int
		IsReviewed                    func(childComplexity int) int
		Resident                      func(childComplexity int) int
		ResidentExaminationID         func(childComplexity int) int
		ResidentUpdatedAt             func(childComplexity int) int
		ResidentUserID                func(childComplexity int) int
		Supervisor                    func(childComplexity int) int
		SupervisorExaminationReviewID func(childComplexity int) int
		SupervisorUpdatedAt           func(childComplexity int) int
		SupervisorUserID              func(childComplexity int) int
	}

	SupervisorExaminationReviewAnnotations struct {
		Comment         func(childComplexity int) int
		EvaluationGroup func(childComplexity int) int
		EvaluationValue func(childComplexity int) int
		Group           func(childComplexity int) int
		Label           func(childComplexity int) int
		Value           func(childComplexity int) int
	}

	Surgery struct {
		Diagnose func(childComplexity int) int
		ID       func(childComplexity int) int
		Method   func(childComplexity int) int
	}

	SurgeryDiagnose struct {
		Bodypart     func(childComplexity int) int
		DiagnoseCode func(childComplexity int) int
		DiagnoseName func(childComplexity int) int
		ExtraCode    func(childComplexity int) int
		ID           func(childComplexity int) int
	}

	SurgeryMethod struct {
		ApproachName func(childComplexity int) int
		ID           func(childComplexity int) int
		MethodCode   func(childComplexity int) int
		MethodName   func(childComplexity int) int
	}

	User struct {
		ClinicIds   func(childComplexity int) int
		ClinicRoles func(childComplexity int) int
		DisplayName func(childComplexity int) int
		UserID      func(childComplexity int) int
	}
}

type ClinicResolver interface {
	Hospital(ctx context.Context, obj *commonModel.Clinic) (*commonModel.Hospital, error)
}
type DopsEvaluationResolver interface {
	Description(ctx context.Context, obj *commonModel.DopsEvaluation) (*commonModel.Description, error)

	Supervisor(ctx context.Context, obj *commonModel.DopsEvaluation) (*commonModel.User, error)

	Resident(ctx context.Context, obj *commonModel.DopsEvaluation) (*commonModel.User, error)
}
type HospitalResolver interface {
	Clinics(ctx context.Context, obj *commonModel.Hospital) ([]*commonModel.Clinic, error)
}
type MiniCexEvaluationResolver interface {
	Description(ctx context.Context, obj *commonModel.MiniCexEvaluation) (*commonModel.Description, error)

	Supervisor(ctx context.Context, obj *commonModel.MiniCexEvaluation) (*commonModel.User, error)

	Resident(ctx context.Context, obj *commonModel.MiniCexEvaluation) (*commonModel.User, error)
}
type MutationResolver interface {
	SubmitResidentExamination(ctx context.Context, examination commonModel.ResidentExaminationInput) (*commonModel.ResidentExamination, error)
	SubmitSupervisorExaminationReview(ctx context.Context, reviewedExamination commonModel.SupervisorExaminationReviewInput) (*commonModel.SupervisorExaminationReview, error)
	SubmitOrthopedicSurgeryActivity(ctx context.Context, activityInput commonModel.OrthopedicSurgeryActivityInput) (*string, error)
	SubmitOrthopedicSurgeryActivityReview(ctx context.Context, reviewInput commonModel.OrthopedicSurgeryActivityReviewInput) (*string, error)
	SubmitDopsEvaluation(ctx context.Context, evaluationInput commonModel.DopsEvaluationInput) (*string, error)
	DeleteInProgressOrthopedicSurgeryActivity(ctx context.Context, activityID string) (*bool, error)
	DeleteInProgressDopsEvaluation(ctx context.Context, dopsEvaluationID string) (*bool, error)
	DeleteInProgressMiniCexEvaluation(ctx context.Context, miniCexEvaluationID string) (*bool, error)
	ConnectActivityToDopsEvaluation(ctx context.Context, activityID string, dopsEvaluationID string) (*commonModel.OrthopedicSurgeryActivity, error)
	SubmitMiniCexEvaluation(ctx context.Context, evaluationInput commonModel.MiniCexEvaluationInput) (*string, error)
	RequestMiniCexEvaluation(ctx context.Context, requestInput commonModel.MiniCexRequestInput) (*string, error)
	SetHasSeenNotifications(ctx context.Context, seenNotifications []*commonModel.SeenNotificationInput) ([]*commonModel.Notification, error)
}
type OrthopedicSurgeryActivityResolver interface {
	Description(ctx context.Context, obj *commonModel.OrthopedicSurgeryActivity) (*commonModel.Description, error)

	Resident(ctx context.Context, obj *commonModel.OrthopedicSurgeryActivity) (*commonModel.User, error)

	Supervisor(ctx context.Context, obj *commonModel.OrthopedicSurgeryActivity) (*commonModel.User, error)
}
type QueryResolver interface {
	Procedures(ctx context.Context) ([]*commonModel.Procedure, error)
	Examinations(ctx context.Context) ([]*commonModel.Examination, error)
	ResidentExaminations(ctx context.Context, residentUserID *string, supervisorUserID *string) ([]*commonModel.ResidentExamination, error)
	ResidentExamination(ctx context.Context, residentExaminationID string) (*commonModel.ResidentExamination, error)
	SupervisorExaminationReviews(ctx context.Context, reviewed *bool) ([]*commonModel.SupervisorExaminationReview, error)
	SupervisorExaminationReview(ctx context.Context, supervisorExaminationReviewID string) (*commonModel.SupervisorExaminationReview, error)
	Examination(ctx context.Context, id string) (*commonModel.Examination, error)
	Activities(ctx context.Context, queryFilter commonModel.ActivityQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) ([]*commonModel.Activity, error)
	LogbookEntries(ctx context.Context, queryFilters commonModel.LogbookEntryQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) ([]*commonModel.LogbookEntry, error)
	Assessments(ctx context.Context, queryFilters commonModel.AssessmentQueryFilter, orderBy *commonModel.QueryOrder, pagination *commonModel.QueryPaging) ([]*commonModel.Assessment, error)
	Hospitals(ctx context.Context, organisationID *string) ([]*commonModel.Hospital, error)
	Clinics(ctx context.Context, hospitalID *string) ([]*commonModel.Clinic, error)
	ClinicDepartments(ctx context.Context, clinicID string) ([]*commonModel.ClinicDepartment, error)
	ClinicDepartment(ctx context.Context, departmentID string) (*commonModel.ClinicDepartment, error)
	Supervisors(ctx context.Context, clinicID *string) ([]*commonModel.User, error)
	Residents(ctx context.Context, clinicID *string) ([]*commonModel.User, error)
	UserRoles(ctx context.Context, userID *string) ([]*commonModel.Role, error)
	User(ctx context.Context, userID *string) (*commonModel.User, error)
	PracticalActivityTypes(ctx context.Context) ([]*commonModel.PracticalActivityType, error)
	OrthopedicSurgeryActivityByID(ctx context.Context, activityID string) (*commonModel.OrthopedicSurgeryActivity, error)
	OrthopedicSurgeryActivityReviewByID(ctx context.Context, reviewID string) (*commonModel.OrthopedicSurgeryActivityReview, error)
	OrthopedicSurgeryActivities(ctx context.Context, queryFilter commonModel.SurgeryLogbookEntryQueryFilter, orderBy *commonModel.QueryOrder) ([]*commonModel.OrthopedicSurgeryActivity, error)
	Surgeries(ctx context.Context, clinicID *string, orderBy *commonModel.SurgeryOrder, paging *commonModel.QueryPaging) ([]*commonModel.Surgery, error)
	SurgeryByID(ctx context.Context, surgeryID string) (*commonModel.Surgery, error)
	SurgeriesByDiagnose(ctx context.Context, diagnoseID string) ([]*commonModel.Surgery, error)
	SurgeriesByMethod(ctx context.Context, methodID string) ([]*commonModel.Surgery, error)
	SurgeryByDiagnoseAndMethod(ctx context.Context, methodID string, diagnoseID string) (*commonModel.Surgery, error)
	EvaluationForms(ctx context.Context) ([]*commonModel.EvaluationForm, error)
	DopsEvaluations(ctx context.Context, queryFilter commonModel.DopsQueryFilter, orderBy *commonModel.QueryOrder) ([]*commonModel.DopsEvaluation, error)
	DopsEvaluation(ctx context.Context, dopsID *string, activityID *string) (*commonModel.DopsEvaluation, error)
	MiniCexEvaluations(ctx context.Context, queryFilter commonModel.MiniCexQueryFilter, orderBy *commonModel.QueryOrder) ([]*commonModel.MiniCexEvaluation, error)
	MiniCexEvaluation(ctx context.Context, miniCexEvaluationID string) (*commonModel.MiniCexEvaluation, error)
	MiniCexFocuses(ctx context.Context) ([]*commonModel.MiniCexFocus, error)
	MiniCexAreas(ctx context.Context, departmentID string) ([]*commonModel.MiniCexArea, error)
	Notifications(ctx context.Context, notificationType *commonModel.NotificationType, hasSeen bool) ([]*commonModel.Notification, error)
}
type ResidentExaminationResolver interface {
	Resident(ctx context.Context, obj *commonModel.ResidentExamination) (*commonModel.User, error)

	Supervisor(ctx context.Context, obj *commonModel.ResidentExamination) (*commonModel.User, error)
}
type SupervisorExaminationReviewResolver interface {
	Resident(ctx context.Context, obj *commonModel.SupervisorExaminationReview) (*commonModel.User, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Activity.assessment":
		if e.complexity.Activity.Assessment == nil {
			break
		}

		return e.complexity.Activity.Assessment(childComplexity), true

	case "Activity.logbookEntry":
		if e.complexity.Activity.LogbookEntry == nil {
			break
		}

		return e.complexity.Activity.LogbookEntry(childComplexity), true

	case "Activity.occurredAt":
		if e.complexity.Activity.OccurredAt == nil {
			break
		}

		return e.complexity.Activity.OccurredAt(childComplexity), true

	case "Aid.displayName":
		if e.complexity.Aid.DisplayName == nil {
			break
		}

		return e.complexity.Aid.DisplayName(childComplexity), true

	case "Aid.routes":
		if e.complexity.Aid.Routes == nil {
			break
		}

		return e.complexity.Aid.Routes(childComplexity), true

	case "Assessment.dops":
		if e.complexity.Assessment.Dops == nil {
			break
		}

		return e.complexity.Assessment.Dops(childComplexity), true

	case "Assessment.miniCex":
		if e.complexity.Assessment.MiniCex == nil {
			break
		}

		return e.complexity.Assessment.MiniCex(childComplexity), true

	case "Assessment.surgeryReview":
		if e.complexity.Assessment.SurgeryReview == nil {
			break
		}

		return e.complexity.Assessment.SurgeryReview(childComplexity), true

	case "Clinic.clinicId":
		if e.complexity.Clinic.ClinicID == nil {
			break
		}

		return e.complexity.Clinic.ClinicID(childComplexity), true

	case "Clinic.displayName":
		if e.complexity.Clinic.DisplayName == nil {
			break
		}

		return e.complexity.Clinic.DisplayName(childComplexity), true

	case "Clinic.hospital":
		if e.complexity.Clinic.Hospital == nil {
			break
		}

		return e.complexity.Clinic.Hospital(childComplexity), true

	case "Clinic.hospitalId":
		if e.complexity.Clinic.HospitalID == nil {
			break
		}

		return e.complexity.Clinic.HospitalID(childComplexity), true

	case "Clinic.specialty":
		if e.complexity.Clinic.Specialty == nil {
			break
		}

		return e.complexity.Clinic.Specialty(childComplexity), true

	case "ClinicDepartment.clinicId":
		if e.complexity.ClinicDepartment.ClinicID == nil {
			break
		}

		return e.complexity.ClinicDepartment.ClinicID(childComplexity), true

	case "ClinicDepartment.departmentId":
		if e.complexity.ClinicDepartment.DepartmentID == nil {
			break
		}

		return e.complexity.ClinicDepartment.DepartmentID(childComplexity), true

	case "ClinicDepartment.departmentName":
		if e.complexity.ClinicDepartment.DepartmentName == nil {
			break
		}

		return e.complexity.ClinicDepartment.DepartmentName(childComplexity), true

	case "ClinicRole.clinic":
		if e.complexity.ClinicRole.Clinic == nil {
			break
		}

		return e.complexity.ClinicRole.Clinic(childComplexity), true

	case "ClinicRole.role":
		if e.complexity.ClinicRole.Role == nil {
			break
		}

		return e.complexity.ClinicRole.Role(childComplexity), true

	case "Description.subrows":
		if e.complexity.Description.Subrows == nil {
			break
		}

		return e.complexity.Description.Subrows(childComplexity), true

	case "Description.title":
		if e.complexity.Description.Title == nil {
			break
		}

		return e.complexity.Description.Title(childComplexity), true

	case "DescriptionRow.subtitle":
		if e.complexity.DescriptionRow.Subtitle == nil {
			break
		}

		return e.complexity.DescriptionRow.Subtitle(childComplexity), true

	case "DescriptionRow.subtitleHighlight":
		if e.complexity.DescriptionRow.SubtitleHighlight == nil {
			break
		}

		return e.complexity.DescriptionRow.SubtitleHighlight(childComplexity), true

	case "DescriptionRow.title":
		if e.complexity.DescriptionRow.Title == nil {
			break
		}

		return e.complexity.DescriptionRow.Title(childComplexity), true

	case "DopsEvaluation.activeStep":
		if e.complexity.DopsEvaluation.ActiveStep == nil {
			break
		}

		return e.complexity.DopsEvaluation.ActiveStep(childComplexity), true

	case "DopsEvaluation.annotations":
		if e.complexity.DopsEvaluation.Annotations == nil {
			break
		}

		return e.complexity.DopsEvaluation.Annotations(childComplexity), true

	case "DopsEvaluation.completedStep":
		if e.complexity.DopsEvaluation.CompletedStep == nil {
			break
		}

		return e.complexity.DopsEvaluation.CompletedStep(childComplexity), true

	case "DopsEvaluation.createdAt":
		if e.complexity.DopsEvaluation.CreatedAt == nil {
			break
		}

		return e.complexity.DopsEvaluation.CreatedAt(childComplexity), true

	case "DopsEvaluation.department":
		if e.complexity.DopsEvaluation.Department == nil {
			break
		}

		return e.complexity.DopsEvaluation.Department(childComplexity), true

	case "DopsEvaluation.departmentId":
		if e.complexity.DopsEvaluation.DepartmentID == nil {
			break
		}

		return e.complexity.DopsEvaluation.DepartmentID(childComplexity), true

	case "DopsEvaluation.description":
		if e.complexity.DopsEvaluation.Description == nil {
			break
		}

		return e.complexity.DopsEvaluation.Description(childComplexity), true

	case "DopsEvaluation.difficulty":
		if e.complexity.DopsEvaluation.Difficulty == nil {
			break
		}

		return e.complexity.DopsEvaluation.Difficulty(childComplexity), true

	case "DopsEvaluation.dopsEvaluationId":
		if e.complexity.DopsEvaluation.DopsEvaluationID == nil {
			break
		}

		return e.complexity.DopsEvaluation.DopsEvaluationID(childComplexity), true

	case "DopsEvaluation.inProgress":
		if e.complexity.DopsEvaluation.InProgress == nil {
			break
		}

		return e.complexity.DopsEvaluation.InProgress(childComplexity), true

	case "DopsEvaluation.isEvaluated":
		if e.complexity.DopsEvaluation.IsEvaluated == nil {
			break
		}

		return e.complexity.DopsEvaluation.IsEvaluated(childComplexity), true

	case "DopsEvaluation.resident":
		if e.complexity.DopsEvaluation.Resident == nil {
			break
		}

		return e.complexity.DopsEvaluation.Resident(childComplexity), true

	case "DopsEvaluation.residentId":
		if e.complexity.DopsEvaluation.ResidentID == nil {
			break
		}

		return e.complexity.DopsEvaluation.ResidentID(childComplexity), true

	case "DopsEvaluation.supervisor":
		if e.complexity.DopsEvaluation.Supervisor == nil {
			break
		}

		return e.complexity.DopsEvaluation.Supervisor(childComplexity), true

	case "DopsEvaluation.supervisorId":
		if e.complexity.DopsEvaluation.SupervisorID == nil {
			break
		}

		return e.complexity.DopsEvaluation.SupervisorID(childComplexity), true

	case "DopsEvaluation.surgeryActivity":
		if e.complexity.DopsEvaluation.SurgeryActivity == nil {
			break
		}

		return e.complexity.DopsEvaluation.SurgeryActivity(childComplexity), true

	case "DopsEvaluation.surgeryMetadata":
		if e.complexity.DopsEvaluation.SurgeryMetadata == nil {
			break
		}

		return e.complexity.DopsEvaluation.SurgeryMetadata(childComplexity), true

	case "EvaluationForm.annotations":
		if e.complexity.EvaluationForm.Annotations == nil {
			break
		}

		return e.complexity.EvaluationForm.Annotations(childComplexity), true

	case "EvaluationForm.citations":
		if e.complexity.EvaluationForm.Citations == nil {
			break
		}

		return e.complexity.EvaluationForm.Citations(childComplexity), true

	case "EvaluationForm.difficulty":
		if e.complexity.EvaluationForm.Difficulty == nil {
			break
		}

		return e.complexity.EvaluationForm.Difficulty(childComplexity), true

	case "EvaluationForm.displayName":
		if e.complexity.EvaluationForm.DisplayName == nil {
			break
		}

		return e.complexity.EvaluationForm.DisplayName(childComplexity), true

	case "EvaluationForm.evaluationFormId":
		if e.complexity.EvaluationForm.EvaluationFormID == nil {
			break
		}

		return e.complexity.EvaluationForm.EvaluationFormID(childComplexity), true

	case "EvaluationFormAnnotation.comment":
		if e.complexity.EvaluationFormAnnotation.Comment == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotation.Comment(childComplexity), true

	case "EvaluationFormAnnotation.description":
		if e.complexity.EvaluationFormAnnotation.Description == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotation.Description(childComplexity), true

	case "EvaluationFormAnnotation.options":
		if e.complexity.EvaluationFormAnnotation.Options == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotation.Options(childComplexity), true

	case "EvaluationFormAnnotation.subject":
		if e.complexity.EvaluationFormAnnotation.Subject == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotation.Subject(childComplexity), true

	case "EvaluationFormAnnotation.type":
		if e.complexity.EvaluationFormAnnotation.Type == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotation.Type(childComplexity), true

	case "EvaluationFormAnnotations.comment":
		if e.complexity.EvaluationFormAnnotations.Comment == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Comment(childComplexity), true

	case "EvaluationFormAnnotations.description":
		if e.complexity.EvaluationFormAnnotations.Description == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Description(childComplexity), true

	case "EvaluationFormAnnotations.descriptionComment":
		if e.complexity.EvaluationFormAnnotations.DescriptionComment == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.DescriptionComment(childComplexity), true

	case "EvaluationFormAnnotations.notObserved":
		if e.complexity.EvaluationFormAnnotations.NotObserved == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.NotObserved(childComplexity), true

	case "EvaluationFormAnnotations.options":
		if e.complexity.EvaluationFormAnnotations.Options == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Options(childComplexity), true

	case "EvaluationFormAnnotations.subject":
		if e.complexity.EvaluationFormAnnotations.Subject == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Subject(childComplexity), true

	case "EvaluationFormAnnotations.type":
		if e.complexity.EvaluationFormAnnotations.Type == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Type(childComplexity), true

	case "EvaluationFormAnnotations.value":
		if e.complexity.EvaluationFormAnnotations.Value == nil {
			break
		}

		return e.complexity.EvaluationFormAnnotations.Value(childComplexity), true

	case "Examination.annotations":
		if e.complexity.Examination.Annotations == nil {
			break
		}

		return e.complexity.Examination.Annotations(childComplexity), true

	case "Examination.clinicId":
		if e.complexity.Examination.ClinicID == nil {
			break
		}

		return e.complexity.Examination.ClinicID(childComplexity), true

	case "Examination.displayName":
		if e.complexity.Examination.DisplayName == nil {
			break
		}

		return e.complexity.Examination.DisplayName(childComplexity), true

	case "Examination.examinationId":
		if e.complexity.Examination.ExaminationID == nil {
			break
		}

		return e.complexity.Examination.ExaminationID(childComplexity), true

	case "ExaminationAnnotations.evaluationGroup":
		if e.complexity.ExaminationAnnotations.EvaluationGroup == nil {
			break
		}

		return e.complexity.ExaminationAnnotations.EvaluationGroup(childComplexity), true

	case "ExaminationAnnotations.group":
		if e.complexity.ExaminationAnnotations.Group == nil {
			break
		}

		return e.complexity.ExaminationAnnotations.Group(childComplexity), true

	case "ExaminationAnnotations.label":
		if e.complexity.ExaminationAnnotations.Label == nil {
			break
		}

		return e.complexity.ExaminationAnnotations.Label(childComplexity), true

	case "Finding.displayName":
		if e.complexity.Finding.DisplayName == nil {
			break
		}

		return e.complexity.Finding.DisplayName(childComplexity), true

	case "Hospital.clinics":
		if e.complexity.Hospital.Clinics == nil {
			break
		}

		return e.complexity.Hospital.Clinics(childComplexity), true

	case "Hospital.displayName":
		if e.complexity.Hospital.DisplayName == nil {
			break
		}

		return e.complexity.Hospital.DisplayName(childComplexity), true

	case "Hospital.hospitalId":
		if e.complexity.Hospital.HospitalID == nil {
			break
		}

		return e.complexity.Hospital.HospitalID(childComplexity), true

	case "LogbookEntry.examination":
		if e.complexity.LogbookEntry.Examination == nil {
			break
		}

		return e.complexity.LogbookEntry.Examination(childComplexity), true

	case "LogbookEntry.procedure":
		if e.complexity.LogbookEntry.Procedure == nil {
			break
		}

		return e.complexity.LogbookEntry.Procedure(childComplexity), true

	case "LogbookEntry.surgery":
		if e.complexity.LogbookEntry.Surgery == nil {
			break
		}

		return e.complexity.LogbookEntry.Surgery(childComplexity), true

	case "Method.aids":
		if e.complexity.Method.Aids == nil {
			break
		}

		return e.complexity.Method.Aids(childComplexity), true

	case "Method.displayName":
		if e.complexity.Method.DisplayName == nil {
			break
		}

		return e.complexity.Method.DisplayName(childComplexity), true

	case "MiniCexArea.departmentId":
		if e.complexity.MiniCexArea.DepartmentID == nil {
			break
		}

		return e.complexity.MiniCexArea.DepartmentID(childComplexity), true

	case "MiniCexArea.miniCexAreaId":
		if e.complexity.MiniCexArea.MiniCexAreaID == nil {
			break
		}

		return e.complexity.MiniCexArea.MiniCexAreaID(childComplexity), true

	case "MiniCexArea.name":
		if e.complexity.MiniCexArea.Name == nil {
			break
		}

		return e.complexity.MiniCexArea.Name(childComplexity), true

	case "MiniCexEvaluation.activeStep":
		if e.complexity.MiniCexEvaluation.ActiveStep == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.ActiveStep(childComplexity), true

	case "MiniCexEvaluation.annotations":
		if e.complexity.MiniCexEvaluation.Annotations == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Annotations(childComplexity), true

	case "MiniCexEvaluation.area":
		if e.complexity.MiniCexEvaluation.Area == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Area(childComplexity), true

	case "MiniCexEvaluation.completedStep":
		if e.complexity.MiniCexEvaluation.CompletedStep == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.CompletedStep(childComplexity), true

	case "MiniCexEvaluation.createdAt":
		if e.complexity.MiniCexEvaluation.CreatedAt == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.CreatedAt(childComplexity), true

	case "MiniCexEvaluation.department":
		if e.complexity.MiniCexEvaluation.Department == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Department(childComplexity), true

	case "MiniCexEvaluation.departmentId":
		if e.complexity.MiniCexEvaluation.DepartmentID == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.DepartmentID(childComplexity), true

	case "MiniCexEvaluation.description":
		if e.complexity.MiniCexEvaluation.Description == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Description(childComplexity), true

	case "MiniCexEvaluation.difficulty":
		if e.complexity.MiniCexEvaluation.Difficulty == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Difficulty(childComplexity), true

	case "MiniCexEvaluation.focuses":
		if e.complexity.MiniCexEvaluation.Focuses == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Focuses(childComplexity), true

	case "MiniCexEvaluation.id":
		if e.complexity.MiniCexEvaluation.ID == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.ID(childComplexity), true

	case "MiniCexEvaluation.inProgress":
		if e.complexity.MiniCexEvaluation.InProgress == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.InProgress(childComplexity), true

	case "MiniCexEvaluation.isEvaluated":
		if e.complexity.MiniCexEvaluation.IsEvaluated == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.IsEvaluated(childComplexity), true

	case "MiniCexEvaluation.occurredAt":
		if e.complexity.MiniCexEvaluation.OccurredAt == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.OccurredAt(childComplexity), true

	case "MiniCexEvaluation.resident":
		if e.complexity.MiniCexEvaluation.Resident == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Resident(childComplexity), true

	case "MiniCexEvaluation.residentId":
		if e.complexity.MiniCexEvaluation.ResidentID == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.ResidentID(childComplexity), true

	case "MiniCexEvaluation.supervisor":
		if e.complexity.MiniCexEvaluation.Supervisor == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.Supervisor(childComplexity), true

	case "MiniCexEvaluation.supervisorId":
		if e.complexity.MiniCexEvaluation.SupervisorID == nil {
			break
		}

		return e.complexity.MiniCexEvaluation.SupervisorID(childComplexity), true

	case "MiniCexFocus.miniCexFocusId":
		if e.complexity.MiniCexFocus.MiniCexFocusID == nil {
			break
		}

		return e.complexity.MiniCexFocus.MiniCexFocusID(childComplexity), true

	case "MiniCexFocus.name":
		if e.complexity.MiniCexFocus.Name == nil {
			break
		}

		return e.complexity.MiniCexFocus.Name(childComplexity), true

	case "Mutation.ConnectActivityToDopsEvaluation":
		if e.complexity.Mutation.ConnectActivityToDopsEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_ConnectActivityToDopsEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConnectActivityToDopsEvaluation(childComplexity, args["activityId"].(string), args["dopsEvaluationId"].(string)), true

	case "Mutation.deleteInProgressDopsEvaluation":
		if e.complexity.Mutation.DeleteInProgressDopsEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInProgressDopsEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInProgressDopsEvaluation(childComplexity, args["dopsEvaluationId"].(string)), true

	case "Mutation.deleteInProgressMiniCexEvaluation":
		if e.complexity.Mutation.DeleteInProgressMiniCexEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInProgressMiniCexEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInProgressMiniCexEvaluation(childComplexity, args["miniCexEvaluationId"].(string)), true

	case "Mutation.deleteInProgressOrthopedicSurgeryActivity":
		if e.complexity.Mutation.DeleteInProgressOrthopedicSurgeryActivity == nil {
			break
		}

		args, err := ec.field_Mutation_deleteInProgressOrthopedicSurgeryActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteInProgressOrthopedicSurgeryActivity(childComplexity, args["activityId"].(string)), true

	case "Mutation.requestMiniCexEvaluation":
		if e.complexity.Mutation.RequestMiniCexEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_requestMiniCexEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestMiniCexEvaluation(childComplexity, args["requestInput"].(commonModel.MiniCexRequestInput)), true

	case "Mutation.setHasSeenNotifications":
		if e.complexity.Mutation.SetHasSeenNotifications == nil {
			break
		}

		args, err := ec.field_Mutation_setHasSeenNotifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetHasSeenNotifications(childComplexity, args["seenNotifications"].([]*commonModel.SeenNotificationInput)), true

	case "Mutation.submitDopsEvaluation":
		if e.complexity.Mutation.SubmitDopsEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_submitDopsEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitDopsEvaluation(childComplexity, args["evaluationInput"].(commonModel.DopsEvaluationInput)), true

	case "Mutation.submitMiniCexEvaluation":
		if e.complexity.Mutation.SubmitMiniCexEvaluation == nil {
			break
		}

		args, err := ec.field_Mutation_submitMiniCexEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitMiniCexEvaluation(childComplexity, args["evaluationInput"].(commonModel.MiniCexEvaluationInput)), true

	case "Mutation.submitOrthopedicSurgeryActivity":
		if e.complexity.Mutation.SubmitOrthopedicSurgeryActivity == nil {
			break
		}

		args, err := ec.field_Mutation_submitOrthopedicSurgeryActivity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitOrthopedicSurgeryActivity(childComplexity, args["activityInput"].(commonModel.OrthopedicSurgeryActivityInput)), true

	case "Mutation.submitOrthopedicSurgeryActivityReview":
		if e.complexity.Mutation.SubmitOrthopedicSurgeryActivityReview == nil {
			break
		}

		args, err := ec.field_Mutation_submitOrthopedicSurgeryActivityReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitOrthopedicSurgeryActivityReview(childComplexity, args["reviewInput"].(commonModel.OrthopedicSurgeryActivityReviewInput)), true

	case "Mutation.submitResidentExamination":
		if e.complexity.Mutation.SubmitResidentExamination == nil {
			break
		}

		args, err := ec.field_Mutation_submitResidentExamination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitResidentExamination(childComplexity, args["examination"].(commonModel.ResidentExaminationInput)), true

	case "Mutation.submitSupervisorExaminationReview":
		if e.complexity.Mutation.SubmitSupervisorExaminationReview == nil {
			break
		}

		args, err := ec.field_Mutation_submitSupervisorExaminationReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SubmitSupervisorExaminationReview(childComplexity, args["reviewedExamination"].(commonModel.SupervisorExaminationReviewInput)), true

	case "Notification.annotations":
		if e.complexity.Notification.Annotations == nil {
			break
		}

		return e.complexity.Notification.Annotations(childComplexity), true

	case "Notification.createdAt":
		if e.complexity.Notification.CreatedAt == nil {
			break
		}

		return e.complexity.Notification.CreatedAt(childComplexity), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.seenAt":
		if e.complexity.Notification.SeenAt == nil {
			break
		}

		return e.complexity.Notification.SeenAt(childComplexity), true

	case "Notification.user_id":
		if e.complexity.Notification.UserID == nil {
			break
		}

		return e.complexity.Notification.UserID(childComplexity), true

	case "NotificationAnnotations.notificationType":
		if e.complexity.NotificationAnnotations.NotificationType == nil {
			break
		}

		return e.complexity.NotificationAnnotations.NotificationType(childComplexity), true

	case "NotificationAnnotations.notificationUrl":
		if e.complexity.NotificationAnnotations.NotificationURL == nil {
			break
		}

		return e.complexity.NotificationAnnotations.NotificationURL(childComplexity), true

	case "NotificationAnnotations.relatedId":
		if e.complexity.NotificationAnnotations.RelatedID == nil {
			break
		}

		return e.complexity.NotificationAnnotations.RelatedID(childComplexity), true

	case "OrthopedicSurgeryActivity.activeStep":
		if e.complexity.OrthopedicSurgeryActivity.ActiveStep == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.ActiveStep(childComplexity), true

	case "OrthopedicSurgeryActivity.annotations":
		if e.complexity.OrthopedicSurgeryActivity.Annotations == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Annotations(childComplexity), true

	case "OrthopedicSurgeryActivity.assistantId":
		if e.complexity.OrthopedicSurgeryActivity.AssistantID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.AssistantID(childComplexity), true

	case "OrthopedicSurgeryActivity.comments":
		if e.complexity.OrthopedicSurgeryActivity.Comments == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Comments(childComplexity), true

	case "OrthopedicSurgeryActivity.completedStep":
		if e.complexity.OrthopedicSurgeryActivity.CompletedStep == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.CompletedStep(childComplexity), true

	case "OrthopedicSurgeryActivity.complications":
		if e.complexity.OrthopedicSurgeryActivity.Complications == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Complications(childComplexity), true

	case "OrthopedicSurgeryActivity.createdAt":
		if e.complexity.OrthopedicSurgeryActivity.CreatedAt == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.CreatedAt(childComplexity), true

	case "OrthopedicSurgeryActivity.description":
		if e.complexity.OrthopedicSurgeryActivity.Description == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Description(childComplexity), true

	case "OrthopedicSurgeryActivity.dops":
		if e.complexity.OrthopedicSurgeryActivity.Dops == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Dops(childComplexity), true

	case "OrthopedicSurgeryActivity.dopsRequested":
		if e.complexity.OrthopedicSurgeryActivity.DopsRequested == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.DopsRequested(childComplexity), true

	case "OrthopedicSurgeryActivity.id":
		if e.complexity.OrthopedicSurgeryActivity.ID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.ID(childComplexity), true

	case "OrthopedicSurgeryActivity.inProgress":
		if e.complexity.OrthopedicSurgeryActivity.InProgress == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.InProgress(childComplexity), true

	case "OrthopedicSurgeryActivity.operatorId":
		if e.complexity.OrthopedicSurgeryActivity.OperatorID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.OperatorID(childComplexity), true

	case "OrthopedicSurgeryActivity.resident":
		if e.complexity.OrthopedicSurgeryActivity.Resident == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Resident(childComplexity), true

	case "OrthopedicSurgeryActivity.residentUserId":
		if e.complexity.OrthopedicSurgeryActivity.ResidentUserID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.ResidentUserID(childComplexity), true

	case "OrthopedicSurgeryActivity.review":
		if e.complexity.OrthopedicSurgeryActivity.Review == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Review(childComplexity), true

	case "OrthopedicSurgeryActivity.reviewRequested":
		if e.complexity.OrthopedicSurgeryActivity.ReviewRequested == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.ReviewRequested(childComplexity), true

	case "OrthopedicSurgeryActivity.supervisor":
		if e.complexity.OrthopedicSurgeryActivity.Supervisor == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.Supervisor(childComplexity), true

	case "OrthopedicSurgeryActivity.supervisorUserId":
		if e.complexity.OrthopedicSurgeryActivity.SupervisorUserID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.SupervisorUserID(childComplexity), true

	case "OrthopedicSurgeryActivity.surgeryMetadata":
		if e.complexity.OrthopedicSurgeryActivity.SurgeryMetadata == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivity.SurgeryMetadata(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.closing":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Closing == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Closing(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.incision":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Incision == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Incision(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.inspection":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Inspection == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Inspection(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.opening":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Opening == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Opening(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.operationPlanning":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.OperationPlanning == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.OperationPlanning(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.osteosyntes":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Osteosyntes == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Osteosyntes(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.patientPositioning":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.PatientPositioning == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.PatientPositioning(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.plastering":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Plastering == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Plastering(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.postOp":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.PostOp == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.PostOp(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.repositioning":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.Repositioning == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.Repositioning(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotations.sawingAndDrillning":
		if e.complexity.OrthopedicSurgeryActivityAnnotations.SawingAndDrillning == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotations.SawingAndDrillning(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotationsField.withAssistance":
		if e.complexity.OrthopedicSurgeryActivityAnnotationsField.WithAssistance == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotationsField.WithAssistance(childComplexity), true

	case "OrthopedicSurgeryActivityAnnotationsField.withoutAssistance":
		if e.complexity.OrthopedicSurgeryActivityAnnotationsField.WithoutAssistance == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityAnnotationsField.WithoutAssistance(childComplexity), true

	case "OrthopedicSurgeryActivityReview.activeStep":
		if e.complexity.OrthopedicSurgeryActivityReview.ActiveStep == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.ActiveStep(childComplexity), true

	case "OrthopedicSurgeryActivityReview.activity":
		if e.complexity.OrthopedicSurgeryActivityReview.Activity == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Activity(childComplexity), true

	case "OrthopedicSurgeryActivityReview.activityId":
		if e.complexity.OrthopedicSurgeryActivityReview.ActivityID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.ActivityID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.annotations":
		if e.complexity.OrthopedicSurgeryActivityReview.Annotations == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Annotations(childComplexity), true

	case "OrthopedicSurgeryActivityReview.assistantId":
		if e.complexity.OrthopedicSurgeryActivityReview.AssistantID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.AssistantID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.comments":
		if e.complexity.OrthopedicSurgeryActivityReview.Comments == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Comments(childComplexity), true

	case "OrthopedicSurgeryActivityReview.completedStep":
		if e.complexity.OrthopedicSurgeryActivityReview.CompletedStep == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.CompletedStep(childComplexity), true

	case "OrthopedicSurgeryActivityReview.complications":
		if e.complexity.OrthopedicSurgeryActivityReview.Complications == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Complications(childComplexity), true

	case "OrthopedicSurgeryActivityReview.createdAt":
		if e.complexity.OrthopedicSurgeryActivityReview.CreatedAt == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.CreatedAt(childComplexity), true

	case "OrthopedicSurgeryActivityReview.description":
		if e.complexity.OrthopedicSurgeryActivityReview.Description == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Description(childComplexity), true

	case "OrthopedicSurgeryActivityReview.inProgress":
		if e.complexity.OrthopedicSurgeryActivityReview.InProgress == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.InProgress(childComplexity), true

	case "OrthopedicSurgeryActivityReview.operatorId":
		if e.complexity.OrthopedicSurgeryActivityReview.OperatorID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.OperatorID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.resident":
		if e.complexity.OrthopedicSurgeryActivityReview.Resident == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Resident(childComplexity), true

	case "OrthopedicSurgeryActivityReview.residentUserId":
		if e.complexity.OrthopedicSurgeryActivityReview.ResidentUserID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.ResidentUserID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.reviewComment":
		if e.complexity.OrthopedicSurgeryActivityReview.ReviewComment == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.ReviewComment(childComplexity), true

	case "OrthopedicSurgeryActivityReview.reviewId":
		if e.complexity.OrthopedicSurgeryActivityReview.ReviewID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.ReviewID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.signedAt":
		if e.complexity.OrthopedicSurgeryActivityReview.SignedAt == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.SignedAt(childComplexity), true

	case "OrthopedicSurgeryActivityReview.supervisor":
		if e.complexity.OrthopedicSurgeryActivityReview.Supervisor == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.Supervisor(childComplexity), true

	case "OrthopedicSurgeryActivityReview.supervisorUserId":
		if e.complexity.OrthopedicSurgeryActivityReview.SupervisorUserID == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.SupervisorUserID(childComplexity), true

	case "OrthopedicSurgeryActivityReview.surgeryMetadata":
		if e.complexity.OrthopedicSurgeryActivityReview.SurgeryMetadata == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.SurgeryMetadata(childComplexity), true

	case "OrthopedicSurgeryActivityReview.updatedAt":
		if e.complexity.OrthopedicSurgeryActivityReview.UpdatedAt == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryActivityReview.UpdatedAt(childComplexity), true

	case "OrthopedicSurgeryMetadata.caseNotes":
		if e.complexity.OrthopedicSurgeryMetadata.CaseNotes == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryMetadata.CaseNotes(childComplexity), true

	case "OrthopedicSurgeryMetadata.occurredAt":
		if e.complexity.OrthopedicSurgeryMetadata.OccurredAt == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryMetadata.OccurredAt(childComplexity), true

	case "OrthopedicSurgeryMetadata.patientAge":
		if e.complexity.OrthopedicSurgeryMetadata.PatientAge == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryMetadata.PatientAge(childComplexity), true

	case "OrthopedicSurgeryMetadata.patientGender":
		if e.complexity.OrthopedicSurgeryMetadata.PatientGender == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryMetadata.PatientGender(childComplexity), true

	case "OrthopedicSurgeryMetadata.surgeries":
		if e.complexity.OrthopedicSurgeryMetadata.Surgeries == nil {
			break
		}

		return e.complexity.OrthopedicSurgeryMetadata.Surgeries(childComplexity), true

	case "PracticalActivityType.displayName":
		if e.complexity.PracticalActivityType.DisplayName == nil {
			break
		}

		return e.complexity.PracticalActivityType.DisplayName(childComplexity), true

	case "PracticalActivityType.name":
		if e.complexity.PracticalActivityType.Name == nil {
			break
		}

		return e.complexity.PracticalActivityType.Name(childComplexity), true

	case "PracticalActivityType.practicalActivityTypeId":
		if e.complexity.PracticalActivityType.PracticalActivityTypeID == nil {
			break
		}

		return e.complexity.PracticalActivityType.PracticalActivityTypeID(childComplexity), true

	case "Procedure.annotations":
		if e.complexity.Procedure.Annotations == nil {
			break
		}

		return e.complexity.Procedure.Annotations(childComplexity), true

	case "Procedure.branches":
		if e.complexity.Procedure.Branches == nil {
			break
		}

		return e.complexity.Procedure.Branches(childComplexity), true

	case "Procedure.clinicId":
		if e.complexity.Procedure.ClinicID == nil {
			break
		}

		return e.complexity.Procedure.ClinicID(childComplexity), true

	case "Procedure.displayName":
		if e.complexity.Procedure.DisplayName == nil {
			break
		}

		return e.complexity.Procedure.DisplayName(childComplexity), true

	case "Procedure.procedureId":
		if e.complexity.Procedure.ProcedureID == nil {
			break
		}

		return e.complexity.Procedure.ProcedureID(childComplexity), true

	case "ProcedureAnnotations.methods":
		if e.complexity.ProcedureAnnotations.Methods == nil {
			break
		}

		return e.complexity.ProcedureAnnotations.Methods(childComplexity), true

	case "ProcedureBranch.branches":
		if e.complexity.ProcedureBranch.Branches == nil {
			break
		}

		return e.complexity.ProcedureBranch.Branches(childComplexity), true

	case "ProcedureBranch.label":
		if e.complexity.ProcedureBranch.Label == nil {
			break
		}

		return e.complexity.ProcedureBranch.Label(childComplexity), true

	case "Purpose.displayName":
		if e.complexity.Purpose.DisplayName == nil {
			break
		}

		return e.complexity.Purpose.DisplayName(childComplexity), true

	case "Purpose.findings":
		if e.complexity.Purpose.Findings == nil {
			break
		}

		return e.complexity.Purpose.Findings(childComplexity), true

	case "Query.activities":
		if e.complexity.Query.Activities == nil {
			break
		}

		args, err := ec.field_Query_activities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Activities(childComplexity, args["queryFilter"].(commonModel.ActivityQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging)), true

	case "Query.assessments":
		if e.complexity.Query.Assessments == nil {
			break
		}

		args, err := ec.field_Query_assessments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Assessments(childComplexity, args["queryFilters"].(commonModel.AssessmentQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging)), true

	case "Query.clinicDepartment":
		if e.complexity.Query.ClinicDepartment == nil {
			break
		}

		args, err := ec.field_Query_clinicDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ClinicDepartment(childComplexity, args["departmentId"].(string)), true

	case "Query.clinicDepartments":
		if e.complexity.Query.ClinicDepartments == nil {
			break
		}

		args, err := ec.field_Query_clinicDepartments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ClinicDepartments(childComplexity, args["clinicId"].(string)), true

	case "Query.clinics":
		if e.complexity.Query.Clinics == nil {
			break
		}

		args, err := ec.field_Query_clinics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Clinics(childComplexity, args["hospitalId"].(*string)), true

	case "Query.dopsEvaluation":
		if e.complexity.Query.DopsEvaluation == nil {
			break
		}

		args, err := ec.field_Query_dopsEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DopsEvaluation(childComplexity, args["dopsId"].(*string), args["activityId"].(*string)), true

	case "Query.dopsEvaluations":
		if e.complexity.Query.DopsEvaluations == nil {
			break
		}

		args, err := ec.field_Query_dopsEvaluations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DopsEvaluations(childComplexity, args["queryFilter"].(commonModel.DopsQueryFilter), args["orderBy"].(*commonModel.QueryOrder)), true

	case "Query.evaluationForms":
		if e.complexity.Query.EvaluationForms == nil {
			break
		}

		return e.complexity.Query.EvaluationForms(childComplexity), true

	case "Query.examination":
		if e.complexity.Query.Examination == nil {
			break
		}

		args, err := ec.field_Query_examination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Examination(childComplexity, args["id"].(string)), true

	case "Query.examinations":
		if e.complexity.Query.Examinations == nil {
			break
		}

		return e.complexity.Query.Examinations(childComplexity), true

	case "Query.hospitals":
		if e.complexity.Query.Hospitals == nil {
			break
		}

		args, err := ec.field_Query_hospitals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Hospitals(childComplexity, args["organisationId"].(*string)), true

	case "Query.logbookEntries":
		if e.complexity.Query.LogbookEntries == nil {
			break
		}

		args, err := ec.field_Query_logbookEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LogbookEntries(childComplexity, args["queryFilters"].(commonModel.LogbookEntryQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging)), true

	case "Query.miniCexAreas":
		if e.complexity.Query.MiniCexAreas == nil {
			break
		}

		args, err := ec.field_Query_miniCexAreas_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MiniCexAreas(childComplexity, args["departmentId"].(string)), true

	case "Query.miniCexEvaluation":
		if e.complexity.Query.MiniCexEvaluation == nil {
			break
		}

		args, err := ec.field_Query_miniCexEvaluation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MiniCexEvaluation(childComplexity, args["miniCexEvaluationId"].(string)), true

	case "Query.miniCexEvaluations":
		if e.complexity.Query.MiniCexEvaluations == nil {
			break
		}

		args, err := ec.field_Query_miniCexEvaluations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MiniCexEvaluations(childComplexity, args["queryFilter"].(commonModel.MiniCexQueryFilter), args["orderBy"].(*commonModel.QueryOrder)), true

	case "Query.miniCexFocuses":
		if e.complexity.Query.MiniCexFocuses == nil {
			break
		}

		return e.complexity.Query.MiniCexFocuses(childComplexity), true

	case "Query.notifications":
		if e.complexity.Query.Notifications == nil {
			break
		}

		args, err := ec.field_Query_notifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notifications(childComplexity, args["notificationType"].(*commonModel.NotificationType), args["hasSeen"].(bool)), true

	case "Query.orthopedicSurgeryActivities":
		if e.complexity.Query.OrthopedicSurgeryActivities == nil {
			break
		}

		args, err := ec.field_Query_orthopedicSurgeryActivities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrthopedicSurgeryActivities(childComplexity, args["queryFilter"].(commonModel.SurgeryLogbookEntryQueryFilter), args["orderBy"].(*commonModel.QueryOrder)), true

	case "Query.orthopedicSurgeryActivityById":
		if e.complexity.Query.OrthopedicSurgeryActivityByID == nil {
			break
		}

		args, err := ec.field_Query_orthopedicSurgeryActivityById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrthopedicSurgeryActivityByID(childComplexity, args["activityId"].(string)), true

	case "Query.orthopedicSurgeryActivityReviewById":
		if e.complexity.Query.OrthopedicSurgeryActivityReviewByID == nil {
			break
		}

		args, err := ec.field_Query_orthopedicSurgeryActivityReviewById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrthopedicSurgeryActivityReviewByID(childComplexity, args["reviewId"].(string)), true

	case "Query.practicalActivityTypes":
		if e.complexity.Query.PracticalActivityTypes == nil {
			break
		}

		return e.complexity.Query.PracticalActivityTypes(childComplexity), true

	case "Query.procedures":
		if e.complexity.Query.Procedures == nil {
			break
		}

		return e.complexity.Query.Procedures(childComplexity), true

	case "Query.residentExamination":
		if e.complexity.Query.ResidentExamination == nil {
			break
		}

		args, err := ec.field_Query_residentExamination_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResidentExamination(childComplexity, args["residentExaminationId"].(string)), true

	case "Query.residentExaminations":
		if e.complexity.Query.ResidentExaminations == nil {
			break
		}

		args, err := ec.field_Query_residentExaminations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ResidentExaminations(childComplexity, args["residentUserId"].(*string), args["supervisorUserId"].(*string)), true

	case "Query.residents":
		if e.complexity.Query.Residents == nil {
			break
		}

		args, err := ec.field_Query_residents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Residents(childComplexity, args["clinicId"].(*string)), true

	case "Query.supervisorExaminationReview":
		if e.complexity.Query.SupervisorExaminationReview == nil {
			break
		}

		args, err := ec.field_Query_supervisorExaminationReview_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SupervisorExaminationReview(childComplexity, args["supervisorExaminationReviewId"].(string)), true

	case "Query.supervisorExaminationReviews":
		if e.complexity.Query.SupervisorExaminationReviews == nil {
			break
		}

		args, err := ec.field_Query_supervisorExaminationReviews_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SupervisorExaminationReviews(childComplexity, args["reviewed"].(*bool)), true

	case "Query.supervisors":
		if e.complexity.Query.Supervisors == nil {
			break
		}

		args, err := ec.field_Query_supervisors_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Supervisors(childComplexity, args["clinicId"].(*string)), true

	case "Query.Surgeries":
		if e.complexity.Query.Surgeries == nil {
			break
		}

		args, err := ec.field_Query_Surgeries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Surgeries(childComplexity, args["clinicId"].(*string), args["orderBy"].(*commonModel.SurgeryOrder), args["paging"].(*commonModel.QueryPaging)), true

	case "Query.SurgeriesByDiagnose":
		if e.complexity.Query.SurgeriesByDiagnose == nil {
			break
		}

		args, err := ec.field_Query_SurgeriesByDiagnose_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurgeriesByDiagnose(childComplexity, args["diagnoseId"].(string)), true

	case "Query.SurgeriesByMethod":
		if e.complexity.Query.SurgeriesByMethod == nil {
			break
		}

		args, err := ec.field_Query_SurgeriesByMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurgeriesByMethod(childComplexity, args["methodId"].(string)), true

	case "Query.SurgeryByDiagnoseAndMethod":
		if e.complexity.Query.SurgeryByDiagnoseAndMethod == nil {
			break
		}

		args, err := ec.field_Query_SurgeryByDiagnoseAndMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurgeryByDiagnoseAndMethod(childComplexity, args["methodId"].(string), args["diagnoseId"].(string)), true

	case "Query.SurgeryById":
		if e.complexity.Query.SurgeryByID == nil {
			break
		}

		args, err := ec.field_Query_SurgeryById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SurgeryByID(childComplexity, args["surgeryId"].(string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["userId"].(*string)), true

	case "Query.userRoles":
		if e.complexity.Query.UserRoles == nil {
			break
		}

		args, err := ec.field_Query_userRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserRoles(childComplexity, args["userId"].(*string)), true

	case "ResidentExamination.annotations":
		if e.complexity.ResidentExamination.Annotations == nil {
			break
		}

		return e.complexity.ResidentExamination.Annotations(childComplexity), true

	case "ResidentExamination.clinicId":
		if e.complexity.ResidentExamination.ClinicID == nil {
			break
		}

		return e.complexity.ResidentExamination.ClinicID(childComplexity), true

	case "ResidentExamination.createdAt":
		if e.complexity.ResidentExamination.CreatedAt == nil {
			break
		}

		return e.complexity.ResidentExamination.CreatedAt(childComplexity), true

	case "ResidentExamination.displayName":
		if e.complexity.ResidentExamination.DisplayName == nil {
			break
		}

		return e.complexity.ResidentExamination.DisplayName(childComplexity), true

	case "ResidentExamination.examinationId":
		if e.complexity.ResidentExamination.ExaminationID == nil {
			break
		}

		return e.complexity.ResidentExamination.ExaminationID(childComplexity), true

	case "ResidentExamination.resident":
		if e.complexity.ResidentExamination.Resident == nil {
			break
		}

		return e.complexity.ResidentExamination.Resident(childComplexity), true

	case "ResidentExamination.residentExaminationId":
		if e.complexity.ResidentExamination.ResidentExaminationID == nil {
			break
		}

		return e.complexity.ResidentExamination.ResidentExaminationID(childComplexity), true

	case "ResidentExamination.residentUserId":
		if e.complexity.ResidentExamination.ResidentUserID == nil {
			break
		}

		return e.complexity.ResidentExamination.ResidentUserID(childComplexity), true

	case "ResidentExamination.supervisor":
		if e.complexity.ResidentExamination.Supervisor == nil {
			break
		}

		return e.complexity.ResidentExamination.Supervisor(childComplexity), true

	case "ResidentExamination.supervisorUserId":
		if e.complexity.ResidentExamination.SupervisorUserID == nil {
			break
		}

		return e.complexity.ResidentExamination.SupervisorUserID(childComplexity), true

	case "ResidentExaminationAnnotations.evaluationGroup":
		if e.complexity.ResidentExaminationAnnotations.EvaluationGroup == nil {
			break
		}

		return e.complexity.ResidentExaminationAnnotations.EvaluationGroup(childComplexity), true

	case "ResidentExaminationAnnotations.evaluationValue":
		if e.complexity.ResidentExaminationAnnotations.EvaluationValue == nil {
			break
		}

		return e.complexity.ResidentExaminationAnnotations.EvaluationValue(childComplexity), true

	case "ResidentExaminationAnnotations.group":
		if e.complexity.ResidentExaminationAnnotations.Group == nil {
			break
		}

		return e.complexity.ResidentExaminationAnnotations.Group(childComplexity), true

	case "ResidentExaminationAnnotations.label":
		if e.complexity.ResidentExaminationAnnotations.Label == nil {
			break
		}

		return e.complexity.ResidentExaminationAnnotations.Label(childComplexity), true

	case "ResidentExaminationAnnotations.value":
		if e.complexity.ResidentExaminationAnnotations.Value == nil {
			break
		}

		return e.complexity.ResidentExaminationAnnotations.Value(childComplexity), true

	case "Role.displayName":
		if e.complexity.Role.DisplayName == nil {
			break
		}

		return e.complexity.Role.DisplayName(childComplexity), true

	case "Role.roleIdentifier":
		if e.complexity.Role.RoleIdentifier == nil {
			break
		}

		return e.complexity.Role.RoleIdentifier(childComplexity), true

	case "Route.displayName":
		if e.complexity.Route.DisplayName == nil {
			break
		}

		return e.complexity.Route.DisplayName(childComplexity), true

	case "Route.purposes":
		if e.complexity.Route.Purposes == nil {
			break
		}

		return e.complexity.Route.Purposes(childComplexity), true

	case "SupervisorExaminationReview.annotations":
		if e.complexity.SupervisorExaminationReview.Annotations == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.Annotations(childComplexity), true

	case "SupervisorExaminationReview.comment":
		if e.complexity.SupervisorExaminationReview.Comment == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.Comment(childComplexity), true

	case "SupervisorExaminationReview.createdAt":
		if e.complexity.SupervisorExaminationReview.CreatedAt == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.CreatedAt(childComplexity), true

	case "SupervisorExaminationReview.displayName":
		if e.complexity.SupervisorExaminationReview.DisplayName == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.DisplayName(childComplexity), true

	case "SupervisorExaminationReview.isReviewed":
		if e.complexity.SupervisorExaminationReview.IsReviewed == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.IsReviewed(childComplexity), true

	case "SupervisorExaminationReview.resident":
		if e.complexity.SupervisorExaminationReview.Resident == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.Resident(childComplexity), true

	case "SupervisorExaminationReview.residentExaminationId":
		if e.complexity.SupervisorExaminationReview.ResidentExaminationID == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.ResidentExaminationID(childComplexity), true

	case "SupervisorExaminationReview.residentUpdatedAt":
		if e.complexity.SupervisorExaminationReview.ResidentUpdatedAt == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.ResidentUpdatedAt(childComplexity), true

	case "SupervisorExaminationReview.residentUserId":
		if e.complexity.SupervisorExaminationReview.ResidentUserID == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.ResidentUserID(childComplexity), true

	case "SupervisorExaminationReview.supervisor":
		if e.complexity.SupervisorExaminationReview.Supervisor == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.Supervisor(childComplexity), true

	case "SupervisorExaminationReview.supervisorExaminationReviewId":
		if e.complexity.SupervisorExaminationReview.SupervisorExaminationReviewID == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.SupervisorExaminationReviewID(childComplexity), true

	case "SupervisorExaminationReview.supervisorUpdatedAt":
		if e.complexity.SupervisorExaminationReview.SupervisorUpdatedAt == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.SupervisorUpdatedAt(childComplexity), true

	case "SupervisorExaminationReview.supervisorUserId":
		if e.complexity.SupervisorExaminationReview.SupervisorUserID == nil {
			break
		}

		return e.complexity.SupervisorExaminationReview.SupervisorUserID(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.comment":
		if e.complexity.SupervisorExaminationReviewAnnotations.Comment == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.Comment(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.evaluationGroup":
		if e.complexity.SupervisorExaminationReviewAnnotations.EvaluationGroup == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.EvaluationGroup(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.evaluationValue":
		if e.complexity.SupervisorExaminationReviewAnnotations.EvaluationValue == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.EvaluationValue(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.group":
		if e.complexity.SupervisorExaminationReviewAnnotations.Group == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.Group(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.label":
		if e.complexity.SupervisorExaminationReviewAnnotations.Label == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.Label(childComplexity), true

	case "SupervisorExaminationReviewAnnotations.value":
		if e.complexity.SupervisorExaminationReviewAnnotations.Value == nil {
			break
		}

		return e.complexity.SupervisorExaminationReviewAnnotations.Value(childComplexity), true

	case "Surgery.diagnose":
		if e.complexity.Surgery.Diagnose == nil {
			break
		}

		return e.complexity.Surgery.Diagnose(childComplexity), true

	case "Surgery.id":
		if e.complexity.Surgery.ID == nil {
			break
		}

		return e.complexity.Surgery.ID(childComplexity), true

	case "Surgery.method":
		if e.complexity.Surgery.Method == nil {
			break
		}

		return e.complexity.Surgery.Method(childComplexity), true

	case "SurgeryDiagnose.bodypart":
		if e.complexity.SurgeryDiagnose.Bodypart == nil {
			break
		}

		return e.complexity.SurgeryDiagnose.Bodypart(childComplexity), true

	case "SurgeryDiagnose.diagnoseCode":
		if e.complexity.SurgeryDiagnose.DiagnoseCode == nil {
			break
		}

		return e.complexity.SurgeryDiagnose.DiagnoseCode(childComplexity), true

	case "SurgeryDiagnose.diagnoseName":
		if e.complexity.SurgeryDiagnose.DiagnoseName == nil {
			break
		}

		return e.complexity.SurgeryDiagnose.DiagnoseName(childComplexity), true

	case "SurgeryDiagnose.extraCode":
		if e.complexity.SurgeryDiagnose.ExtraCode == nil {
			break
		}

		return e.complexity.SurgeryDiagnose.ExtraCode(childComplexity), true

	case "SurgeryDiagnose.id":
		if e.complexity.SurgeryDiagnose.ID == nil {
			break
		}

		return e.complexity.SurgeryDiagnose.ID(childComplexity), true

	case "SurgeryMethod.approachName":
		if e.complexity.SurgeryMethod.ApproachName == nil {
			break
		}

		return e.complexity.SurgeryMethod.ApproachName(childComplexity), true

	case "SurgeryMethod.id":
		if e.complexity.SurgeryMethod.ID == nil {
			break
		}

		return e.complexity.SurgeryMethod.ID(childComplexity), true

	case "SurgeryMethod.methodCode":
		if e.complexity.SurgeryMethod.MethodCode == nil {
			break
		}

		return e.complexity.SurgeryMethod.MethodCode(childComplexity), true

	case "SurgeryMethod.methodName":
		if e.complexity.SurgeryMethod.MethodName == nil {
			break
		}

		return e.complexity.SurgeryMethod.MethodName(childComplexity), true

	case "User.clinicIds":
		if e.complexity.User.ClinicIds == nil {
			break
		}

		return e.complexity.User.ClinicIds(childComplexity), true

	case "User.clinicRoles":
		if e.complexity.User.ClinicRoles == nil {
			break
		}

		return e.complexity.User.ClinicRoles(childComplexity), true

	case "User.displayName":
		if e.complexity.User.DisplayName == nil {
			break
		}

		return e.complexity.User.DisplayName(childComplexity), true

	case "User.userId":
		if e.complexity.User.UserID == nil {
			break
		}

		return e.complexity.User.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "internal/logbookService/graph/schemas/mutations/mutations.schema.graphqls", Input: `type Mutation {
    submitResidentExamination(examination: ResidentExaminationInput!): ResidentExamination!
    submitSupervisorExaminationReview(reviewedExamination: SupervisorExaminationReviewInput!): SupervisorExaminationReview!
    submitOrthopedicSurgeryActivity(activityInput: OrthopedicSurgeryActivityInput!): String
    submitOrthopedicSurgeryActivityReview(reviewInput: OrthopedicSurgeryActivityReviewInput!): String
    submitDopsEvaluation(evaluationInput: DopsEvaluationInput!): String
    deleteInProgressOrthopedicSurgeryActivity(activityId: String!): Boolean
    deleteInProgressDopsEvaluation(dopsEvaluationId: String!): Boolean
    deleteInProgressMiniCexEvaluation(miniCexEvaluationId: String!): Boolean
    ConnectActivityToDopsEvaluation(activityId: String! dopsEvaluationId: String!) : OrthopedicSurgeryActivity!
    submitMiniCexEvaluation(evaluationInput: MiniCexEvaluationInput!): String
    requestMiniCexEvaluation(requestInput: MiniCexRequestInput!): String
    setHasSeenNotifications(seenNotifications: [SeenNotificationInput!]!): [Notification!]!
}`, BuiltIn: false},
	{Name: "internal/logbookService/graph/schemas/queries/queries.schema.graphqls", Input: `type Query {
    # procedures
    procedures: [Procedure!]!

    # Examinations
    examinations: [Examination!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    residentExaminations(residentUserId: String, supervisorUserId: String): [ResidentExamination!] @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    residentExamination(residentExaminationId: String!): ResidentExamination!
    supervisorExaminationReviews(reviewed: Boolean): [SupervisorExaminationReview!]!
    supervisorExaminationReview(supervisorExaminationReviewId: String!): SupervisorExaminationReview!
    examination(id: String!): Examination!

    # Other
    activities(queryFilter: ActivityQueryFilter!, orderBy: QueryOrder, pagination: QueryPaging): [Activity!]! @hasOneOfRoles(roles:[{roleIdentifier:"Resident"},{roleIdentifier: "Supervisor"}, {roleIdentifier: "Director"}])
    logbookEntries(queryFilters: LogbookEntryQueryFilter!, orderBy: QueryOrder, pagination: QueryPaging): [LogbookEntry!]! @hasOneOfRoles(roles:[{roleIdentifier:"Resident"},{roleIdentifier: "Supervisor"}, {roleIdentifier: "Director"}])
    assessments(queryFilters: AssessmentQueryFilter!, orderBy: QueryOrder, pagination: QueryPaging): [Assessment!]! @hasAtLeastRole(role:{roleIdentifier:"Supervisor"})

    hospitals(organisationId: String): [Hospital!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    clinics(hospitalId: String): [Clinic!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    clinicDepartments(clinicId: String!): [ClinicDepartment!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    clinicDepartment(departmentId: String!): ClinicDepartment! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    supervisors(clinicId: String): [User!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    residents(clinicId: String): [User!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})
    userRoles(userId: String): [Role!] @hasOneOfRoles(roles:[{roleIdentifier:"Resident"},{roleIdentifier: "Supervisor"}, {roleIdentifier: "Director"}])
    user(userId: String): User!
    practicalActivityTypes: [PracticalActivityType!]! @hasAtLeastRole(role:{roleIdentifier:"Resident"})

    # OrthopedicSurgeries
    orthopedicSurgeryActivityById(activityId: String! @binding(constraint: "required,uuid")): OrthopedicSurgeryActivity!
    orthopedicSurgeryActivityReviewById(reviewId: String! @binding(constraint: "required,uuid")): OrthopedicSurgeryActivityReview!
    orthopedicSurgeryActivities(queryFilter: SurgeryLogbookEntryQueryFilter!, orderBy: QueryOrder): [OrthopedicSurgeryActivity!]!

    Surgeries(clinicId: String, orderBy: SurgeryOrder, paging: QueryPaging ): [Surgery]!
    SurgeryById(surgeryId: String! @binding(constraint: "required,uuid")): Surgery!
    SurgeriesByDiagnose(diagnoseId: String! @binding(constraint: "required,uuid")): [Surgery]!
    SurgeriesByMethod(methodId: String! @binding(constraint: "required,uuid")): [Surgery]!
    SurgeryByDiagnoseAndMethod(methodId: String! @binding(constraint: "required,uuid"), diagnoseId: String! @binding(constraint: "required,uuid")): Surgery!

    # Evaluation forms
    evaluationForms: [EvaluationForm!]!

    # Dops
    dopsEvaluations(queryFilter: DopsQueryFilter!, orderBy: QueryOrder): [DopsEvaluation!]! @hasOneOfRoles(roles:[{roleIdentifier:"Resident"},{roleIdentifier: "Supervisor"}, {roleIdentifier: "Director"}])
    dopsEvaluation(dopsId: String, activityId: String): DopsEvaluation!

    # Mini-Cex
    miniCexEvaluations(queryFilter: MiniCexQueryFilter!, orderBy: QueryOrder): [MiniCexEvaluation!]! @hasOneOfRoles(roles:[{roleIdentifier:"Resident"},{roleIdentifier: "Supervisor"}, {roleIdentifier: "Director"}])
    miniCexEvaluation(miniCexEvaluationId: String!): MiniCexEvaluation!

    miniCexFocuses: [MiniCexFocus!]!
    miniCexAreas(departmentId: String!): [MiniCexArea!]!

    # Notifications
    notifications(notificationType: NotificationType, hasSeen: Boolean!): [Notification!]!
}`, BuiltIn: false},
	{Name: "internal/graph/common/directives/authorization.schema.graphqls", Input: `directive @hasAtLeastRole(role: RoleInput!) on FIELD_DEFINITION
directive @hasOneOfRoles(roles: [RoleInput]!) on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION| FIELD_DEFINITION
directive @binding(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
`, BuiltIn: false},
	{Name: "internal/graph/common/types/errors.schema.graphqls", Input: `enum Error {
    UnAuthorized,
    ItemNotFound,
    BadRequest,
    UnknownServerError,
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/evaluation-forms.schema.graphqls", Input: `type EvaluationForm {
    evaluationFormId: Int!
    displayName: String!
    difficulty: [String!]!
    annotations: [EvaluationFormAnnotation!]!
    citations: [String!]!
}

type EvaluationFormAnnotation {
    subject: String!
    description: String!
    comment: String!
    options: [String!]!
    type: EvaluationFormAnnotationType!
}

enum EvaluationFormAnnotationType {
    SlidingScale
    Option
    Summary
}

type DopsEvaluation {
    dopsEvaluationId: String!
    description: Description!
    surgeryActivity: OrthopedicSurgeryActivity
    supervisorId: String!
    supervisor: User!
    residentId: String!
    resident: User!
    surgeryMetadata: OrthopedicSurgeryMetadata!
    difficulty: String
    departmentId: String
    department: ClinicDepartment
    annotations: [EvaluationFormAnnotations!]!
    isEvaluated: Boolean!
    createdAt: Time!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

type MiniCexEvaluation {
    id: String!
    description: Description!
    supervisorId: String!
    supervisor: User!
    residentId: String!
    resident: User!
    difficulty: String
    focuses: [String!]!
    area: String!
    departmentId: String
    department: ClinicDepartment
    annotations: [EvaluationFormAnnotations!]!
    isEvaluated: Boolean!
    occurredAt: Time!
    createdAt: Time!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

type EvaluationFormAnnotations {
    subject: String!
    description: String!
    descriptionComment: String!
    notObserved: Boolean
    options: [String!]!
    comment: String
    value: Int
    type: EvaluationFormAnnotationType!
}

type MiniCexFocus {
    miniCexFocusId: Int!
    name: String!
}

type MiniCexArea {
    miniCexAreaId: Int!
    departmentId: String!
    name: String!
}

input MiniCexQueryFilter {
    residentId: String
    supervisorId: String
    isEvaluated: Boolean
    inProgress: Boolean
}

input DopsQueryFilter {
    residentId: String
    supervisorId: String
    isEvaluated: Boolean
    isConnected: Boolean
    inProgress: Boolean
    surgeries: [String!]
}

input DopsEvaluationInput {
    dopsEvaluationId: String
    surgeryMetadata: OrthopedicSurgeryMetadataInput
    residentId: String
    surgeryActivityId: String
    difficulty: String
    departmentId: String
    annotations: [EvaluationFormAnnotationsInput!]!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

input MiniCexEvaluationInput {
    id: String
    residentId: String
    difficulty: String
    area: String!
    focuses: [String!]!
    departmentId: String
    occurredAt: Time!
    annotations: [EvaluationFormAnnotationsInput!]!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

input MiniCexRequestInput {
    supervisorId: String
    difficulty: String!
    departmentId: String!
    occurredAt: Time!
    annotations: [EvaluationFormAnnotationsInput!]!
}

input EvaluationFormAnnotationsInput {
    subject: String!
    description: String!
    descriptionComment: String!
    notObserved: Boolean
    options: [String!]!
    comment: String
    value: Int
    type: EvaluationFormAnnotationType!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/notifications.graphqls", Input: `type Notification {
    id: String!
    user_id: String!
    annotations: NotificationAnnotations!
    createdAt: Time!
    seenAt: Time
}

type NotificationAnnotations {
    relatedId: String!
    notificationUrl: String!
    notificationType: NotificationType!
}

enum NotificationType {
    Activity,
    reviewRequest,
    DopsRequest,
    DopsEvaluation,
    MiniCexRequest,
    MiniCexEvaluation,
}

input SeenNotificationInput {
    id: String!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/organizational-entities.schema.graphqls", Input: `type Hospital {
    hospitalId: String!
    displayName: String!
    clinics: [Clinic!]
}

type Clinic {
    clinicId: String!
    displayName: String!
    specialty: Specialties!
    hospitalId: String
    hospital: Hospital
}

enum Specialties {
    Orthopedics
    EmergencyMedicine
    Unknown
}

type ClinicDepartment {
    departmentId: String!
    departmentName: String!
    clinicId: String!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/orthopedic-surgery-activity.schema.graphqls", Input: `type OrthopedicSurgeryActivity  {
    id: String!
    description: Description!
    createdAt: Time!
    surgeryMetadata: OrthopedicSurgeryMetadata!
    residentUserId: String!
    resident: User!
    supervisorUserId: String
    supervisor: User
    operatorId: String
    assistantId: String
    comments: String!
    complications: String!
    annotations: OrthopedicSurgeryActivityAnnotations!
    reviewRequested: Boolean!
    review: OrthopedicSurgeryActivityReview
    dopsRequested: Boolean!
    dops: DopsEvaluation
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

type OrthopedicSurgeryMetadata {
    occurredAt: Time!
    surgeries: [Surgery!]!
    caseNotes: String!
    patientAge: Int!
    patientGender: String!
}

type OrthopedicSurgeryActivityAnnotations {
    operationPlanning: OrthopedicSurgeryActivityAnnotationsField
    patientPositioning: OrthopedicSurgeryActivityAnnotationsField
    incision: OrthopedicSurgeryActivityAnnotationsField
    opening: OrthopedicSurgeryActivityAnnotationsField
    inspection: OrthopedicSurgeryActivityAnnotationsField
    repositioning: OrthopedicSurgeryActivityAnnotationsField
    sawingAndDrillning: OrthopedicSurgeryActivityAnnotationsField
    osteosyntes: OrthopedicSurgeryActivityAnnotationsField
    closing: OrthopedicSurgeryActivityAnnotationsField
    plastering: OrthopedicSurgeryActivityAnnotationsField
    postOp: OrthopedicSurgeryActivityAnnotationsField
}

type OrthopedicSurgeryActivityAnnotationsField {
    withAssistance: Boolean!
    withoutAssistance: Boolean!
}

type OrthopedicSurgeryActivityReview {
    reviewId: String!
    activityId: String!
    description: Description!
    activity: OrthopedicSurgeryActivity!
    createdAt: Time!
    updatedAt: Time!
    signedAt: Time
    surgeryMetadata: OrthopedicSurgeryMetadata!
    operatorId: String!
    assistantId: String!
    comments: String!
    complications: String!
    annotations: OrthopedicSurgeryActivityAnnotations!
    residentUserId: String!
    supervisorUserId: String!
    supervisor: User!,
    resident: User!,
    reviewComment: String!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

input SurgeryLogbookEntryQueryFilter {
    date: Time @binding(constraint: "datetime")
    inProgress: Boolean
    hasDops: Boolean
    hasReview: Boolean
    surgeries: [String!]
    residentId: String
    supervisorId: String
}

input SurgeryReviewQueryFilter {
    date: Time @binding(constraint: "datetime")
    inProgress: Boolean
    isEvaluated: Boolean
    surgeries: [String!]
    residentId: String
    supervisorId: String
}

input OrthopedicSurgeryActivityAnnotationsInput {
    operationPlanning: OrthopedicSurgeryActivityAnnotationsFieldInput
    patientPositioning: OrthopedicSurgeryActivityAnnotationsFieldInput
    incision: OrthopedicSurgeryActivityAnnotationsFieldInput
    opening: OrthopedicSurgeryActivityAnnotationsFieldInput
    inspection: OrthopedicSurgeryActivityAnnotationsFieldInput
    repositioning: OrthopedicSurgeryActivityAnnotationsFieldInput
    sawingAndDrillning: OrthopedicSurgeryActivityAnnotationsFieldInput
    osteosyntes: OrthopedicSurgeryActivityAnnotationsFieldInput
    closing: OrthopedicSurgeryActivityAnnotationsFieldInput
    plastering: OrthopedicSurgeryActivityAnnotationsFieldInput
    postOp: OrthopedicSurgeryActivityAnnotationsFieldInput
}

input OrthopedicSurgeryActivityAnnotationsFieldInput {
    withAssistance: Boolean!
    withoutAssistance: Boolean!
}

input OrthopedicSurgeryActivityInput  {
    id: String
    surgeryMetadata: OrthopedicSurgeryMetadataInput!
    residentUserId: String
    supervisorUserId: String
    operatorId: String
    assistantId: String
    comments: String!
    complications: String!
    dopsRequested: Boolean!
    reviewRequested: Boolean!
    annotations: OrthopedicSurgeryActivityAnnotationsInput!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}

input OrthopedicSurgeryMetadataInput {
    surgeryIds: [String!]!
    occurredAt: Time!
    caseNotes: String!
    patientAge: Int!
    patientGender: String!
}

input OrthopedicSurgeryActivityReviewInput  {
    reviewId: String
    activityId: String!
    surgeryMetadata: OrthopedicSurgeryMetadataInput!
    operatorId: String!
    assistantId: String!
    comments: String!
    complications: String!
    annotations: OrthopedicSurgeryActivityAnnotationsInput!
    reviewComment: String!
    shouldSign: Boolean!
    inProgress: Boolean!
    activeStep: Int!
    completedStep: Int!
}
`, BuiltIn: false},
	{Name: "internal/graph/common/types/practical-activities.schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type ExaminationAnnotations {
    label: String!
    group: String!
    evaluationGroup: String!
}

enum AnnotationType {
    Checklist
    OtherChecklist
}

enum LogbookEntryType {
    Surgery
    Examination
    Procedure
}

enum AssessmentType {
    SurgeryReview
    ExaminationReview
    ProcedureReview
    Dops
    MiniCex
}

type PracticalActivityType {
    practicalActivityTypeId: Int!
    displayName: String!
    name: LogbookEntryType!
}

type Examination {
    examinationId: String!
    clinicId: String!
    displayName:  String!
    annotations:  [ExaminationAnnotations!]!
}

type Procedure {
    procedureId: String!
    clinicId: String!
    displayName: String!
    annotations: [ProcedureAnnotations!]!
    branches: [ProcedureBranch!]!
}

type ProcedureBranch {
    label: String
    branches: [ProcedureBranch!]!
}

type ProcedureAnnotations {
    methods: [Method!]!
}

type Method {
    displayName: String!
    aids: [Aid!]!
}

type Aid {
    displayName: String!
    routes: [Route!]!
}

type Route {
    displayName: String!
    purposes: [Purpose!]!
}

type Purpose {
    displayName: String!
    findings: [Finding!]!
}

type Finding {
    displayName: String!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/resident-examinations.schema.graphqls", Input: `type ResidentExamination  {
    residentExaminationId: String!
    examinationId: String!
    clinicId: Int!
    displayName:  String!
    annotations:  [ResidentExaminationAnnotations!]!
    createdAt:    Time!
    residentUserId: String!
    resident: User!
    supervisorUserId: String!
    supervisor: User!
}

type ResidentExaminationAnnotations {
    label: String!
    group: String!
    value: Boolean!
    evaluationGroup: String!
    evaluationValue: Boolean!
}

input ResidentExaminationInput {
    supervisorUserId: String
    examinationId: String!
    annotations: [ResidentExaminationAnnotationsInput!]!
}

input ResidentExaminationAnnotationsInput {
    label: String!
    group: String!
    value: Boolean!
    evaluationGroup: String!
    evaluationValue: Boolean!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/supervisor-examination-reviews.schema.graphqls", Input: `type SupervisorExaminationReview  {
    supervisorExaminationReviewId: String!
    residentExaminationId: String!
    residentUserId: String!
    supervisorUserId: String!
    displayName:  String!
    annotations:  [SupervisorExaminationReviewAnnotations!]!
    comment: String
    createdAt:    Time!
    residentUpdatedAt:    Time
    supervisorUpdatedAt:    Time
    isReviewed: Boolean!
    resident: User!
    supervisor: User!
}

type SupervisorExaminationReviewAnnotations {
    label: String!
    group: String!
    value: Boolean!
    evaluationGroup: String!
    evaluationValue: Boolean!
    comment: String
}

input SupervisorExaminationReviewInput {
    supervisorExaminationReviewId: String!
    annotations: [SupervisorExaminationReviewAnnotationsInput!]!
    comment: String
}

input SupervisorExaminationReviewAnnotationsInput {
    label: String!
    group: String!
    value: Boolean!
    evaluationGroup: String!
    evaluationValue: Boolean!
    comment: String
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/surgery.schema.graphqls", Input: `type Surgery {
    id: String!
    diagnose: SurgeryDiagnose!
    method: SurgeryMethod!
}

type SurgeryDiagnose{
    id: String!
    bodypart: String!
    diagnoseName: String!
    diagnoseCode: String!
    extraCode: String!
}

type SurgeryMethod{
    id: String!
    methodName: String!
    methodCode: String!
    approachName: String!
}

input SurgeryOrder {
    order: Order!
    orderBy: SurgeryOrderBy!
}

enum SurgeryOrderBy {
    DiagnoseName,
    MethodName
}

input SurgeryInput {
    diagnose: SurgeryDiagnoseInput!
    method: SurgeryMethodInput!
}

input SurgeryDiagnoseInput {
    id: String!
    bodypart: String!
    diagnoseName: String!
    diagnoseCode: String!
}

input SurgeryMethodInput {
    id: String!
    methodName: String!
    methodCode: String!
    approachName: String!
}`, BuiltIn: false},
	{Name: "internal/graph/common/types/types.schema.graphqls", Input: `type Activity {
    occurredAt: Time!
    logbookEntry: LogbookEntry
    assessment: Assessment
}

input ActivityQueryFilter {
    logbookEntryFilter: LogbookEntryQueryFilter
    assessmentFilter: AssessmentQueryFilter
}

enum ActivityType {
    Surgery
    Examination
    Procedure
    SurgeryReview
    ExaminationReview
    ProcedureReview
    Dops
    MiniCex
}

type LogbookEntry {
    surgery: OrthopedicSurgeryActivity
    examination: Examination
    procedure: Procedure
}

input LogbookEntryQueryFilter {
    residentId: String
    supervisorId: String
    hasReview: Boolean
    isReviewed: Boolean
    hasDops: Boolean
    dopsEvaluated: Boolean
    logbookEntryTypes: [LogbookEntryType!]
    surgeryLogbookEntryFilters: SurgeryLogbookEntryQueryFilter
    inProgress: Boolean
}

type Assessment {
    surgeryReview: OrthopedicSurgeryActivityReview
    dops: DopsEvaluation
    miniCex: MiniCexEvaluation
}

input AssessmentQueryFilter {
    assessmentTypes: [AssessmentType!]
    dopsFilter: DopsQueryFilter
    miniCexFilter: MiniCexQueryFilter
    surgeryReviewFilter: SurgeryReviewQueryFilter
}

type Description {
    title: String!
    subrows: [DescriptionRow!]!
}

type DescriptionRow {
    title: String!
    subtitle: String
    subtitleHighlight: String
}

input QueryOrder {
    order: Order!
    orderBy: OrderBy!
}

input QueryPaging {
    perPage: Int!
    page: Int!
    limit: Int
    Offset: Int
}

enum Order {
    Ascending,
    Descending
}

enum OrderBy {
    OcurredAt
}

`, BuiltIn: false},
	{Name: "internal/graph/common/types/users.schema.graphqls", Input: `type User {
    userId: String!
    displayName: String!
    clinicRoles: [ClinicRole!]
    clinicIds: [String!],
}

type ClinicRole {
    clinic: Clinic!
    role: Role!
}

input UserClinicRoleInput {
    clinicId: String!@binding(constraint: "required,uuid")
    roleIdentifier: String!
    userId: String!@binding(constraint: "required,uuid")
}

enum UserType {
    Resident,
    Supervisor
}

enum Gender {
    Male,
    Female
}

type Role {
    roleIdentifier: String!
    displayName: String!
}
input RoleInput {
    roleIdentifier: String!
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_binding_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["constraint"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraint"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["constraint"] = arg0
	return args, nil
}

func (ec *executionContext) dir_hasAtLeastRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.RoleInput
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg0, err = ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg0
	return args, nil
}

func (ec *executionContext) dir_hasOneOfRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*commonModel.RoleInput
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg0, err = ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ConnectActivityToDopsEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activityId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activityId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["dopsEvaluationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsEvaluationId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dopsEvaluationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteInProgressDopsEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dopsEvaluationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsEvaluationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dopsEvaluationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteInProgressMiniCexEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["miniCexEvaluationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("miniCexEvaluationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["miniCexEvaluationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteInProgressOrthopedicSurgeryActivity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activityId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activityId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_requestMiniCexEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.MiniCexRequestInput
	if tmp, ok := rawArgs["requestInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestInput"))
		arg0, err = ec.unmarshalNMiniCexRequestInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setHasSeenNotifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*commonModel.SeenNotificationInput
	if tmp, ok := rawArgs["seenNotifications"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("seenNotifications"))
		arg0, err = ec.unmarshalNSeenNotificationInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSeenNotificationInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["seenNotifications"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitDopsEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.DopsEvaluationInput
	if tmp, ok := rawArgs["evaluationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationInput"))
		arg0, err = ec.unmarshalNDopsEvaluationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["evaluationInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitMiniCexEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.MiniCexEvaluationInput
	if tmp, ok := rawArgs["evaluationInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationInput"))
		arg0, err = ec.unmarshalNMiniCexEvaluationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["evaluationInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitOrthopedicSurgeryActivityReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.OrthopedicSurgeryActivityReviewInput
	if tmp, ok := rawArgs["reviewInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewInput"))
		arg0, err = ec.unmarshalNOrthopedicSurgeryActivityReviewInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reviewInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitOrthopedicSurgeryActivity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.OrthopedicSurgeryActivityInput
	if tmp, ok := rawArgs["activityInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityInput"))
		arg0, err = ec.unmarshalNOrthopedicSurgeryActivityInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activityInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitResidentExamination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.ResidentExaminationInput
	if tmp, ok := rawArgs["examination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examination"))
		arg0, err = ec.unmarshalNResidentExaminationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["examination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_submitSupervisorExaminationReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.SupervisorExaminationReviewInput
	if tmp, ok := rawArgs["reviewedExamination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewedExamination"))
		arg0, err = ec.unmarshalNSupervisorExaminationReviewInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reviewedExamination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_SurgeriesByDiagnose_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["diagnoseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagnoseId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["diagnoseId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_SurgeriesByMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["methodId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("methodId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["methodId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Surgeries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["clinicId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clinicId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clinicId"] = arg0
	var arg1 *commonModel.SurgeryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOSurgeryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 *commonModel.QueryPaging
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg2, err = ec.unmarshalOQueryPaging2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryPaging(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_SurgeryByDiagnoseAndMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["methodId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("methodId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["methodId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["diagnoseId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagnoseId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg1 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["diagnoseId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_SurgeryById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["surgeryId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["surgeryId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_activities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.ActivityQueryFilter
	if tmp, ok := rawArgs["queryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilter"))
		arg0, err = ec.unmarshalNActivityQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivityQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilter"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 *commonModel.QueryPaging
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg2, err = ec.unmarshalOQueryPaging2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryPaging(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_assessments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.AssessmentQueryFilter
	if tmp, ok := rawArgs["queryFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilters"))
		arg0, err = ec.unmarshalNAssessmentQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilters"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 *commonModel.QueryPaging
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg2, err = ec.unmarshalOQueryPaging2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryPaging(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_clinicDepartment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["departmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["departmentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clinicDepartments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["clinicId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clinicId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clinicId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clinics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["hospitalId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hospitalId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hospitalId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dopsEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["dopsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dopsId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["activityId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activityId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_dopsEvaluations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.DopsQueryFilter
	if tmp, ok := rawArgs["queryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilter"))
		arg0, err = ec.unmarshalNDopsQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilter"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_examination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_hospitals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["organisationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organisationId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organisationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_logbookEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.LogbookEntryQueryFilter
	if tmp, ok := rawArgs["queryFilters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilters"))
		arg0, err = ec.unmarshalNLogbookEntryQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilters"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	var arg2 *commonModel.QueryPaging
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg2, err = ec.unmarshalOQueryPaging2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryPaging(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_miniCexAreas_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["departmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["departmentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_miniCexEvaluation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["miniCexEvaluationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("miniCexEvaluationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["miniCexEvaluationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_miniCexEvaluations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.MiniCexQueryFilter
	if tmp, ok := rawArgs["queryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilter"))
		arg0, err = ec.unmarshalNMiniCexQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilter"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_notifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *commonModel.NotificationType
	if tmp, ok := rawArgs["notificationType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationType"))
		arg0, err = ec.unmarshalONotificationType2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notificationType"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["hasSeen"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasSeen"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hasSeen"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_orthopedicSurgeryActivities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 commonModel.SurgeryLogbookEntryQueryFilter
	if tmp, ok := rawArgs["queryFilter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("queryFilter"))
		arg0, err = ec.unmarshalNSurgeryLogbookEntryQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryLogbookEntryQueryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["queryFilter"] = arg0
	var arg1 *commonModel.QueryOrder
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg1, err = ec.unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_orthopedicSurgeryActivityById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activityId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["activityId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_orthopedicSurgeryActivityReviewById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["reviewId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewId"))
		directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, tmp) }
		directive1 := func(ctx context.Context) (interface{}, error) {
			constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
			if err != nil {
				return nil, err
			}
			if ec.directives.Binding == nil {
				return nil, errors.New("directive binding is not implemented")
			}
			return ec.directives.Binding(ctx, rawArgs, directive0, constraint)
		}

		tmp, err = directive1(ctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if data, ok := tmp.(string); ok {
			arg0 = data
		} else {
			return nil, graphql.ErrorOnPath(ctx, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp))
		}
	}
	args["reviewId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_residentExamination_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["residentExaminationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentExaminationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["residentExaminationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_residentExaminations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["residentUserId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentUserId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["residentUserId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["supervisorUserId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorUserId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervisorUserId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_residents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["clinicId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clinicId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clinicId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_supervisorExaminationReview_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["supervisorExaminationReviewId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorExaminationReviewId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["supervisorExaminationReviewId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_supervisorExaminationReviews_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["reviewed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewed"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reviewed"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_supervisors_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["clinicId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clinicId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clinicId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activity_occurredAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_logbookEntry(ctx context.Context, field graphql.CollectedField, obj *commonModel.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogbookEntry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.LogbookEntry)
	fc.Result = res
	return ec.marshalOLogbookEntry2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_assessment(ctx context.Context, field graphql.CollectedField, obj *commonModel.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.Assessment)
	fc.Result = res
	return ec.marshalOAssessment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessment(ctx, field.Selections, res)
}

func (ec *executionContext) _Aid_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Aid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Aid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Aid_routes(ctx context.Context, field graphql.CollectedField, obj *commonModel.Aid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Aid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Routes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Route)
	fc.Result = res
	return ec.marshalNRoute2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRouteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_surgeryReview(ctx context.Context, field graphql.CollectedField, obj *commonModel.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurgeryReview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityReview)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_dops(ctx context.Context, field graphql.CollectedField, obj *commonModel.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dops, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.DopsEvaluation)
	fc.Result = res
	return ec.marshalODopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx, field.Selections, res)
}

func (ec *executionContext) _Assessment_miniCex(ctx context.Context, field graphql.CollectedField, obj *commonModel.Assessment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Assessment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiniCex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.MiniCexEvaluation)
	fc.Result = res
	return ec.marshalOMiniCexEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx, field.Selections, res)
}

func (ec *executionContext) _Clinic_clinicId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Clinic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Clinic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Clinic_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Clinic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Clinic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Clinic_specialty(ctx context.Context, field graphql.CollectedField, obj *commonModel.Clinic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Clinic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specialty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(commonModel.Specialties)
	fc.Result = res
	return ec.marshalNSpecialties2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSpecialties(ctx, field.Selections, res)
}

func (ec *executionContext) _Clinic_hospitalId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Clinic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Clinic",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HospitalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Clinic_hospital(ctx context.Context, field graphql.CollectedField, obj *commonModel.Clinic) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Clinic",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Clinic().Hospital(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.Hospital)
	fc.Result = res
	return ec.marshalOHospital2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospital(ctx, field.Selections, res)
}

func (ec *executionContext) _ClinicDepartment_departmentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ClinicDepartment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClinicDepartment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClinicDepartment_departmentName(ctx context.Context, field graphql.CollectedField, obj *commonModel.ClinicDepartment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClinicDepartment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClinicDepartment_clinicId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ClinicDepartment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClinicDepartment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClinicRole_clinic(ctx context.Context, field graphql.CollectedField, obj *commonModel.ClinicRole) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClinicRole",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clinic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Clinic)
	fc.Result = res
	return ec.marshalNClinic2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinic(ctx, field.Selections, res)
}

func (ec *executionContext) _ClinicRole_role(ctx context.Context, field graphql.CollectedField, obj *commonModel.ClinicRole) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClinicRole",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Role)
	fc.Result = res
	return ec.marshalNRole2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) _Description_title(ctx context.Context, field graphql.CollectedField, obj *commonModel.Description) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Description",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Description_subrows(ctx context.Context, field graphql.CollectedField, obj *commonModel.Description) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Description",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subrows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.DescriptionRow)
	fc.Result = res
	return ec.marshalNDescriptionRow2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescriptionRowᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DescriptionRow_title(ctx context.Context, field graphql.CollectedField, obj *commonModel.DescriptionRow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DescriptionRow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DescriptionRow_subtitle(ctx context.Context, field graphql.CollectedField, obj *commonModel.DescriptionRow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DescriptionRow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DescriptionRow_subtitleHighlight(ctx context.Context, field graphql.CollectedField, obj *commonModel.DescriptionRow) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DescriptionRow",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubtitleHighlight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_dopsEvaluationId(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DopsEvaluationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DopsEvaluation().Description(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Description)
	fc.Result = res
	return ec.marshalNDescription2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_surgeryActivity(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurgeryActivity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_supervisorId(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DopsEvaluation().Supervisor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_residentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DopsEvaluation().Resident(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_surgeryMetadata(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurgeryMetadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryMetadata)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryMetadata2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_difficulty(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Difficulty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_departmentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_department(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.ClinicDepartment)
	fc.Result = res
	return ec.marshalOClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.EvaluationFormAnnotations)
	fc.Result = res
	return ec.marshalNEvaluationFormAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_isEvaluated(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEvaluated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_inProgress(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_activeStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _DopsEvaluation_completedStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.DopsEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DopsEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationForm_evaluationFormId(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationForm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationFormID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationForm_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationForm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationForm_difficulty(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationForm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Difficulty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationForm_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationForm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.EvaluationFormAnnotation)
	fc.Result = res
	return ec.marshalNEvaluationFormAnnotation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationForm_citations(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationForm",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Citations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotation_subject(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotation_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotation_comment(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotation_options(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotation_type(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(commonModel.EvaluationFormAnnotationType)
	fc.Result = res
	return ec.marshalNEvaluationFormAnnotationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationType(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_subject(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_descriptionComment(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_notObserved(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotObserved, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_options(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_comment(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_value(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _EvaluationFormAnnotations_type(ctx context.Context, field graphql.CollectedField, obj *commonModel.EvaluationFormAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EvaluationFormAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(commonModel.EvaluationFormAnnotationType)
	fc.Result = res
	return ec.marshalNEvaluationFormAnnotationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationType(ctx, field.Selections, res)
}

func (ec *executionContext) _Examination_examinationId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Examination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Examination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExaminationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Examination_clinicId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Examination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Examination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Examination_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Examination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Examination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Examination_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.Examination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Examination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ExaminationAnnotations)
	fc.Result = res
	return ec.marshalNExaminationAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ExaminationAnnotations_label(ctx context.Context, field graphql.CollectedField, obj *commonModel.ExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExaminationAnnotations_group(ctx context.Context, field graphql.CollectedField, obj *commonModel.ExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExaminationAnnotations_evaluationGroup(ctx context.Context, field graphql.CollectedField, obj *commonModel.ExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Finding_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Finding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Finding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Hospital_hospitalId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Hospital) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Hospital",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HospitalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Hospital_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Hospital) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Hospital",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Hospital_clinics(ctx context.Context, field graphql.CollectedField, obj *commonModel.Hospital) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Hospital",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Hospital().Clinics(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Clinic)
	fc.Result = res
	return ec.marshalOClinic2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LogbookEntry_surgery(ctx context.Context, field graphql.CollectedField, obj *commonModel.LogbookEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogbookEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surgery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _LogbookEntry_examination(ctx context.Context, field graphql.CollectedField, obj *commonModel.LogbookEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogbookEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Examination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.Examination)
	fc.Result = res
	return ec.marshalOExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx, field.Selections, res)
}

func (ec *executionContext) _LogbookEntry_procedure(ctx context.Context, field graphql.CollectedField, obj *commonModel.LogbookEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogbookEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Procedure, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.Procedure)
	fc.Result = res
	return ec.marshalOProcedure2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedure(ctx, field.Selections, res)
}

func (ec *executionContext) _Method_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Method) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Method",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Method_aids(ctx context.Context, field graphql.CollectedField, obj *commonModel.Method) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Method",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Aids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Aid)
	fc.Result = res
	return ec.marshalNAid2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAidᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexArea_miniCexAreaId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexArea) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexArea",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiniCexAreaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexArea_departmentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexArea) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexArea",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexArea_name(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexArea) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexArea",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MiniCexEvaluation().Description(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Description)
	fc.Result = res
	return ec.marshalNDescription2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_supervisorId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MiniCexEvaluation().Supervisor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_residentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MiniCexEvaluation().Resident(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_difficulty(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Difficulty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_focuses(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Focuses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_area(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Area, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_departmentId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DepartmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_department(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.ClinicDepartment)
	fc.Result = res
	return ec.marshalOClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.EvaluationFormAnnotations)
	fc.Result = res
	return ec.marshalNEvaluationFormAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_isEvaluated(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEvaluated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_occurredAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_inProgress(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_activeStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexEvaluation_completedStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexEvaluation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexEvaluation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexFocus_miniCexFocusId(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexFocus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexFocus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiniCexFocusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _MiniCexFocus_name(ctx context.Context, field graphql.CollectedField, obj *commonModel.MiniCexFocus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MiniCexFocus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitResidentExamination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitResidentExamination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitResidentExamination(rctx, args["examination"].(commonModel.ResidentExaminationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.ResidentExamination)
	fc.Result = res
	return ec.marshalNResidentExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExamination(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitSupervisorExaminationReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitSupervisorExaminationReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitSupervisorExaminationReview(rctx, args["reviewedExamination"].(commonModel.SupervisorExaminationReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.SupervisorExaminationReview)
	fc.Result = res
	return ec.marshalNSupervisorExaminationReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitOrthopedicSurgeryActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitOrthopedicSurgeryActivity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitOrthopedicSurgeryActivity(rctx, args["activityInput"].(commonModel.OrthopedicSurgeryActivityInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitOrthopedicSurgeryActivityReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitOrthopedicSurgeryActivityReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitOrthopedicSurgeryActivityReview(rctx, args["reviewInput"].(commonModel.OrthopedicSurgeryActivityReviewInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitDopsEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitDopsEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitDopsEvaluation(rctx, args["evaluationInput"].(commonModel.DopsEvaluationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteInProgressOrthopedicSurgeryActivity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteInProgressOrthopedicSurgeryActivity_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteInProgressOrthopedicSurgeryActivity(rctx, args["activityId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteInProgressDopsEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteInProgressDopsEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteInProgressDopsEvaluation(rctx, args["dopsEvaluationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteInProgressMiniCexEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteInProgressMiniCexEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteInProgressMiniCexEvaluation(rctx, args["miniCexEvaluationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ConnectActivityToDopsEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ConnectActivityToDopsEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConnectActivityToDopsEvaluation(rctx, args["activityId"].(string), args["dopsEvaluationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_submitMiniCexEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_submitMiniCexEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SubmitMiniCexEvaluation(rctx, args["evaluationInput"].(commonModel.MiniCexEvaluationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestMiniCexEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestMiniCexEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestMiniCexEvaluation(rctx, args["requestInput"].(commonModel.MiniCexRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setHasSeenNotifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setHasSeenNotifications_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetHasSeenNotifications(rctx, args["seenNotifications"].([]*commonModel.SeenNotificationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Notification_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.Notification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notification_user_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.Notification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Notification_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.Notification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.NotificationAnnotations)
	fc.Result = res
	return ec.marshalNNotificationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationAnnotations(ctx, field.Selections, res)
}

func (ec *executionContext) _Notification_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.Notification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Notification_seenAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.Notification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeenAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationAnnotations_relatedId(ctx context.Context, field graphql.CollectedField, obj *commonModel.NotificationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatedID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationAnnotations_notificationUrl(ctx context.Context, field graphql.CollectedField, obj *commonModel.NotificationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationAnnotations_notificationType(ctx context.Context, field graphql.CollectedField, obj *commonModel.NotificationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(commonModel.NotificationType)
	fc.Result = res
	return ec.marshalNNotificationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrthopedicSurgeryActivity().Description(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Description)
	fc.Result = res
	return ec.marshalNDescription2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_surgeryMetadata(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurgeryMetadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryMetadata)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryMetadata2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_residentUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrthopedicSurgeryActivity().Resident(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_supervisorUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrthopedicSurgeryActivity().Supervisor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_operatorId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_assistantId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssistantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_comments(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_complications(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Complications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotations)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivityAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotations(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_reviewRequested(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewRequested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_review(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Review, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityReview)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_dopsRequested(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DopsRequested, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_dops(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dops, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.DopsEvaluation)
	fc.Result = res
	return ec.marshalODopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_inProgress(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_activeStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivity_completedStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_operationPlanning(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperationPlanning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_patientPositioning(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientPositioning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_incision(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Incision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_opening(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Opening, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_inspection(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inspection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_repositioning(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repositioning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_sawingAndDrillning(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SawingAndDrillning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_osteosyntes(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Osteosyntes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_closing(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Closing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_plastering(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plastering, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations_postOp(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostOp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotationsField)
	fc.Result = res
	return ec.marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotationsField_withAssistance(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotationsField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotationsField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithAssistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotationsField_withoutAssistance(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityAnnotationsField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityAnnotationsField",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WithoutAssistance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_reviewId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_activityId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_description(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Description)
	fc.Result = res
	return ec.marshalNDescription2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_activity(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_updatedAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_signedAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_surgeryMetadata(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SurgeryMetadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryMetadata)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryMetadata2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_operatorId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OperatorID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_assistantId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssistantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_comments(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_complications(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Complications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityAnnotations)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivityAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotations(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_residentUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_supervisorUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resident, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_reviewComment(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReviewComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_inProgress(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_activeStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryActivityReview_completedStep(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryActivityReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryActivityReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletedStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryMetadata_occurredAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryMetadata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryMetadata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurredAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryMetadata_surgeries(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryMetadata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryMetadata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Surgeries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryMetadata_caseNotes(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryMetadata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryMetadata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CaseNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryMetadata_patientAge(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryMetadata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryMetadata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _OrthopedicSurgeryMetadata_patientGender(ctx context.Context, field graphql.CollectedField, obj *commonModel.OrthopedicSurgeryMetadata) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrthopedicSurgeryMetadata",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientGender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PracticalActivityType_practicalActivityTypeId(ctx context.Context, field graphql.CollectedField, obj *commonModel.PracticalActivityType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PracticalActivityType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PracticalActivityTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _PracticalActivityType_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.PracticalActivityType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PracticalActivityType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PracticalActivityType_name(ctx context.Context, field graphql.CollectedField, obj *commonModel.PracticalActivityType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PracticalActivityType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(commonModel.LogbookEntryType)
	fc.Result = res
	return ec.marshalNLogbookEntryType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryType(ctx, field.Selections, res)
}

func (ec *executionContext) _Procedure_procedureId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Procedure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Procedure",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProcedureID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Procedure_clinicId(ctx context.Context, field graphql.CollectedField, obj *commonModel.Procedure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Procedure",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Procedure_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Procedure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Procedure",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Procedure_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.Procedure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Procedure",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ProcedureAnnotations)
	fc.Result = res
	return ec.marshalNProcedureAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Procedure_branches(ctx context.Context, field graphql.CollectedField, obj *commonModel.Procedure) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Procedure",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ProcedureBranch)
	fc.Result = res
	return ec.marshalNProcedureBranch2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureBranchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcedureAnnotations_methods(ctx context.Context, field graphql.CollectedField, obj *commonModel.ProcedureAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProcedureAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Methods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Method)
	fc.Result = res
	return ec.marshalNMethod2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMethodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcedureBranch_label(ctx context.Context, field graphql.CollectedField, obj *commonModel.ProcedureBranch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProcedureBranch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ProcedureBranch_branches(ctx context.Context, field graphql.CollectedField, obj *commonModel.ProcedureBranch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ProcedureBranch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Branches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ProcedureBranch)
	fc.Result = res
	return ec.marshalNProcedureBranch2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureBranchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Purpose_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Purpose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Purpose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Purpose_findings(ctx context.Context, field graphql.CollectedField, obj *commonModel.Purpose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Purpose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Findings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Finding)
	fc.Result = res
	return ec.marshalNFinding2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐFindingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_procedures(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Procedures(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Procedure)
	fc.Result = res
	return ec.marshalNProcedure2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_examinations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Examinations(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Examination); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Examination`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Examination)
	fc.Result = res
	return ec.marshalNExamination2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_residentExaminations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_residentExaminations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ResidentExaminations(rctx, args["residentUserId"].(*string), args["supervisorUserId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.ResidentExamination); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.ResidentExamination`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ResidentExamination)
	fc.Result = res
	return ec.marshalOResidentExamination2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_residentExamination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_residentExamination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ResidentExamination(rctx, args["residentExaminationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.ResidentExamination)
	fc.Result = res
	return ec.marshalNResidentExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExamination(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supervisorExaminationReviews(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_supervisorExaminationReviews_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SupervisorExaminationReviews(rctx, args["reviewed"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.SupervisorExaminationReview)
	fc.Result = res
	return ec.marshalNSupervisorExaminationReview2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supervisorExaminationReview(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_supervisorExaminationReview_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SupervisorExaminationReview(rctx, args["supervisorExaminationReviewId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.SupervisorExaminationReview)
	fc.Result = res
	return ec.marshalNSupervisorExaminationReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_examination(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_examination_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Examination(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Examination)
	fc.Result = res
	return ec.marshalNExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_activities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_activities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Activities(rctx, args["queryFilter"].(commonModel.ActivityQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, []interface{}{map[string]interface{}{"roleIdentifier": "Resident"}, map[string]interface{}{"roleIdentifier": "Supervisor"}, map[string]interface{}{"roleIdentifier": "Director"}})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasOneOfRoles == nil {
				return nil, errors.New("directive hasOneOfRoles is not implemented")
			}
			return ec.directives.HasOneOfRoles(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Activity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Activity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Activity)
	fc.Result = res
	return ec.marshalNActivity2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_logbookEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_logbookEntries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LogbookEntries(rctx, args["queryFilters"].(commonModel.LogbookEntryQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, []interface{}{map[string]interface{}{"roleIdentifier": "Resident"}, map[string]interface{}{"roleIdentifier": "Supervisor"}, map[string]interface{}{"roleIdentifier": "Director"}})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasOneOfRoles == nil {
				return nil, errors.New("directive hasOneOfRoles is not implemented")
			}
			return ec.directives.HasOneOfRoles(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.LogbookEntry); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.LogbookEntry`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.LogbookEntry)
	fc.Result = res
	return ec.marshalNLogbookEntry2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_assessments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_assessments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Assessments(rctx, args["queryFilters"].(commonModel.AssessmentQueryFilter), args["orderBy"].(*commonModel.QueryOrder), args["pagination"].(*commonModel.QueryPaging))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Supervisor"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Assessment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Assessment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Assessment)
	fc.Result = res
	return ec.marshalNAssessment2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_hospitals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_hospitals_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Hospitals(rctx, args["organisationId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Hospital); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Hospital`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Hospital)
	fc.Result = res
	return ec.marshalNHospital2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospitalᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_clinics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_clinics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Clinics(rctx, args["hospitalId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Clinic); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Clinic`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Clinic)
	fc.Result = res
	return ec.marshalNClinic2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_clinicDepartments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_clinicDepartments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ClinicDepartments(rctx, args["clinicId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.ClinicDepartment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.ClinicDepartment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ClinicDepartment)
	fc.Result = res
	return ec.marshalNClinicDepartment2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_clinicDepartment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_clinicDepartment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ClinicDepartment(rctx, args["departmentId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*commonModel.ClinicDepartment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/vbetsun/surgeon-intern-app/internal/graph/model.ClinicDepartment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.ClinicDepartment)
	fc.Result = res
	return ec.marshalNClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supervisors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_supervisors_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Supervisors(rctx, args["clinicId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_residents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_residents_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Residents(rctx, args["clinicId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userRoles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UserRoles(rctx, args["userId"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, []interface{}{map[string]interface{}{"roleIdentifier": "Resident"}, map[string]interface{}{"roleIdentifier": "Supervisor"}, map[string]interface{}{"roleIdentifier": "Director"}})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasOneOfRoles == nil {
				return nil, errors.New("directive hasOneOfRoles is not implemented")
			}
			return ec.directives.HasOneOfRoles(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.Role); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.Role`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Role)
	fc.Result = res
	return ec.marshalORole2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_practicalActivityTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PracticalActivityTypes(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			role, err := ec.unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, map[string]interface{}{"roleIdentifier": "Resident"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasAtLeastRole == nil {
				return nil, errors.New("directive hasAtLeastRole is not implemented")
			}
			return ec.directives.HasAtLeastRole(ctx, nil, directive0, role)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.PracticalActivityType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.PracticalActivityType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.PracticalActivityType)
	fc.Result = res
	return ec.marshalNPracticalActivityType2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPracticalActivityTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orthopedicSurgeryActivityById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orthopedicSurgeryActivityById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrthopedicSurgeryActivityByID(rctx, args["activityId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orthopedicSurgeryActivityReviewById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orthopedicSurgeryActivityReviewById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrthopedicSurgeryActivityReviewByID(rctx, args["reviewId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.OrthopedicSurgeryActivityReview)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivityReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_orthopedicSurgeryActivities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_orthopedicSurgeryActivities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrthopedicSurgeryActivities(rctx, args["queryFilter"].(commonModel.SurgeryLogbookEntryQueryFilter), args["orderBy"].(*commonModel.QueryOrder))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.OrthopedicSurgeryActivity)
	fc.Result = res
	return ec.marshalNOrthopedicSurgeryActivity2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Surgeries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Surgeries_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Surgeries(rctx, args["clinicId"].(*string), args["orderBy"].(*commonModel.SurgeryOrder), args["paging"].(*commonModel.QueryPaging))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_SurgeryById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_SurgeryById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SurgeryByID(rctx, args["surgeryId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_SurgeriesByDiagnose(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_SurgeriesByDiagnose_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SurgeriesByDiagnose(rctx, args["diagnoseId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_SurgeriesByMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_SurgeriesByMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SurgeriesByMethod(rctx, args["methodId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_SurgeryByDiagnoseAndMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_SurgeryByDiagnoseAndMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SurgeryByDiagnoseAndMethod(rctx, args["methodId"].(string), args["diagnoseId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.Surgery)
	fc.Result = res
	return ec.marshalNSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_evaluationForms(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EvaluationForms(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.EvaluationForm)
	fc.Result = res
	return ec.marshalNEvaluationForm2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dopsEvaluations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dopsEvaluations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().DopsEvaluations(rctx, args["queryFilter"].(commonModel.DopsQueryFilter), args["orderBy"].(*commonModel.QueryOrder))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, []interface{}{map[string]interface{}{"roleIdentifier": "Resident"}, map[string]interface{}{"roleIdentifier": "Supervisor"}, map[string]interface{}{"roleIdentifier": "Director"}})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasOneOfRoles == nil {
				return nil, errors.New("directive hasOneOfRoles is not implemented")
			}
			return ec.directives.HasOneOfRoles(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.DopsEvaluation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.DopsEvaluation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.DopsEvaluation)
	fc.Result = res
	return ec.marshalNDopsEvaluation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_dopsEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_dopsEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DopsEvaluation(rctx, args["dopsId"].(*string), args["activityId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.DopsEvaluation)
	fc.Result = res
	return ec.marshalNDopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_miniCexEvaluations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_miniCexEvaluations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MiniCexEvaluations(rctx, args["queryFilter"].(commonModel.MiniCexQueryFilter), args["orderBy"].(*commonModel.QueryOrder))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, []interface{}{map[string]interface{}{"roleIdentifier": "Resident"}, map[string]interface{}{"roleIdentifier": "Supervisor"}, map[string]interface{}{"roleIdentifier": "Director"}})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasOneOfRoles == nil {
				return nil, errors.New("directive hasOneOfRoles is not implemented")
			}
			return ec.directives.HasOneOfRoles(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*commonModel.MiniCexEvaluation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/vbetsun/surgeon-intern-app/internal/graph/model.MiniCexEvaluation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.MiniCexEvaluation)
	fc.Result = res
	return ec.marshalNMiniCexEvaluation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_miniCexEvaluation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_miniCexEvaluation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MiniCexEvaluation(rctx, args["miniCexEvaluationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.MiniCexEvaluation)
	fc.Result = res
	return ec.marshalNMiniCexEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_miniCexFocuses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MiniCexFocuses(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.MiniCexFocus)
	fc.Result = res
	return ec.marshalNMiniCexFocus2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexFocusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_miniCexAreas(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_miniCexAreas_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MiniCexAreas(rctx, args["departmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.MiniCexArea)
	fc.Result = res
	return ec.marshalNMiniCexArea2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexAreaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_notifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_notifications_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Notifications(rctx, args["notificationType"].(*commonModel.NotificationType), args["hasSeen"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Notification)
	fc.Result = res
	return ec.marshalNNotification2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_residentExaminationId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentExaminationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_examinationId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExaminationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_clinicId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ResidentExaminationAnnotations)
	fc.Result = res
	return ec.marshalNResidentExaminationAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_residentUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ResidentExamination().Resident(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_supervisorUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExamination_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExamination) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExamination",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ResidentExamination().Supervisor(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExaminationAnnotations_label(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExaminationAnnotations_group(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExaminationAnnotations_value(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExaminationAnnotations_evaluationGroup(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ResidentExaminationAnnotations_evaluationValue(ctx context.Context, field graphql.CollectedField, obj *commonModel.ResidentExaminationAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResidentExaminationAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_roleIdentifier(ctx context.Context, field graphql.CollectedField, obj *commonModel.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Role_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Role) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Role",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Route_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.Route) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Route",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Route_purposes(ctx context.Context, field graphql.CollectedField, obj *commonModel.Route) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Route",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purposes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.Purpose)
	fc.Result = res
	return ec.marshalNPurpose2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPurposeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_supervisorExaminationReviewId(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorExaminationReviewID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_residentExaminationId(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentExaminationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_residentUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_supervisorUserId(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_annotations(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Annotations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*commonModel.SupervisorExaminationReviewAnnotations)
	fc.Result = res
	return ec.marshalNSupervisorExaminationReviewAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_comment(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_residentUpdatedAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResidentUpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_supervisorUpdatedAt(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupervisorUpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_isReviewed(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReviewed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_resident(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SupervisorExaminationReview().Resident(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReview_supervisor(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReview) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReview",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supervisor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_label(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_group(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_value(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_evaluationGroup(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_evaluationValue(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EvaluationValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations_comment(ctx context.Context, field graphql.CollectedField, obj *commonModel.SupervisorExaminationReviewAnnotations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupervisorExaminationReviewAnnotations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Surgery_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.Surgery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Surgery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Surgery_diagnose(ctx context.Context, field graphql.CollectedField, obj *commonModel.Surgery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Surgery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diagnose, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.SurgeryDiagnose)
	fc.Result = res
	return ec.marshalNSurgeryDiagnose2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryDiagnose(ctx, field.Selections, res)
}

func (ec *executionContext) _Surgery_method(ctx context.Context, field graphql.CollectedField, obj *commonModel.Surgery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Surgery",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*commonModel.SurgeryMethod)
	fc.Result = res
	return ec.marshalNSurgeryMethod2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryMethod(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryDiagnose_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryDiagnose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryDiagnose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryDiagnose_bodypart(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryDiagnose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryDiagnose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bodypart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryDiagnose_diagnoseName(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryDiagnose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryDiagnose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagnoseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryDiagnose_diagnoseCode(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryDiagnose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryDiagnose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagnoseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryDiagnose_extraCode(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryDiagnose) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryDiagnose",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExtraCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryMethod_id(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryMethod_methodName(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryMethod_methodCode(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SurgeryMethod_approachName(ctx context.Context, field graphql.CollectedField, obj *commonModel.SurgeryMethod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SurgeryMethod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApproachName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_userId(ctx context.Context, field graphql.CollectedField, obj *commonModel.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_displayName(ctx context.Context, field graphql.CollectedField, obj *commonModel.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_clinicRoles(ctx context.Context, field graphql.CollectedField, obj *commonModel.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicRoles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*commonModel.ClinicRole)
	fc.Result = res
	return ec.marshalOClinicRole2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_clinicIds(ctx context.Context, field graphql.CollectedField, obj *commonModel.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActivityQueryFilter(ctx context.Context, obj interface{}) (commonModel.ActivityQueryFilter, error) {
	var it commonModel.ActivityQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "logbookEntryFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logbookEntryFilter"))
			it.LogbookEntryFilter, err = ec.unmarshalOLogbookEntryQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "assessmentFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessmentFilter"))
			it.AssessmentFilter, err = ec.unmarshalOAssessmentQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAssessmentQueryFilter(ctx context.Context, obj interface{}) (commonModel.AssessmentQueryFilter, error) {
	var it commonModel.AssessmentQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "assessmentTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assessmentTypes"))
			it.AssessmentTypes, err = ec.unmarshalOAssessmentType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dopsFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsFilter"))
			it.DopsFilter, err = ec.unmarshalODopsQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "miniCexFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("miniCexFilter"))
			it.MiniCexFilter, err = ec.unmarshalOMiniCexQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryReviewFilter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryReviewFilter"))
			it.SurgeryReviewFilter, err = ec.unmarshalOSurgeryReviewQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryReviewQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDopsEvaluationInput(ctx context.Context, obj interface{}) (commonModel.DopsEvaluationInput, error) {
	var it commonModel.DopsEvaluationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "dopsEvaluationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsEvaluationId"))
			it.DopsEvaluationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryMetadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryMetadata"))
			it.SurgeryMetadata, err = ec.unmarshalOOrthopedicSurgeryMetadataInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryActivityId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryActivityId"))
			it.SurgeryActivityID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "difficulty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("difficulty"))
			it.Difficulty, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentId"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNEvaluationFormAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeStep"))
			it.ActiveStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedStep"))
			it.CompletedStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDopsQueryFilter(ctx context.Context, obj interface{}) (commonModel.DopsQueryFilter, error) {
	var it commonModel.DopsQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEvaluated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEvaluated"))
			it.IsEvaluated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isConnected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isConnected"))
			it.IsConnected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeries"))
			it.Surgeries, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEvaluationFormAnnotationsInput(ctx context.Context, obj interface{}) (commonModel.EvaluationFormAnnotationsInput, error) {
	var it commonModel.EvaluationFormAnnotationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
			it.Subject, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "descriptionComment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descriptionComment"))
			it.DescriptionComment, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "notObserved":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notObserved"))
			it.NotObserved, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "options":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
			it.Options, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNEvaluationFormAnnotationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogbookEntryQueryFilter(ctx context.Context, obj interface{}) (commonModel.LogbookEntryQueryFilter, error) {
	var it commonModel.LogbookEntryQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReview":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReview"))
			it.HasReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isReviewed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isReviewed"))
			it.IsReviewed, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasDops":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDops"))
			it.HasDops, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dopsEvaluated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsEvaluated"))
			it.DopsEvaluated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "logbookEntryTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logbookEntryTypes"))
			it.LogbookEntryTypes, err = ec.unmarshalOLogbookEntryType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryLogbookEntryFilters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryLogbookEntryFilters"))
			it.SurgeryLogbookEntryFilters, err = ec.unmarshalOSurgeryLogbookEntryQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryLogbookEntryQueryFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMiniCexEvaluationInput(ctx context.Context, obj interface{}) (commonModel.MiniCexEvaluationInput, error) {
	var it commonModel.MiniCexEvaluationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "difficulty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("difficulty"))
			it.Difficulty, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "area":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("area"))
			it.Area, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "focuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("focuses"))
			it.Focuses, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentId"))
			it.DepartmentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "occurredAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occurredAt"))
			it.OccurredAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNEvaluationFormAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeStep"))
			it.ActiveStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedStep"))
			it.CompletedStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMiniCexQueryFilter(ctx context.Context, obj interface{}) (commonModel.MiniCexQueryFilter, error) {
	var it commonModel.MiniCexQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEvaluated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEvaluated"))
			it.IsEvaluated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMiniCexRequestInput(ctx context.Context, obj interface{}) (commonModel.MiniCexRequestInput, error) {
	var it commonModel.MiniCexRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "difficulty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("difficulty"))
			it.Difficulty, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "departmentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("departmentId"))
			it.DepartmentID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "occurredAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occurredAt"))
			it.OccurredAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNEvaluationFormAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrthopedicSurgeryActivityAnnotationsFieldInput(ctx context.Context, obj interface{}) (commonModel.OrthopedicSurgeryActivityAnnotationsFieldInput, error) {
	var it commonModel.OrthopedicSurgeryActivityAnnotationsFieldInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "withAssistance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withAssistance"))
			it.WithAssistance, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "withoutAssistance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("withoutAssistance"))
			it.WithoutAssistance, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrthopedicSurgeryActivityAnnotationsInput(ctx context.Context, obj interface{}) (commonModel.OrthopedicSurgeryActivityAnnotationsInput, error) {
	var it commonModel.OrthopedicSurgeryActivityAnnotationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "operationPlanning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operationPlanning"))
			it.OperationPlanning, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientPositioning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientPositioning"))
			it.PatientPositioning, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "incision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("incision"))
			it.Incision, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "opening":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opening"))
			it.Opening, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "inspection":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inspection"))
			it.Inspection, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "repositioning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repositioning"))
			it.Repositioning, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sawingAndDrillning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sawingAndDrillning"))
			it.SawingAndDrillning, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "osteosyntes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("osteosyntes"))
			it.Osteosyntes, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "closing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("closing"))
			it.Closing, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "plastering":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plastering"))
			it.Plastering, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "postOp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postOp"))
			it.PostOp, err = ec.unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrthopedicSurgeryActivityInput(ctx context.Context, obj interface{}) (commonModel.OrthopedicSurgeryActivityInput, error) {
	var it commonModel.OrthopedicSurgeryActivityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryMetadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryMetadata"))
			it.SurgeryMetadata, err = ec.unmarshalNOrthopedicSurgeryMetadataInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "residentUserId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentUserId"))
			it.ResidentUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorUserId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorUserId"))
			it.SupervisorUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operatorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operatorId"))
			it.OperatorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "assistantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assistantId"))
			it.AssistantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			it.Comments, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "complications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complications"))
			it.Complications, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dopsRequested":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dopsRequested"))
			it.DopsRequested, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewRequested":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewRequested"))
			it.ReviewRequested, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNOrthopedicSurgeryActivityAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeStep"))
			it.ActiveStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedStep"))
			it.CompletedStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrthopedicSurgeryActivityReviewInput(ctx context.Context, obj interface{}) (commonModel.OrthopedicSurgeryActivityReviewInput, error) {
	var it commonModel.OrthopedicSurgeryActivityReviewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "reviewId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewId"))
			it.ReviewID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "activityId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activityId"))
			it.ActivityID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeryMetadata":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryMetadata"))
			it.SurgeryMetadata, err = ec.unmarshalNOrthopedicSurgeryMetadataInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "operatorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operatorId"))
			it.OperatorID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "assistantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("assistantId"))
			it.AssistantID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			it.Comments, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "complications":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("complications"))
			it.Complications, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNOrthopedicSurgeryActivityAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "reviewComment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewComment"))
			it.ReviewComment, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shouldSign":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shouldSign"))
			it.ShouldSign, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "activeStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeStep"))
			it.ActiveStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "completedStep":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completedStep"))
			it.CompletedStep, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrthopedicSurgeryMetadataInput(ctx context.Context, obj interface{}) (commonModel.OrthopedicSurgeryMetadataInput, error) {
	var it commonModel.OrthopedicSurgeryMetadataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "surgeryIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeryIds"))
			it.SurgeryIds, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "occurredAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("occurredAt"))
			it.OccurredAt, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "caseNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caseNotes"))
			it.CaseNotes, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientAge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientAge"))
			it.PatientAge, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientGender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientGender"))
			it.PatientGender, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryOrder(ctx context.Context, obj interface{}) (commonModel.QueryOrder, error) {
	var it commonModel.QueryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNOrder2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalNOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQueryPaging(ctx context.Context, obj interface{}) (commonModel.QueryPaging, error) {
	var it commonModel.QueryPaging
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "perPage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("perPage"))
			it.PerPage, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			it.Page, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResidentExaminationAnnotationsInput(ctx context.Context, obj interface{}) (commonModel.ResidentExaminationAnnotationsInput, error) {
	var it commonModel.ResidentExaminationAnnotationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "group":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			it.Group, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "evaluationGroup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationGroup"))
			it.EvaluationGroup, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "evaluationValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationValue"))
			it.EvaluationValue, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResidentExaminationInput(ctx context.Context, obj interface{}) (commonModel.ResidentExaminationInput, error) {
	var it commonModel.ResidentExaminationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "supervisorUserId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorUserId"))
			it.SupervisorUserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "examinationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("examinationId"))
			it.ExaminationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNResidentExaminationAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRoleInput(ctx context.Context, obj interface{}) (commonModel.RoleInput, error) {
	var it commonModel.RoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "roleIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIdentifier"))
			it.RoleIdentifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSeenNotificationInput(ctx context.Context, obj interface{}) (commonModel.SeenNotificationInput, error) {
	var it commonModel.SeenNotificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupervisorExaminationReviewAnnotationsInput(ctx context.Context, obj interface{}) (commonModel.SupervisorExaminationReviewAnnotationsInput, error) {
	var it commonModel.SupervisorExaminationReviewAnnotationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "label":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			it.Label, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "group":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			it.Group, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "evaluationGroup":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationGroup"))
			it.EvaluationGroup, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "evaluationValue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("evaluationValue"))
			it.EvaluationValue, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupervisorExaminationReviewInput(ctx context.Context, obj interface{}) (commonModel.SupervisorExaminationReviewInput, error) {
	var it commonModel.SupervisorExaminationReviewInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "supervisorExaminationReviewId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorExaminationReviewId"))
			it.SupervisorExaminationReviewID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "annotations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("annotations"))
			it.Annotations, err = ec.unmarshalNSupervisorExaminationReviewAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comment"))
			it.Comment, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryDiagnoseInput(ctx context.Context, obj interface{}) (commonModel.SurgeryDiagnoseInput, error) {
	var it commonModel.SurgeryDiagnoseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bodypart":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bodypart"))
			it.Bodypart, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "diagnoseName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagnoseName"))
			it.DiagnoseName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "diagnoseCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagnoseCode"))
			it.DiagnoseCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryInput(ctx context.Context, obj interface{}) (commonModel.SurgeryInput, error) {
	var it commonModel.SurgeryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "diagnose":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagnose"))
			it.Diagnose, err = ec.unmarshalNSurgeryDiagnoseInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryDiagnoseInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			it.Method, err = ec.unmarshalNSurgeryMethodInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryMethodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryLogbookEntryQueryFilter(ctx context.Context, obj interface{}) (commonModel.SurgeryLogbookEntryQueryFilter, error) {
	var it commonModel.SurgeryLogbookEntryQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "datetime")
				if err != nil {
					return nil, err
				}
				if ec.directives.Binding == nil {
					return nil, errors.New("directive binding is not implemented")
				}
				return ec.directives.Binding(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.Date = data
			} else if tmp == nil {
				it.Date = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasDops":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasDops"))
			it.HasDops, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasReview":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasReview"))
			it.HasReview, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeries"))
			it.Surgeries, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryMethodInput(ctx context.Context, obj interface{}) (commonModel.SurgeryMethodInput, error) {
	var it commonModel.SurgeryMethodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "methodName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("methodName"))
			it.MethodName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "methodCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("methodCode"))
			it.MethodCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "approachName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("approachName"))
			it.ApproachName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryOrder(ctx context.Context, obj interface{}) (commonModel.SurgeryOrder, error) {
	var it commonModel.SurgeryOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "order":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			it.Order, err = ec.unmarshalNOrder2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrder(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalNSurgeryOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryOrderBy(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSurgeryReviewQueryFilter(ctx context.Context, obj interface{}) (commonModel.SurgeryReviewQueryFilter, error) {
	var it commonModel.SurgeryReviewQueryFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "datetime")
				if err != nil {
					return nil, err
				}
				if ec.directives.Binding == nil {
					return nil, errors.New("directive binding is not implemented")
				}
				return ec.directives.Binding(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(*time.Time); ok {
				it.Date = data
			} else if tmp == nil {
				it.Date = nil
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "inProgress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inProgress"))
			it.InProgress, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isEvaluated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isEvaluated"))
			it.IsEvaluated, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "surgeries":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("surgeries"))
			it.Surgeries, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "residentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("residentId"))
			it.ResidentID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supervisorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorId"))
			it.SupervisorID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserClinicRoleInput(ctx context.Context, obj interface{}) (commonModel.UserClinicRoleInput, error) {
	var it commonModel.UserClinicRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "clinicId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clinicId"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Binding == nil {
					return nil, errors.New("directive binding is not implemented")
				}
				return ec.directives.Binding(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.ClinicID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		case "roleIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleIdentifier"))
			it.RoleIdentifier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			directive0 := func(ctx context.Context) (interface{}, error) { return ec.unmarshalNString2string(ctx, v) }
			directive1 := func(ctx context.Context) (interface{}, error) {
				constraint, err := ec.unmarshalNString2string(ctx, "required,uuid")
				if err != nil {
					return nil, err
				}
				if ec.directives.Binding == nil {
					return nil, errors.New("directive binding is not implemented")
				}
				return ec.directives.Binding(ctx, obj, directive0, constraint)
			}

			tmp, err := directive1(ctx)
			if err != nil {
				return it, graphql.ErrorOnPath(ctx, err)
			}
			if data, ok := tmp.(string); ok {
				it.UserID = data
			} else {
				err := fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
				return it, graphql.ErrorOnPath(ctx, err)
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityImplementors = []string{"Activity"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "occurredAt":
			out.Values[i] = ec._Activity_occurredAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logbookEntry":
			out.Values[i] = ec._Activity_logbookEntry(ctx, field, obj)
		case "assessment":
			out.Values[i] = ec._Activity_assessment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aidImplementors = []string{"Aid"}

func (ec *executionContext) _Aid(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Aid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Aid")
		case "displayName":
			out.Values[i] = ec._Aid_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "routes":
			out.Values[i] = ec._Aid_routes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var assessmentImplementors = []string{"Assessment"}

func (ec *executionContext) _Assessment(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Assessment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, assessmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Assessment")
		case "surgeryReview":
			out.Values[i] = ec._Assessment_surgeryReview(ctx, field, obj)
		case "dops":
			out.Values[i] = ec._Assessment_dops(ctx, field, obj)
		case "miniCex":
			out.Values[i] = ec._Assessment_miniCex(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clinicImplementors = []string{"Clinic"}

func (ec *executionContext) _Clinic(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Clinic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clinicImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Clinic")
		case "clinicId":
			out.Values[i] = ec._Clinic_clinicId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":
			out.Values[i] = ec._Clinic_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "specialty":
			out.Values[i] = ec._Clinic_specialty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hospitalId":
			out.Values[i] = ec._Clinic_hospitalId(ctx, field, obj)
		case "hospital":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Clinic_hospital(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clinicDepartmentImplementors = []string{"ClinicDepartment"}

func (ec *executionContext) _ClinicDepartment(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ClinicDepartment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clinicDepartmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClinicDepartment")
		case "departmentId":
			out.Values[i] = ec._ClinicDepartment_departmentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentName":
			out.Values[i] = ec._ClinicDepartment_departmentName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clinicId":
			out.Values[i] = ec._ClinicDepartment_clinicId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clinicRoleImplementors = []string{"ClinicRole"}

func (ec *executionContext) _ClinicRole(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ClinicRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clinicRoleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClinicRole")
		case "clinic":
			out.Values[i] = ec._ClinicRole_clinic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "role":
			out.Values[i] = ec._ClinicRole_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var descriptionImplementors = []string{"Description"}

func (ec *executionContext) _Description(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Description) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, descriptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Description")
		case "title":
			out.Values[i] = ec._Description_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subrows":
			out.Values[i] = ec._Description_subrows(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var descriptionRowImplementors = []string{"DescriptionRow"}

func (ec *executionContext) _DescriptionRow(ctx context.Context, sel ast.SelectionSet, obj *commonModel.DescriptionRow) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, descriptionRowImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DescriptionRow")
		case "title":
			out.Values[i] = ec._DescriptionRow_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subtitle":
			out.Values[i] = ec._DescriptionRow_subtitle(ctx, field, obj)
		case "subtitleHighlight":
			out.Values[i] = ec._DescriptionRow_subtitleHighlight(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dopsEvaluationImplementors = []string{"DopsEvaluation"}

func (ec *executionContext) _DopsEvaluation(ctx context.Context, sel ast.SelectionSet, obj *commonModel.DopsEvaluation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dopsEvaluationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DopsEvaluation")
		case "dopsEvaluationId":
			out.Values[i] = ec._DopsEvaluation_dopsEvaluationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DopsEvaluation_description(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "surgeryActivity":
			out.Values[i] = ec._DopsEvaluation_surgeryActivity(ctx, field, obj)
		case "supervisorId":
			out.Values[i] = ec._DopsEvaluation_supervisorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supervisor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DopsEvaluation_supervisor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "residentId":
			out.Values[i] = ec._DopsEvaluation_residentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resident":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DopsEvaluation_resident(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "surgeryMetadata":
			out.Values[i] = ec._DopsEvaluation_surgeryMetadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "difficulty":
			out.Values[i] = ec._DopsEvaluation_difficulty(ctx, field, obj)
		case "departmentId":
			out.Values[i] = ec._DopsEvaluation_departmentId(ctx, field, obj)
		case "department":
			out.Values[i] = ec._DopsEvaluation_department(ctx, field, obj)
		case "annotations":
			out.Values[i] = ec._DopsEvaluation_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isEvaluated":
			out.Values[i] = ec._DopsEvaluation_isEvaluated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._DopsEvaluation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "inProgress":
			out.Values[i] = ec._DopsEvaluation_inProgress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "activeStep":
			out.Values[i] = ec._DopsEvaluation_activeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "completedStep":
			out.Values[i] = ec._DopsEvaluation_completedStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var evaluationFormImplementors = []string{"EvaluationForm"}

func (ec *executionContext) _EvaluationForm(ctx context.Context, sel ast.SelectionSet, obj *commonModel.EvaluationForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evaluationFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvaluationForm")
		case "evaluationFormId":
			out.Values[i] = ec._EvaluationForm_evaluationFormId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._EvaluationForm_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "difficulty":
			out.Values[i] = ec._EvaluationForm_difficulty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "annotations":
			out.Values[i] = ec._EvaluationForm_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "citations":
			out.Values[i] = ec._EvaluationForm_citations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var evaluationFormAnnotationImplementors = []string{"EvaluationFormAnnotation"}

func (ec *executionContext) _EvaluationFormAnnotation(ctx context.Context, sel ast.SelectionSet, obj *commonModel.EvaluationFormAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evaluationFormAnnotationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvaluationFormAnnotation")
		case "subject":
			out.Values[i] = ec._EvaluationFormAnnotation_subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._EvaluationFormAnnotation_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._EvaluationFormAnnotation_comment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "options":
			out.Values[i] = ec._EvaluationFormAnnotation_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._EvaluationFormAnnotation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var evaluationFormAnnotationsImplementors = []string{"EvaluationFormAnnotations"}

func (ec *executionContext) _EvaluationFormAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.EvaluationFormAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, evaluationFormAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EvaluationFormAnnotations")
		case "subject":
			out.Values[i] = ec._EvaluationFormAnnotations_subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._EvaluationFormAnnotations_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "descriptionComment":
			out.Values[i] = ec._EvaluationFormAnnotations_descriptionComment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notObserved":
			out.Values[i] = ec._EvaluationFormAnnotations_notObserved(ctx, field, obj)
		case "options":
			out.Values[i] = ec._EvaluationFormAnnotations_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._EvaluationFormAnnotations_comment(ctx, field, obj)
		case "value":
			out.Values[i] = ec._EvaluationFormAnnotations_value(ctx, field, obj)
		case "type":
			out.Values[i] = ec._EvaluationFormAnnotations_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var examinationImplementors = []string{"Examination"}

func (ec *executionContext) _Examination(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Examination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, examinationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Examination")
		case "examinationId":
			out.Values[i] = ec._Examination_examinationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clinicId":
			out.Values[i] = ec._Examination_clinicId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._Examination_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "annotations":
			out.Values[i] = ec._Examination_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var examinationAnnotationsImplementors = []string{"ExaminationAnnotations"}

func (ec *executionContext) _ExaminationAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ExaminationAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, examinationAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExaminationAnnotations")
		case "label":
			out.Values[i] = ec._ExaminationAnnotations_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._ExaminationAnnotations_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "evaluationGroup":
			out.Values[i] = ec._ExaminationAnnotations_evaluationGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var findingImplementors = []string{"Finding"}

func (ec *executionContext) _Finding(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Finding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, findingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Finding")
		case "displayName":
			out.Values[i] = ec._Finding_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hospitalImplementors = []string{"Hospital"}

func (ec *executionContext) _Hospital(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Hospital) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hospitalImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Hospital")
		case "hospitalId":
			out.Values[i] = ec._Hospital_hospitalId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":
			out.Values[i] = ec._Hospital_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "clinics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Hospital_clinics(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logbookEntryImplementors = []string{"LogbookEntry"}

func (ec *executionContext) _LogbookEntry(ctx context.Context, sel ast.SelectionSet, obj *commonModel.LogbookEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logbookEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogbookEntry")
		case "surgery":
			out.Values[i] = ec._LogbookEntry_surgery(ctx, field, obj)
		case "examination":
			out.Values[i] = ec._LogbookEntry_examination(ctx, field, obj)
		case "procedure":
			out.Values[i] = ec._LogbookEntry_procedure(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var methodImplementors = []string{"Method"}

func (ec *executionContext) _Method(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Method) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, methodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Method")
		case "displayName":
			out.Values[i] = ec._Method_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "aids":
			out.Values[i] = ec._Method_aids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var miniCexAreaImplementors = []string{"MiniCexArea"}

func (ec *executionContext) _MiniCexArea(ctx context.Context, sel ast.SelectionSet, obj *commonModel.MiniCexArea) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, miniCexAreaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MiniCexArea")
		case "miniCexAreaId":
			out.Values[i] = ec._MiniCexArea_miniCexAreaId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "departmentId":
			out.Values[i] = ec._MiniCexArea_departmentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._MiniCexArea_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var miniCexEvaluationImplementors = []string{"MiniCexEvaluation"}

func (ec *executionContext) _MiniCexEvaluation(ctx context.Context, sel ast.SelectionSet, obj *commonModel.MiniCexEvaluation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, miniCexEvaluationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MiniCexEvaluation")
		case "id":
			out.Values[i] = ec._MiniCexEvaluation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MiniCexEvaluation_description(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisorId":
			out.Values[i] = ec._MiniCexEvaluation_supervisorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supervisor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MiniCexEvaluation_supervisor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "residentId":
			out.Values[i] = ec._MiniCexEvaluation_residentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resident":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MiniCexEvaluation_resident(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "difficulty":
			out.Values[i] = ec._MiniCexEvaluation_difficulty(ctx, field, obj)
		case "focuses":
			out.Values[i] = ec._MiniCexEvaluation_focuses(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "area":
			out.Values[i] = ec._MiniCexEvaluation_area(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "departmentId":
			out.Values[i] = ec._MiniCexEvaluation_departmentId(ctx, field, obj)
		case "department":
			out.Values[i] = ec._MiniCexEvaluation_department(ctx, field, obj)
		case "annotations":
			out.Values[i] = ec._MiniCexEvaluation_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isEvaluated":
			out.Values[i] = ec._MiniCexEvaluation_isEvaluated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "occurredAt":
			out.Values[i] = ec._MiniCexEvaluation_occurredAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._MiniCexEvaluation_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "inProgress":
			out.Values[i] = ec._MiniCexEvaluation_inProgress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "activeStep":
			out.Values[i] = ec._MiniCexEvaluation_activeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "completedStep":
			out.Values[i] = ec._MiniCexEvaluation_completedStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var miniCexFocusImplementors = []string{"MiniCexFocus"}

func (ec *executionContext) _MiniCexFocus(ctx context.Context, sel ast.SelectionSet, obj *commonModel.MiniCexFocus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, miniCexFocusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MiniCexFocus")
		case "miniCexFocusId":
			out.Values[i] = ec._MiniCexFocus_miniCexFocusId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._MiniCexFocus_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "submitResidentExamination":
			out.Values[i] = ec._Mutation_submitResidentExamination(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitSupervisorExaminationReview":
			out.Values[i] = ec._Mutation_submitSupervisorExaminationReview(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitOrthopedicSurgeryActivity":
			out.Values[i] = ec._Mutation_submitOrthopedicSurgeryActivity(ctx, field)
		case "submitOrthopedicSurgeryActivityReview":
			out.Values[i] = ec._Mutation_submitOrthopedicSurgeryActivityReview(ctx, field)
		case "submitDopsEvaluation":
			out.Values[i] = ec._Mutation_submitDopsEvaluation(ctx, field)
		case "deleteInProgressOrthopedicSurgeryActivity":
			out.Values[i] = ec._Mutation_deleteInProgressOrthopedicSurgeryActivity(ctx, field)
		case "deleteInProgressDopsEvaluation":
			out.Values[i] = ec._Mutation_deleteInProgressDopsEvaluation(ctx, field)
		case "deleteInProgressMiniCexEvaluation":
			out.Values[i] = ec._Mutation_deleteInProgressMiniCexEvaluation(ctx, field)
		case "ConnectActivityToDopsEvaluation":
			out.Values[i] = ec._Mutation_ConnectActivityToDopsEvaluation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "submitMiniCexEvaluation":
			out.Values[i] = ec._Mutation_submitMiniCexEvaluation(ctx, field)
		case "requestMiniCexEvaluation":
			out.Values[i] = ec._Mutation_requestMiniCexEvaluation(ctx, field)
		case "setHasSeenNotifications":
			out.Values[i] = ec._Mutation_setHasSeenNotifications(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "id":
			out.Values[i] = ec._Notification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user_id":
			out.Values[i] = ec._Notification_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "annotations":
			out.Values[i] = ec._Notification_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Notification_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "seenAt":
			out.Values[i] = ec._Notification_seenAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationAnnotationsImplementors = []string{"NotificationAnnotations"}

func (ec *executionContext) _NotificationAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.NotificationAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationAnnotations")
		case "relatedId":
			out.Values[i] = ec._NotificationAnnotations_relatedId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationUrl":
			out.Values[i] = ec._NotificationAnnotations_notificationUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationType":
			out.Values[i] = ec._NotificationAnnotations_notificationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orthopedicSurgeryActivityImplementors = []string{"OrthopedicSurgeryActivity"}

func (ec *executionContext) _OrthopedicSurgeryActivity(ctx context.Context, sel ast.SelectionSet, obj *commonModel.OrthopedicSurgeryActivity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orthopedicSurgeryActivityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrthopedicSurgeryActivity")
		case "id":
			out.Values[i] = ec._OrthopedicSurgeryActivity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrthopedicSurgeryActivity_description(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "createdAt":
			out.Values[i] = ec._OrthopedicSurgeryActivity_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "surgeryMetadata":
			out.Values[i] = ec._OrthopedicSurgeryActivity_surgeryMetadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "residentUserId":
			out.Values[i] = ec._OrthopedicSurgeryActivity_residentUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resident":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrthopedicSurgeryActivity_resident(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisorUserId":
			out.Values[i] = ec._OrthopedicSurgeryActivity_supervisorUserId(ctx, field, obj)
		case "supervisor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrthopedicSurgeryActivity_supervisor(ctx, field, obj)
				return res
			})
		case "operatorId":
			out.Values[i] = ec._OrthopedicSurgeryActivity_operatorId(ctx, field, obj)
		case "assistantId":
			out.Values[i] = ec._OrthopedicSurgeryActivity_assistantId(ctx, field, obj)
		case "comments":
			out.Values[i] = ec._OrthopedicSurgeryActivity_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "complications":
			out.Values[i] = ec._OrthopedicSurgeryActivity_complications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "annotations":
			out.Values[i] = ec._OrthopedicSurgeryActivity_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "reviewRequested":
			out.Values[i] = ec._OrthopedicSurgeryActivity_reviewRequested(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "review":
			out.Values[i] = ec._OrthopedicSurgeryActivity_review(ctx, field, obj)
		case "dopsRequested":
			out.Values[i] = ec._OrthopedicSurgeryActivity_dopsRequested(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "dops":
			out.Values[i] = ec._OrthopedicSurgeryActivity_dops(ctx, field, obj)
		case "inProgress":
			out.Values[i] = ec._OrthopedicSurgeryActivity_inProgress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "activeStep":
			out.Values[i] = ec._OrthopedicSurgeryActivity_activeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "completedStep":
			out.Values[i] = ec._OrthopedicSurgeryActivity_completedStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orthopedicSurgeryActivityAnnotationsImplementors = []string{"OrthopedicSurgeryActivityAnnotations"}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.OrthopedicSurgeryActivityAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orthopedicSurgeryActivityAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrthopedicSurgeryActivityAnnotations")
		case "operationPlanning":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_operationPlanning(ctx, field, obj)
		case "patientPositioning":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_patientPositioning(ctx, field, obj)
		case "incision":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_incision(ctx, field, obj)
		case "opening":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_opening(ctx, field, obj)
		case "inspection":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_inspection(ctx, field, obj)
		case "repositioning":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_repositioning(ctx, field, obj)
		case "sawingAndDrillning":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_sawingAndDrillning(ctx, field, obj)
		case "osteosyntes":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_osteosyntes(ctx, field, obj)
		case "closing":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_closing(ctx, field, obj)
		case "plastering":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_plastering(ctx, field, obj)
		case "postOp":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotations_postOp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orthopedicSurgeryActivityAnnotationsFieldImplementors = []string{"OrthopedicSurgeryActivityAnnotationsField"}

func (ec *executionContext) _OrthopedicSurgeryActivityAnnotationsField(ctx context.Context, sel ast.SelectionSet, obj *commonModel.OrthopedicSurgeryActivityAnnotationsField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orthopedicSurgeryActivityAnnotationsFieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrthopedicSurgeryActivityAnnotationsField")
		case "withAssistance":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotationsField_withAssistance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "withoutAssistance":
			out.Values[i] = ec._OrthopedicSurgeryActivityAnnotationsField_withoutAssistance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orthopedicSurgeryActivityReviewImplementors = []string{"OrthopedicSurgeryActivityReview"}

func (ec *executionContext) _OrthopedicSurgeryActivityReview(ctx context.Context, sel ast.SelectionSet, obj *commonModel.OrthopedicSurgeryActivityReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orthopedicSurgeryActivityReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrthopedicSurgeryActivityReview")
		case "reviewId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_reviewId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activityId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_activityId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activity":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_activity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signedAt":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_signedAt(ctx, field, obj)
		case "surgeryMetadata":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_surgeryMetadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "operatorId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_operatorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "assistantId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_assistantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "complications":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_complications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "annotations":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "residentUserId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_residentUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervisorUserId":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_supervisorUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supervisor":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_supervisor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resident":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_resident(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reviewComment":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_reviewComment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inProgress":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_inProgress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activeStep":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_activeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "completedStep":
			out.Values[i] = ec._OrthopedicSurgeryActivityReview_completedStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orthopedicSurgeryMetadataImplementors = []string{"OrthopedicSurgeryMetadata"}

func (ec *executionContext) _OrthopedicSurgeryMetadata(ctx context.Context, sel ast.SelectionSet, obj *commonModel.OrthopedicSurgeryMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orthopedicSurgeryMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrthopedicSurgeryMetadata")
		case "occurredAt":
			out.Values[i] = ec._OrthopedicSurgeryMetadata_occurredAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "surgeries":
			out.Values[i] = ec._OrthopedicSurgeryMetadata_surgeries(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "caseNotes":
			out.Values[i] = ec._OrthopedicSurgeryMetadata_caseNotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientAge":
			out.Values[i] = ec._OrthopedicSurgeryMetadata_patientAge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientGender":
			out.Values[i] = ec._OrthopedicSurgeryMetadata_patientGender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var practicalActivityTypeImplementors = []string{"PracticalActivityType"}

func (ec *executionContext) _PracticalActivityType(ctx context.Context, sel ast.SelectionSet, obj *commonModel.PracticalActivityType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, practicalActivityTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PracticalActivityType")
		case "practicalActivityTypeId":
			out.Values[i] = ec._PracticalActivityType_practicalActivityTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._PracticalActivityType_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._PracticalActivityType_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var procedureImplementors = []string{"Procedure"}

func (ec *executionContext) _Procedure(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Procedure) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Procedure")
		case "procedureId":
			out.Values[i] = ec._Procedure_procedureId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clinicId":
			out.Values[i] = ec._Procedure_clinicId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._Procedure_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "annotations":
			out.Values[i] = ec._Procedure_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "branches":
			out.Values[i] = ec._Procedure_branches(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var procedureAnnotationsImplementors = []string{"ProcedureAnnotations"}

func (ec *executionContext) _ProcedureAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ProcedureAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureAnnotations")
		case "methods":
			out.Values[i] = ec._ProcedureAnnotations_methods(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var procedureBranchImplementors = []string{"ProcedureBranch"}

func (ec *executionContext) _ProcedureBranch(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ProcedureBranch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, procedureBranchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProcedureBranch")
		case "label":
			out.Values[i] = ec._ProcedureBranch_label(ctx, field, obj)
		case "branches":
			out.Values[i] = ec._ProcedureBranch_branches(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var purposeImplementors = []string{"Purpose"}

func (ec *executionContext) _Purpose(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Purpose) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, purposeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Purpose")
		case "displayName":
			out.Values[i] = ec._Purpose_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "findings":
			out.Values[i] = ec._Purpose_findings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "procedures":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_procedures(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "examinations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_examinations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "residentExaminations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_residentExaminations(ctx, field)
				return res
			})
		case "residentExamination":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_residentExamination(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisorExaminationReviews":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supervisorExaminationReviews(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisorExaminationReview":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supervisorExaminationReview(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "examination":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_examination(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "activities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "logbookEntries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_logbookEntries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "assessments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_assessments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "hospitals":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_hospitals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "clinics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clinics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "clinicDepartments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clinicDepartments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "clinicDepartment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clinicDepartment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisors":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supervisors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "residents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_residents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userRoles":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userRoles(ctx, field)
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "practicalActivityTypes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_practicalActivityTypes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orthopedicSurgeryActivityById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orthopedicSurgeryActivityById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orthopedicSurgeryActivityReviewById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orthopedicSurgeryActivityReviewById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "orthopedicSurgeryActivities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_orthopedicSurgeryActivities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Surgeries":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Surgeries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "SurgeryById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SurgeryById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "SurgeriesByDiagnose":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SurgeriesByDiagnose(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "SurgeriesByMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SurgeriesByMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "SurgeryByDiagnoseAndMethod":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_SurgeryByDiagnoseAndMethod(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "evaluationForms":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_evaluationForms(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dopsEvaluations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dopsEvaluations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "dopsEvaluation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dopsEvaluation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "miniCexEvaluations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_miniCexEvaluations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "miniCexEvaluation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_miniCexEvaluation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "miniCexFocuses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_miniCexFocuses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "miniCexAreas":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_miniCexAreas(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "notifications":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var residentExaminationImplementors = []string{"ResidentExamination"}

func (ec *executionContext) _ResidentExamination(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ResidentExamination) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, residentExaminationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResidentExamination")
		case "residentExaminationId":
			out.Values[i] = ec._ResidentExamination_residentExaminationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "examinationId":
			out.Values[i] = ec._ResidentExamination_examinationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "clinicId":
			out.Values[i] = ec._ResidentExamination_clinicId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":
			out.Values[i] = ec._ResidentExamination_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "annotations":
			out.Values[i] = ec._ResidentExamination_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._ResidentExamination_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "residentUserId":
			out.Values[i] = ec._ResidentExamination_residentUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resident":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ResidentExamination_resident(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisorUserId":
			out.Values[i] = ec._ResidentExamination_supervisorUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supervisor":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ResidentExamination_supervisor(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var residentExaminationAnnotationsImplementors = []string{"ResidentExaminationAnnotations"}

func (ec *executionContext) _ResidentExaminationAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.ResidentExaminationAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, residentExaminationAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResidentExaminationAnnotations")
		case "label":
			out.Values[i] = ec._ResidentExaminationAnnotations_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._ResidentExaminationAnnotations_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._ResidentExaminationAnnotations_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "evaluationGroup":
			out.Values[i] = ec._ResidentExaminationAnnotations_evaluationGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "evaluationValue":
			out.Values[i] = ec._ResidentExaminationAnnotations_evaluationValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var roleImplementors = []string{"Role"}

func (ec *executionContext) _Role(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Role) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, roleImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Role")
		case "roleIdentifier":
			out.Values[i] = ec._Role_roleIdentifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._Role_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var routeImplementors = []string{"Route"}

func (ec *executionContext) _Route(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Route) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, routeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Route")
		case "displayName":
			out.Values[i] = ec._Route_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purposes":
			out.Values[i] = ec._Route_purposes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supervisorExaminationReviewImplementors = []string{"SupervisorExaminationReview"}

func (ec *executionContext) _SupervisorExaminationReview(ctx context.Context, sel ast.SelectionSet, obj *commonModel.SupervisorExaminationReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supervisorExaminationReviewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupervisorExaminationReview")
		case "supervisorExaminationReviewId":
			out.Values[i] = ec._SupervisorExaminationReview_supervisorExaminationReviewId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "residentExaminationId":
			out.Values[i] = ec._SupervisorExaminationReview_residentExaminationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "residentUserId":
			out.Values[i] = ec._SupervisorExaminationReview_residentUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "supervisorUserId":
			out.Values[i] = ec._SupervisorExaminationReview_supervisorUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":
			out.Values[i] = ec._SupervisorExaminationReview_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "annotations":
			out.Values[i] = ec._SupervisorExaminationReview_annotations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "comment":
			out.Values[i] = ec._SupervisorExaminationReview_comment(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SupervisorExaminationReview_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "residentUpdatedAt":
			out.Values[i] = ec._SupervisorExaminationReview_residentUpdatedAt(ctx, field, obj)
		case "supervisorUpdatedAt":
			out.Values[i] = ec._SupervisorExaminationReview_supervisorUpdatedAt(ctx, field, obj)
		case "isReviewed":
			out.Values[i] = ec._SupervisorExaminationReview_isReviewed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "resident":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorExaminationReview_resident(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supervisor":
			out.Values[i] = ec._SupervisorExaminationReview_supervisor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supervisorExaminationReviewAnnotationsImplementors = []string{"SupervisorExaminationReviewAnnotations"}

func (ec *executionContext) _SupervisorExaminationReviewAnnotations(ctx context.Context, sel ast.SelectionSet, obj *commonModel.SupervisorExaminationReviewAnnotations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supervisorExaminationReviewAnnotationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupervisorExaminationReviewAnnotations")
		case "label":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "evaluationGroup":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_evaluationGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "evaluationValue":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_evaluationValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._SupervisorExaminationReviewAnnotations_comment(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surgeryImplementors = []string{"Surgery"}

func (ec *executionContext) _Surgery(ctx context.Context, sel ast.SelectionSet, obj *commonModel.Surgery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surgeryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Surgery")
		case "id":
			out.Values[i] = ec._Surgery_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diagnose":
			out.Values[i] = ec._Surgery_diagnose(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Surgery_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surgeryDiagnoseImplementors = []string{"SurgeryDiagnose"}

func (ec *executionContext) _SurgeryDiagnose(ctx context.Context, sel ast.SelectionSet, obj *commonModel.SurgeryDiagnose) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surgeryDiagnoseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurgeryDiagnose")
		case "id":
			out.Values[i] = ec._SurgeryDiagnose_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bodypart":
			out.Values[i] = ec._SurgeryDiagnose_bodypart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diagnoseName":
			out.Values[i] = ec._SurgeryDiagnose_diagnoseName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diagnoseCode":
			out.Values[i] = ec._SurgeryDiagnose_diagnoseCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "extraCode":
			out.Values[i] = ec._SurgeryDiagnose_extraCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var surgeryMethodImplementors = []string{"SurgeryMethod"}

func (ec *executionContext) _SurgeryMethod(ctx context.Context, sel ast.SelectionSet, obj *commonModel.SurgeryMethod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, surgeryMethodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SurgeryMethod")
		case "id":
			out.Values[i] = ec._SurgeryMethod_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodName":
			out.Values[i] = ec._SurgeryMethod_methodName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "methodCode":
			out.Values[i] = ec._SurgeryMethod_methodCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "approachName":
			out.Values[i] = ec._SurgeryMethod_approachName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *commonModel.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "userId":
			out.Values[i] = ec._User_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._User_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clinicRoles":
			out.Values[i] = ec._User_clinicRoles(ctx, field, obj)
		case "clinicIds":
			out.Values[i] = ec._User_clinicIds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActivity2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Activity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v *commonModel.Activity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActivityQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐActivityQueryFilter(ctx context.Context, v interface{}) (commonModel.ActivityQueryFilter, error) {
	res, err := ec.unmarshalInputActivityQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAid2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAidᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Aid) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAid2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAid2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAid(ctx context.Context, sel ast.SelectionSet, v *commonModel.Aid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Aid(ctx, sel, v)
}

func (ec *executionContext) marshalNAssessment2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Assessment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAssessment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAssessment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessment(ctx context.Context, sel ast.SelectionSet, v *commonModel.Assessment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Assessment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAssessmentQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentQueryFilter(ctx context.Context, v interface{}) (commonModel.AssessmentQueryFilter, error) {
	res, err := ec.unmarshalInputAssessmentQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAssessmentType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentType(ctx context.Context, v interface{}) (commonModel.AssessmentType, error) {
	var res commonModel.AssessmentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAssessmentType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentType(ctx context.Context, sel ast.SelectionSet, v commonModel.AssessmentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNClinic2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Clinic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClinic2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClinic2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinic(ctx context.Context, sel ast.SelectionSet, v *commonModel.Clinic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Clinic(ctx, sel, v)
}

func (ec *executionContext) marshalNClinicDepartment2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx context.Context, sel ast.SelectionSet, v commonModel.ClinicDepartment) graphql.Marshaler {
	return ec._ClinicDepartment(ctx, sel, &v)
}

func (ec *executionContext) marshalNClinicDepartment2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ClinicDepartment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx context.Context, sel ast.SelectionSet, v *commonModel.ClinicDepartment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClinicDepartment(ctx, sel, v)
}

func (ec *executionContext) marshalNClinicRole2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicRole(ctx context.Context, sel ast.SelectionSet, v *commonModel.ClinicRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClinicRole(ctx, sel, v)
}

func (ec *executionContext) marshalNDescription2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx context.Context, sel ast.SelectionSet, v commonModel.Description) graphql.Marshaler {
	return ec._Description(ctx, sel, &v)
}

func (ec *executionContext) marshalNDescription2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescription(ctx context.Context, sel ast.SelectionSet, v *commonModel.Description) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Description(ctx, sel, v)
}

func (ec *executionContext) marshalNDescriptionRow2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescriptionRowᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.DescriptionRow) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDescriptionRow2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescriptionRow(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDescriptionRow2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDescriptionRow(ctx context.Context, sel ast.SelectionSet, v *commonModel.DescriptionRow) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DescriptionRow(ctx, sel, v)
}

func (ec *executionContext) marshalNDopsEvaluation2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx context.Context, sel ast.SelectionSet, v commonModel.DopsEvaluation) graphql.Marshaler {
	return ec._DopsEvaluation(ctx, sel, &v)
}

func (ec *executionContext) marshalNDopsEvaluation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.DopsEvaluation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx context.Context, sel ast.SelectionSet, v *commonModel.DopsEvaluation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DopsEvaluation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDopsEvaluationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluationInput(ctx context.Context, v interface{}) (commonModel.DopsEvaluationInput, error) {
	res, err := ec.unmarshalInputDopsEvaluationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDopsQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsQueryFilter(ctx context.Context, v interface{}) (commonModel.DopsQueryFilter, error) {
	res, err := ec.unmarshalInputDopsQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvaluationForm2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.EvaluationForm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationForm2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEvaluationForm2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationForm(ctx context.Context, sel ast.SelectionSet, v *commonModel.EvaluationForm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EvaluationForm(ctx, sel, v)
}

func (ec *executionContext) marshalNEvaluationFormAnnotation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.EvaluationFormAnnotation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationFormAnnotation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEvaluationFormAnnotation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotation(ctx context.Context, sel ast.SelectionSet, v *commonModel.EvaluationFormAnnotation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EvaluationFormAnnotation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEvaluationFormAnnotationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationType(ctx context.Context, v interface{}) (commonModel.EvaluationFormAnnotationType, error) {
	var res commonModel.EvaluationFormAnnotationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEvaluationFormAnnotationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationType(ctx context.Context, sel ast.SelectionSet, v commonModel.EvaluationFormAnnotationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEvaluationFormAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.EvaluationFormAnnotations) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEvaluationFormAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEvaluationFormAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.EvaluationFormAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EvaluationFormAnnotations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEvaluationFormAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInputᚄ(ctx context.Context, v interface{}) ([]*commonModel.EvaluationFormAnnotationsInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*commonModel.EvaluationFormAnnotationsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEvaluationFormAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNEvaluationFormAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐEvaluationFormAnnotationsInput(ctx context.Context, v interface{}) (*commonModel.EvaluationFormAnnotationsInput, error) {
	res, err := ec.unmarshalInputEvaluationFormAnnotationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNExamination2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx context.Context, sel ast.SelectionSet, v commonModel.Examination) graphql.Marshaler {
	return ec._Examination(ctx, sel, &v)
}

func (ec *executionContext) marshalNExamination2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Examination) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx context.Context, sel ast.SelectionSet, v *commonModel.Examination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Examination(ctx, sel, v)
}

func (ec *executionContext) marshalNExaminationAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationAnnotationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ExaminationAnnotations) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExaminationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationAnnotations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExaminationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExaminationAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.ExaminationAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExaminationAnnotations(ctx, sel, v)
}

func (ec *executionContext) marshalNFinding2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐFindingᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Finding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFinding2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐFinding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFinding2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐFinding(ctx context.Context, sel ast.SelectionSet, v *commonModel.Finding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Finding(ctx, sel, v)
}

func (ec *executionContext) marshalNHospital2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospitalᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Hospital) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNHospital2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospital(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNHospital2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospital(ctx context.Context, sel ast.SelectionSet, v *commonModel.Hospital) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Hospital(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLogbookEntry2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.LogbookEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogbookEntry2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLogbookEntry2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntry(ctx context.Context, sel ast.SelectionSet, v *commonModel.LogbookEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LogbookEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogbookEntryQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryQueryFilter(ctx context.Context, v interface{}) (commonModel.LogbookEntryQueryFilter, error) {
	res, err := ec.unmarshalInputLogbookEntryQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLogbookEntryType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryType(ctx context.Context, v interface{}) (commonModel.LogbookEntryType, error) {
	var res commonModel.LogbookEntryType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLogbookEntryType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryType(ctx context.Context, sel ast.SelectionSet, v commonModel.LogbookEntryType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMethod2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMethodᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Method) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMethod2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMethod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMethod2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMethod(ctx context.Context, sel ast.SelectionSet, v *commonModel.Method) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Method(ctx, sel, v)
}

func (ec *executionContext) marshalNMiniCexArea2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexAreaᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.MiniCexArea) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMiniCexArea2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexArea(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMiniCexArea2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexArea(ctx context.Context, sel ast.SelectionSet, v *commonModel.MiniCexArea) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MiniCexArea(ctx, sel, v)
}

func (ec *executionContext) marshalNMiniCexEvaluation2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx context.Context, sel ast.SelectionSet, v commonModel.MiniCexEvaluation) graphql.Marshaler {
	return ec._MiniCexEvaluation(ctx, sel, &v)
}

func (ec *executionContext) marshalNMiniCexEvaluation2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.MiniCexEvaluation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMiniCexEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMiniCexEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx context.Context, sel ast.SelectionSet, v *commonModel.MiniCexEvaluation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MiniCexEvaluation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMiniCexEvaluationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluationInput(ctx context.Context, v interface{}) (commonModel.MiniCexEvaluationInput, error) {
	res, err := ec.unmarshalInputMiniCexEvaluationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMiniCexFocus2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexFocusᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.MiniCexFocus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMiniCexFocus2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexFocus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMiniCexFocus2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexFocus(ctx context.Context, sel ast.SelectionSet, v *commonModel.MiniCexFocus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._MiniCexFocus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMiniCexQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexQueryFilter(ctx context.Context, v interface{}) (commonModel.MiniCexQueryFilter, error) {
	res, err := ec.unmarshalInputMiniCexQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMiniCexRequestInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexRequestInput(ctx context.Context, v interface{}) (commonModel.MiniCexRequestInput, error) {
	res, err := ec.unmarshalInputMiniCexRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotification2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotification2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNotification2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v *commonModel.Notification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) marshalNNotificationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.NotificationAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NotificationAnnotations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNotificationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx context.Context, v interface{}) (commonModel.NotificationType, error) {
	var res commonModel.NotificationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v commonModel.NotificationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOrder2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrder(ctx context.Context, v interface{}) (commonModel.Order, error) {
	var res commonModel.Order
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrder2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrder(ctx context.Context, sel ast.SelectionSet, v commonModel.Order) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrderBy(ctx context.Context, v interface{}) (commonModel.OrderBy, error) {
	var res commonModel.OrderBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrderBy(ctx context.Context, sel ast.SelectionSet, v commonModel.OrderBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivity2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx context.Context, sel ast.SelectionSet, v commonModel.OrthopedicSurgeryActivity) graphql.Marshaler {
	return ec._OrthopedicSurgeryActivity(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivity2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.OrthopedicSurgeryActivity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivity(ctx, sel, v)
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivityAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivityAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivityAnnotations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrthopedicSurgeryActivityAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsInput(ctx context.Context, v interface{}) (*commonModel.OrthopedicSurgeryActivityAnnotationsInput, error) {
	res, err := ec.unmarshalInputOrthopedicSurgeryActivityAnnotationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrthopedicSurgeryActivityInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityInput(ctx context.Context, v interface{}) (commonModel.OrthopedicSurgeryActivityInput, error) {
	res, err := ec.unmarshalInputOrthopedicSurgeryActivityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivityReview2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx context.Context, sel ast.SelectionSet, v commonModel.OrthopedicSurgeryActivityReview) graphql.Marshaler {
	return ec._OrthopedicSurgeryActivityReview(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrthopedicSurgeryActivityReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivityReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivityReview(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrthopedicSurgeryActivityReviewInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReviewInput(ctx context.Context, v interface{}) (commonModel.OrthopedicSurgeryActivityReviewInput, error) {
	res, err := ec.unmarshalInputOrthopedicSurgeryActivityReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrthopedicSurgeryMetadata2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadata(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryMetadata) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrthopedicSurgeryMetadata(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrthopedicSurgeryMetadataInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadataInput(ctx context.Context, v interface{}) (*commonModel.OrthopedicSurgeryMetadataInput, error) {
	res, err := ec.unmarshalInputOrthopedicSurgeryMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPracticalActivityType2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPracticalActivityTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.PracticalActivityType) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPracticalActivityType2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPracticalActivityType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPracticalActivityType2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPracticalActivityType(ctx context.Context, sel ast.SelectionSet, v *commonModel.PracticalActivityType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PracticalActivityType(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedure2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Procedure) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProcedure2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedure(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProcedure2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedure(ctx context.Context, sel ast.SelectionSet, v *commonModel.Procedure) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Procedure(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedureAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureAnnotationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ProcedureAnnotations) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProcedureAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureAnnotations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProcedureAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.ProcedureAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProcedureAnnotations(ctx, sel, v)
}

func (ec *executionContext) marshalNProcedureBranch2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureBranchᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ProcedureBranch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProcedureBranch2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureBranch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProcedureBranch2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedureBranch(ctx context.Context, sel ast.SelectionSet, v *commonModel.ProcedureBranch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ProcedureBranch(ctx, sel, v)
}

func (ec *executionContext) marshalNPurpose2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPurposeᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Purpose) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPurpose2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPurpose(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPurpose2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐPurpose(ctx context.Context, sel ast.SelectionSet, v *commonModel.Purpose) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Purpose(ctx, sel, v)
}

func (ec *executionContext) marshalNResidentExamination2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExamination(ctx context.Context, sel ast.SelectionSet, v commonModel.ResidentExamination) graphql.Marshaler {
	return ec._ResidentExamination(ctx, sel, &v)
}

func (ec *executionContext) marshalNResidentExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExamination(ctx context.Context, sel ast.SelectionSet, v *commonModel.ResidentExamination) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResidentExamination(ctx, sel, v)
}

func (ec *executionContext) marshalNResidentExaminationAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ResidentExaminationAnnotations) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResidentExaminationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNResidentExaminationAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.ResidentExaminationAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResidentExaminationAnnotations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResidentExaminationAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsInputᚄ(ctx context.Context, v interface{}) ([]*commonModel.ResidentExaminationAnnotationsInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*commonModel.ResidentExaminationAnnotationsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNResidentExaminationAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNResidentExaminationAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationAnnotationsInput(ctx context.Context, v interface{}) (*commonModel.ResidentExaminationAnnotationsInput, error) {
	res, err := ec.unmarshalInputResidentExaminationAnnotationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNResidentExaminationInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationInput(ctx context.Context, v interface{}) (commonModel.ResidentExaminationInput, error) {
	res, err := ec.unmarshalInputResidentExaminationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v *commonModel.Role) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Role(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRoleInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx context.Context, v interface{}) (commonModel.RoleInput, error) {
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRoleInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx context.Context, v interface{}) ([]*commonModel.RoleInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*commonModel.RoleInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORoleInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRoute2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRouteᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Route) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRoute2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRoute2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoute(ctx context.Context, sel ast.SelectionSet, v *commonModel.Route) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Route(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSeenNotificationInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSeenNotificationInputᚄ(ctx context.Context, v interface{}) ([]*commonModel.SeenNotificationInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*commonModel.SeenNotificationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSeenNotificationInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSeenNotificationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSeenNotificationInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSeenNotificationInput(ctx context.Context, v interface{}) (*commonModel.SeenNotificationInput, error) {
	res, err := ec.unmarshalInputSeenNotificationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSpecialties2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSpecialties(ctx context.Context, v interface{}) (commonModel.Specialties, error) {
	var res commonModel.Specialties
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSpecialties2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSpecialties(ctx context.Context, sel ast.SelectionSet, v commonModel.Specialties) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupervisorExaminationReview2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReview(ctx context.Context, sel ast.SelectionSet, v commonModel.SupervisorExaminationReview) graphql.Marshaler {
	return ec._SupervisorExaminationReview(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupervisorExaminationReview2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.SupervisorExaminationReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorExaminationReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupervisorExaminationReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReview(ctx context.Context, sel ast.SelectionSet, v *commonModel.SupervisorExaminationReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupervisorExaminationReview(ctx, sel, v)
}

func (ec *executionContext) marshalNSupervisorExaminationReviewAnnotations2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.SupervisorExaminationReviewAnnotations) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorExaminationReviewAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupervisorExaminationReviewAnnotations2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotations(ctx context.Context, sel ast.SelectionSet, v *commonModel.SupervisorExaminationReviewAnnotations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupervisorExaminationReviewAnnotations(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupervisorExaminationReviewAnnotationsInput2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsInputᚄ(ctx context.Context, v interface{}) ([]*commonModel.SupervisorExaminationReviewAnnotationsInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*commonModel.SupervisorExaminationReviewAnnotationsInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSupervisorExaminationReviewAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSupervisorExaminationReviewAnnotationsInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewAnnotationsInput(ctx context.Context, v interface{}) (*commonModel.SupervisorExaminationReviewAnnotationsInput, error) {
	res, err := ec.unmarshalInputSupervisorExaminationReviewAnnotationsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSupervisorExaminationReviewInput2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSupervisorExaminationReviewInput(ctx context.Context, v interface{}) (commonModel.SupervisorExaminationReviewInput, error) {
	res, err := ec.unmarshalInputSupervisorExaminationReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSurgery2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx context.Context, sel ast.SelectionSet, v commonModel.Surgery) graphql.Marshaler {
	return ec._Surgery(ctx, sel, &v)
}

func (ec *executionContext) marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Surgery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNSurgery2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Surgery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx context.Context, sel ast.SelectionSet, v *commonModel.Surgery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Surgery(ctx, sel, v)
}

func (ec *executionContext) marshalNSurgeryDiagnose2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryDiagnose(ctx context.Context, sel ast.SelectionSet, v *commonModel.SurgeryDiagnose) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SurgeryDiagnose(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSurgeryDiagnoseInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryDiagnoseInput(ctx context.Context, v interface{}) (*commonModel.SurgeryDiagnoseInput, error) {
	res, err := ec.unmarshalInputSurgeryDiagnoseInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSurgeryLogbookEntryQueryFilter2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryLogbookEntryQueryFilter(ctx context.Context, v interface{}) (commonModel.SurgeryLogbookEntryQueryFilter, error) {
	res, err := ec.unmarshalInputSurgeryLogbookEntryQueryFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSurgeryMethod2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryMethod(ctx context.Context, sel ast.SelectionSet, v *commonModel.SurgeryMethod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SurgeryMethod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSurgeryMethodInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryMethodInput(ctx context.Context, v interface{}) (*commonModel.SurgeryMethodInput, error) {
	res, err := ec.unmarshalInputSurgeryMethodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSurgeryOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryOrderBy(ctx context.Context, v interface{}) (commonModel.SurgeryOrderBy, error) {
	var res commonModel.SurgeryOrderBy
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSurgeryOrderBy2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryOrderBy(ctx context.Context, sel ast.SelectionSet, v commonModel.SurgeryOrderBy) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v commonModel.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *commonModel.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAssessment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessment(ctx context.Context, sel ast.SelectionSet, v *commonModel.Assessment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Assessment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAssessmentQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentQueryFilter(ctx context.Context, v interface{}) (*commonModel.AssessmentQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAssessmentQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAssessmentType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentTypeᚄ(ctx context.Context, v interface{}) ([]commonModel.AssessmentType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]commonModel.AssessmentType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAssessmentType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAssessmentType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []commonModel.AssessmentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAssessmentType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐAssessmentType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOClinic2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Clinic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClinic2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOClinicDepartment2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicDepartment(ctx context.Context, sel ast.SelectionSet, v *commonModel.ClinicDepartment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClinicDepartment(ctx, sel, v)
}

func (ec *executionContext) marshalOClinicRole2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ClinicRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClinicRole2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐClinicRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODopsEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsEvaluation(ctx context.Context, sel ast.SelectionSet, v *commonModel.DopsEvaluation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DopsEvaluation(ctx, sel, v)
}

func (ec *executionContext) unmarshalODopsQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐDopsQueryFilter(ctx context.Context, v interface{}) (*commonModel.DopsQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDopsQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐExamination(ctx context.Context, sel ast.SelectionSet, v *commonModel.Examination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Examination(ctx, sel, v)
}

func (ec *executionContext) marshalOHospital2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐHospital(ctx context.Context, sel ast.SelectionSet, v *commonModel.Hospital) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Hospital(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOLogbookEntry2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntry(ctx context.Context, sel ast.SelectionSet, v *commonModel.LogbookEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LogbookEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLogbookEntryQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryQueryFilter(ctx context.Context, v interface{}) (*commonModel.LogbookEntryQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLogbookEntryQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLogbookEntryType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryTypeᚄ(ctx context.Context, v interface{}) ([]commonModel.LogbookEntryType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]commonModel.LogbookEntryType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNLogbookEntryType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLogbookEntryType2ᚕgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []commonModel.LogbookEntryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogbookEntryType2gitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐLogbookEntryType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMiniCexEvaluation2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexEvaluation(ctx context.Context, sel ast.SelectionSet, v *commonModel.MiniCexEvaluation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MiniCexEvaluation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMiniCexQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐMiniCexQueryFilter(ctx context.Context, v interface{}) (*commonModel.MiniCexQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMiniCexQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotificationType2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx context.Context, v interface{}) (*commonModel.NotificationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(commonModel.NotificationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONotificationType2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v *commonModel.NotificationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOrthopedicSurgeryActivity2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivity(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivity(ctx, sel, v)
}

func (ec *executionContext) marshalOOrthopedicSurgeryActivityAnnotationsField2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsField(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivityAnnotationsField) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivityAnnotationsField(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrthopedicSurgeryActivityAnnotationsFieldInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityAnnotationsFieldInput(ctx context.Context, v interface{}) (*commonModel.OrthopedicSurgeryActivityAnnotationsFieldInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrthopedicSurgeryActivityAnnotationsFieldInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrthopedicSurgeryActivityReview2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryActivityReview(ctx context.Context, sel ast.SelectionSet, v *commonModel.OrthopedicSurgeryActivityReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrthopedicSurgeryActivityReview(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrthopedicSurgeryMetadataInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐOrthopedicSurgeryMetadataInput(ctx context.Context, v interface{}) (*commonModel.OrthopedicSurgeryMetadataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrthopedicSurgeryMetadataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProcedure2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐProcedure(ctx context.Context, sel ast.SelectionSet, v *commonModel.Procedure) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Procedure(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQueryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryOrder(ctx context.Context, v interface{}) (*commonModel.QueryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQueryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQueryPaging2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐQueryPaging(ctx context.Context, v interface{}) (*commonModel.QueryPaging, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQueryPaging(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResidentExamination2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExaminationᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.ResidentExamination) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResidentExamination2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐResidentExamination(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORole2ᚕᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*commonModel.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalORoleInput2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐRoleInput(ctx context.Context, v interface{}) (*commonModel.RoleInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSurgery2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgery(ctx context.Context, sel ast.SelectionSet, v *commonModel.Surgery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Surgery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSurgeryLogbookEntryQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryLogbookEntryQueryFilter(ctx context.Context, v interface{}) (*commonModel.SurgeryLogbookEntryQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSurgeryLogbookEntryQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSurgeryOrder2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryOrder(ctx context.Context, v interface{}) (*commonModel.SurgeryOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSurgeryOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSurgeryReviewQueryFilter2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐSurgeryReviewQueryFilter(ctx context.Context, v interface{}) (*commonModel.SurgeryReviewQueryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSurgeryReviewQueryFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOUser2ᚖgitlabᚗcomᚋstᚑappenᚋwebserviceᚋinternalᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *commonModel.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
