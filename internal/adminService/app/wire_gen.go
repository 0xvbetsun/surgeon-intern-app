// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package adminService

import (
	"context"
	"github.com/cychiuae/casbin-pg-adapter"
	clinics2 "github.com/vbetsun/surgeon-intern-app/internal/adminService/pkg/services/clinics"
	"github.com/vbetsun/surgeon-intern-app/internal/adminService/pkg/services/encrypt"
	"github.com/vbetsun/surgeon-intern-app/internal/adminService/pkg/services/hospitals"
	roles2 "github.com/vbetsun/surgeon-intern-app/internal/adminService/pkg/services/roles"
	"github.com/vbetsun/surgeon-intern-app/internal/adminService/pkg/services/users"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/db"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/services/authorization"
	users3 "github.com/vbetsun/surgeon-intern-app/internal/pkg/services/users"
	"github.com/vbetsun/surgeon-intern-app/internal/pkg/thirdparty"
	"github.com/vbetsun/surgeon-intern-app/internal/util"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/OrganizationalUnits"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/clinics"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/dbexecutor"
	"github.com/vbetsun/surgeon-intern-app/pkg/repo/roles"
	users2 "github.com/vbetsun/surgeon-intern-app/pkg/repo/users"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context, pgConnectionParameters db.ConnectionParameters, casbinTableName string, casbinConfigFilePath authorization.CasbinConfigFilePath, credentials *thirdparty.MailgunCredentials, auth0Parameters *users.Auth0UserDbParameters, hmacParams *encrypt.HmacParams) (*App, error) {
	postgresql, err := db.NewSqlConnection(pgConnectionParameters)
	if err != nil {
		return nil, err
	}
	sqlDB := postgresql.Conn
	adapter, err := casbinpgadapter.NewAdapter(sqlDB, casbinTableName)
	if err != nil {
		return nil, err
	}
	userOrganizationalUnitRoleRepo := users2.NewUserOrganizationalUnitRoleRepo(sqlDB)
	iRepo := roles.NewRepo(sqlDB)
	usersIRepo := users2.NewRepo(sqlDB, userOrganizationalUnitRoleRepo, iRepo)
	repo := OrganizationalUnits.NewRepo(sqlDB)
	typesRepo := OrganizationalUnits.NewTypesRepo(sqlDB)
	iService, err := authorization.NewService(adapter, usersIRepo, casbinConfigFilePath, repo, typesRepo)
	if err != nil {
		return nil, err
	}
	viper := util.GetViper()
	auth0, err := thirdparty.NewAuth0ManagementApi(viper)
	if err != nil {
		return nil, err
	}
	usersIService := users3.NewService(usersIRepo, auth0, repo, typesRepo, iRepo)
	idbExecutor := dbexecutor.NewDBExecutor(sqlDB)
	mailgun := thirdparty.NewMailgun(credentials)
	hmac := encrypt.NewHmac(hmacParams)
	userService := users.NewUserService(auth0, usersIRepo, idbExecutor, mailgun, auth0Parameters, hmac)
	clinicsIRepo := clinics.NewRepo(sqlDB, typesRepo)
	clinicService := clinics2.NewClinicService(repo, typesRepo, clinicsIRepo, iRepo)
	roleService := roles2.NewRoleService(iRepo)
	hospitalService := hospitals.NewHospitalService(repo, typesRepo, iRepo)
	service, err := NewService(iService, usersIService, userService, clinicService, roleService, hospitalService)
	if err != nil {
		return nil, err
	}
	resolver := NewResolver(service)
	config := NewQlConfig(resolver)
	restApi := NewRestApi(service)
	app := NewApp(config, restApi)
	return app, nil
}
