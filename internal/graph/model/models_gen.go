// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package commonModel

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Activity struct {
	OccurredAt   time.Time     `json:"occurredAt"`
	LogbookEntry *LogbookEntry `json:"logbookEntry"`
	Assessment   *Assessment   `json:"assessment"`
}

type ActivityQueryFilter struct {
	LogbookEntryFilter *LogbookEntryQueryFilter `json:"logbookEntryFilter"`
	AssessmentFilter   *AssessmentQueryFilter   `json:"assessmentFilter"`
}

type Aid struct {
	DisplayName string   `json:"displayName"`
	Routes      []*Route `json:"routes"`
}

type Assessment struct {
	SurgeryReview *OrthopedicSurgeryActivityReview `json:"surgeryReview"`
	Dops          *DopsEvaluation                  `json:"dops"`
	MiniCex       *MiniCexEvaluation               `json:"miniCex"`
}

type AssessmentQueryFilter struct {
	AssessmentTypes     []AssessmentType          `json:"assessmentTypes"`
	DopsFilter          *DopsQueryFilter          `json:"dopsFilter"`
	MiniCexFilter       *MiniCexQueryFilter       `json:"miniCexFilter"`
	SurgeryReviewFilter *SurgeryReviewQueryFilter `json:"surgeryReviewFilter"`
}

type Clinic struct {
	ClinicID    string      `json:"clinicId"`
	DisplayName string      `json:"displayName"`
	Specialty   Specialties `json:"specialty"`
	HospitalID  *string     `json:"hospitalId"`
	Hospital    *Hospital   `json:"hospital"`
}

type ClinicDepartment struct {
	DepartmentID   string `json:"departmentId"`
	DepartmentName string `json:"departmentName"`
	ClinicID       string `json:"clinicId"`
}

type ClinicRole struct {
	Clinic *Clinic `json:"clinic"`
	Role   *Role   `json:"role"`
}

type Description struct {
	Title   string            `json:"title"`
	Subrows []*DescriptionRow `json:"subrows"`
}

type DescriptionRow struct {
	Title             string  `json:"title"`
	Subtitle          *string `json:"subtitle"`
	SubtitleHighlight *string `json:"subtitleHighlight"`
}

type DopsEvaluation struct {
	DopsEvaluationID string                       `json:"dopsEvaluationId"`
	Description      *Description                 `json:"description"`
	SurgeryActivity  *OrthopedicSurgeryActivity   `json:"surgeryActivity"`
	SupervisorID     string                       `json:"supervisorId"`
	Supervisor       *User                        `json:"supervisor"`
	ResidentID       string                       `json:"residentId"`
	Resident         *User                        `json:"resident"`
	SurgeryMetadata  *OrthopedicSurgeryMetadata   `json:"surgeryMetadata"`
	Difficulty       *string                      `json:"difficulty"`
	DepartmentID     *string                      `json:"departmentId"`
	Department       *ClinicDepartment            `json:"department"`
	Annotations      []*EvaluationFormAnnotations `json:"annotations"`
	IsEvaluated      bool                         `json:"isEvaluated"`
	CreatedAt        time.Time                    `json:"createdAt"`
	InProgress       bool                         `json:"inProgress"`
	ActiveStep       int                          `json:"activeStep"`
	CompletedStep    int                          `json:"completedStep"`
}

type DopsEvaluationInput struct {
	DopsEvaluationID  *string                           `json:"dopsEvaluationId"`
	SurgeryMetadata   *OrthopedicSurgeryMetadataInput   `json:"surgeryMetadata"`
	ResidentID        *string                           `json:"residentId"`
	SurgeryActivityID *string                           `json:"surgeryActivityId"`
	Difficulty        *string                           `json:"difficulty"`
	DepartmentID      *string                           `json:"departmentId"`
	Annotations       []*EvaluationFormAnnotationsInput `json:"annotations"`
	InProgress        bool                              `json:"inProgress"`
	ActiveStep        int                               `json:"activeStep"`
	CompletedStep     int                               `json:"completedStep"`
}

type DopsQueryFilter struct {
	ResidentID   *string  `json:"residentId"`
	SupervisorID *string  `json:"supervisorId"`
	IsEvaluated  *bool    `json:"isEvaluated"`
	IsConnected  *bool    `json:"isConnected"`
	InProgress   *bool    `json:"inProgress"`
	Surgeries    []string `json:"surgeries"`
}

type EvaluationForm struct {
	EvaluationFormID int                         `json:"evaluationFormId"`
	DisplayName      string                      `json:"displayName"`
	Difficulty       []string                    `json:"difficulty"`
	Annotations      []*EvaluationFormAnnotation `json:"annotations"`
	Citations        []string                    `json:"citations"`
}

type EvaluationFormAnnotation struct {
	Subject     string                       `json:"subject"`
	Description string                       `json:"description"`
	Comment     string                       `json:"comment"`
	Options     []string                     `json:"options"`
	Type        EvaluationFormAnnotationType `json:"type"`
}

type EvaluationFormAnnotations struct {
	Subject            string                       `json:"subject"`
	Description        string                       `json:"description"`
	DescriptionComment string                       `json:"descriptionComment"`
	NotObserved        *bool                        `json:"notObserved"`
	Options            []string                     `json:"options"`
	Comment            *string                      `json:"comment"`
	Value              *int                         `json:"value"`
	Type               EvaluationFormAnnotationType `json:"type"`
}

type EvaluationFormAnnotationsInput struct {
	Subject            string                       `json:"subject"`
	Description        string                       `json:"description"`
	DescriptionComment string                       `json:"descriptionComment"`
	NotObserved        *bool                        `json:"notObserved"`
	Options            []string                     `json:"options"`
	Comment            *string                      `json:"comment"`
	Value              *int                         `json:"value"`
	Type               EvaluationFormAnnotationType `json:"type"`
}

type Examination struct {
	ExaminationID string                    `json:"examinationId"`
	ClinicID      string                    `json:"clinicId"`
	DisplayName   string                    `json:"displayName"`
	Annotations   []*ExaminationAnnotations `json:"annotations"`
}

type ExaminationAnnotations struct {
	Label           string `json:"label"`
	Group           string `json:"group"`
	EvaluationGroup string `json:"evaluationGroup"`
}

type Finding struct {
	DisplayName string `json:"displayName"`
}

type Hospital struct {
	HospitalID  string    `json:"hospitalId"`
	DisplayName string    `json:"displayName"`
	Clinics     []*Clinic `json:"clinics"`
}

type LogbookEntry struct {
	Surgery     *OrthopedicSurgeryActivity `json:"surgery"`
	Examination *Examination               `json:"examination"`
	Procedure   *Procedure                 `json:"procedure"`
}

type LogbookEntryQueryFilter struct {
	ResidentID                 *string                         `json:"residentId"`
	SupervisorID               *string                         `json:"supervisorId"`
	HasReview                  *bool                           `json:"hasReview"`
	IsReviewed                 *bool                           `json:"isReviewed"`
	HasDops                    *bool                           `json:"hasDops"`
	DopsEvaluated              *bool                           `json:"dopsEvaluated"`
	LogbookEntryTypes          []LogbookEntryType              `json:"logbookEntryTypes"`
	SurgeryLogbookEntryFilters *SurgeryLogbookEntryQueryFilter `json:"surgeryLogbookEntryFilters"`
	InProgress                 *bool                           `json:"inProgress"`
}

type Method struct {
	DisplayName string `json:"displayName"`
	Aids        []*Aid `json:"aids"`
}

type MiniCexArea struct {
	MiniCexAreaID int    `json:"miniCexAreaId"`
	DepartmentID  string `json:"departmentId"`
	Name          string `json:"name"`
}

type MiniCexEvaluation struct {
	ID            string                       `json:"id"`
	Description   *Description                 `json:"description"`
	SupervisorID  string                       `json:"supervisorId"`
	Supervisor    *User                        `json:"supervisor"`
	ResidentID    string                       `json:"residentId"`
	Resident      *User                        `json:"resident"`
	Difficulty    *string                      `json:"difficulty"`
	Focuses       []string                     `json:"focuses"`
	Area          string                       `json:"area"`
	DepartmentID  *string                      `json:"departmentId"`
	Department    *ClinicDepartment            `json:"department"`
	Annotations   []*EvaluationFormAnnotations `json:"annotations"`
	IsEvaluated   bool                         `json:"isEvaluated"`
	OccurredAt    time.Time                    `json:"occurredAt"`
	CreatedAt     time.Time                    `json:"createdAt"`
	InProgress    bool                         `json:"inProgress"`
	ActiveStep    int                          `json:"activeStep"`
	CompletedStep int                          `json:"completedStep"`
}

type MiniCexEvaluationInput struct {
	ID            *string                           `json:"id"`
	ResidentID    *string                           `json:"residentId"`
	Difficulty    *string                           `json:"difficulty"`
	Area          string                            `json:"area"`
	Focuses       []string                          `json:"focuses"`
	DepartmentID  *string                           `json:"departmentId"`
	OccurredAt    time.Time                         `json:"occurredAt"`
	Annotations   []*EvaluationFormAnnotationsInput `json:"annotations"`
	InProgress    bool                              `json:"inProgress"`
	ActiveStep    int                               `json:"activeStep"`
	CompletedStep int                               `json:"completedStep"`
}

type MiniCexFocus struct {
	MiniCexFocusID int    `json:"miniCexFocusId"`
	Name           string `json:"name"`
}

type MiniCexQueryFilter struct {
	ResidentID   *string `json:"residentId"`
	SupervisorID *string `json:"supervisorId"`
	IsEvaluated  *bool   `json:"isEvaluated"`
	InProgress   *bool   `json:"inProgress"`
}

type MiniCexRequestInput struct {
	SupervisorID *string                           `json:"supervisorId"`
	Difficulty   string                            `json:"difficulty"`
	DepartmentID string                            `json:"departmentId"`
	OccurredAt   time.Time                         `json:"occurredAt"`
	Annotations  []*EvaluationFormAnnotationsInput `json:"annotations"`
}

type Notification struct {
	ID          string                   `json:"id"`
	UserID      string                   `json:"user_id"`
	Annotations *NotificationAnnotations `json:"annotations"`
	CreatedAt   time.Time                `json:"createdAt"`
	SeenAt      *time.Time               `json:"seenAt"`
}

type NotificationAnnotations struct {
	RelatedID        string           `json:"relatedId"`
	NotificationURL  string           `json:"notificationUrl"`
	NotificationType NotificationType `json:"notificationType"`
}

type OrthopedicSurgeryActivity struct {
	ID               string                                `json:"id"`
	Description      *Description                          `json:"description"`
	CreatedAt        time.Time                             `json:"createdAt"`
	SurgeryMetadata  *OrthopedicSurgeryMetadata            `json:"surgeryMetadata"`
	ResidentUserID   string                                `json:"residentUserId"`
	Resident         *User                                 `json:"resident"`
	SupervisorUserID *string                               `json:"supervisorUserId"`
	Supervisor       *User                                 `json:"supervisor"`
	OperatorID       *string                               `json:"operatorId"`
	AssistantID      *string                               `json:"assistantId"`
	Comments         string                                `json:"comments"`
	Complications    string                                `json:"complications"`
	Annotations      *OrthopedicSurgeryActivityAnnotations `json:"annotations"`
	ReviewRequested  bool                                  `json:"reviewRequested"`
	Review           *OrthopedicSurgeryActivityReview      `json:"review"`
	DopsRequested    bool                                  `json:"dopsRequested"`
	Dops             *DopsEvaluation                       `json:"dops"`
	InProgress       bool                                  `json:"inProgress"`
	ActiveStep       int                                   `json:"activeStep"`
	CompletedStep    int                                   `json:"completedStep"`
}

type OrthopedicSurgeryActivityAnnotations struct {
	OperationPlanning  *OrthopedicSurgeryActivityAnnotationsField `json:"operationPlanning"`
	PatientPositioning *OrthopedicSurgeryActivityAnnotationsField `json:"patientPositioning"`
	Incision           *OrthopedicSurgeryActivityAnnotationsField `json:"incision"`
	Opening            *OrthopedicSurgeryActivityAnnotationsField `json:"opening"`
	Inspection         *OrthopedicSurgeryActivityAnnotationsField `json:"inspection"`
	Repositioning      *OrthopedicSurgeryActivityAnnotationsField `json:"repositioning"`
	SawingAndDrillning *OrthopedicSurgeryActivityAnnotationsField `json:"sawingAndDrillning"`
	Osteosyntes        *OrthopedicSurgeryActivityAnnotationsField `json:"osteosyntes"`
	Closing            *OrthopedicSurgeryActivityAnnotationsField `json:"closing"`
	Plastering         *OrthopedicSurgeryActivityAnnotationsField `json:"plastering"`
	PostOp             *OrthopedicSurgeryActivityAnnotationsField `json:"postOp"`
}

type OrthopedicSurgeryActivityAnnotationsField struct {
	WithAssistance    bool `json:"withAssistance"`
	WithoutAssistance bool `json:"withoutAssistance"`
}

type OrthopedicSurgeryActivityAnnotationsFieldInput struct {
	WithAssistance    bool `json:"withAssistance"`
	WithoutAssistance bool `json:"withoutAssistance"`
}

type OrthopedicSurgeryActivityAnnotationsInput struct {
	OperationPlanning  *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"operationPlanning"`
	PatientPositioning *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"patientPositioning"`
	Incision           *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"incision"`
	Opening            *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"opening"`
	Inspection         *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"inspection"`
	Repositioning      *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"repositioning"`
	SawingAndDrillning *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"sawingAndDrillning"`
	Osteosyntes        *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"osteosyntes"`
	Closing            *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"closing"`
	Plastering         *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"plastering"`
	PostOp             *OrthopedicSurgeryActivityAnnotationsFieldInput `json:"postOp"`
}

type OrthopedicSurgeryActivityInput struct {
	ID               *string                                    `json:"id"`
	SurgeryMetadata  *OrthopedicSurgeryMetadataInput            `json:"surgeryMetadata"`
	ResidentUserID   *string                                    `json:"residentUserId"`
	SupervisorUserID *string                                    `json:"supervisorUserId"`
	OperatorID       *string                                    `json:"operatorId"`
	AssistantID      *string                                    `json:"assistantId"`
	Comments         string                                     `json:"comments"`
	Complications    string                                     `json:"complications"`
	DopsRequested    bool                                       `json:"dopsRequested"`
	ReviewRequested  bool                                       `json:"reviewRequested"`
	Annotations      *OrthopedicSurgeryActivityAnnotationsInput `json:"annotations"`
	InProgress       bool                                       `json:"inProgress"`
	ActiveStep       int                                        `json:"activeStep"`
	CompletedStep    int                                        `json:"completedStep"`
}

type OrthopedicSurgeryActivityReview struct {
	ReviewID         string                                `json:"reviewId"`
	ActivityID       string                                `json:"activityId"`
	Description      *Description                          `json:"description"`
	Activity         *OrthopedicSurgeryActivity            `json:"activity"`
	CreatedAt        time.Time                             `json:"createdAt"`
	UpdatedAt        time.Time                             `json:"updatedAt"`
	SignedAt         *time.Time                            `json:"signedAt"`
	SurgeryMetadata  *OrthopedicSurgeryMetadata            `json:"surgeryMetadata"`
	OperatorID       string                                `json:"operatorId"`
	AssistantID      string                                `json:"assistantId"`
	Comments         string                                `json:"comments"`
	Complications    string                                `json:"complications"`
	Annotations      *OrthopedicSurgeryActivityAnnotations `json:"annotations"`
	ResidentUserID   string                                `json:"residentUserId"`
	SupervisorUserID string                                `json:"supervisorUserId"`
	Supervisor       *User                                 `json:"supervisor"`
	Resident         *User                                 `json:"resident"`
	ReviewComment    string                                `json:"reviewComment"`
	InProgress       bool                                  `json:"inProgress"`
	ActiveStep       int                                   `json:"activeStep"`
	CompletedStep    int                                   `json:"completedStep"`
}

type OrthopedicSurgeryActivityReviewInput struct {
	ReviewID        *string                                    `json:"reviewId"`
	ActivityID      string                                     `json:"activityId"`
	SurgeryMetadata *OrthopedicSurgeryMetadataInput            `json:"surgeryMetadata"`
	OperatorID      string                                     `json:"operatorId"`
	AssistantID     string                                     `json:"assistantId"`
	Comments        string                                     `json:"comments"`
	Complications   string                                     `json:"complications"`
	Annotations     *OrthopedicSurgeryActivityAnnotationsInput `json:"annotations"`
	ReviewComment   string                                     `json:"reviewComment"`
	ShouldSign      bool                                       `json:"shouldSign"`
	InProgress      bool                                       `json:"inProgress"`
	ActiveStep      int                                        `json:"activeStep"`
	CompletedStep   int                                        `json:"completedStep"`
}

type OrthopedicSurgeryMetadata struct {
	OccurredAt    time.Time  `json:"occurredAt"`
	Surgeries     []*Surgery `json:"surgeries"`
	CaseNotes     string     `json:"caseNotes"`
	PatientAge    int        `json:"patientAge"`
	PatientGender string     `json:"patientGender"`
}

type OrthopedicSurgeryMetadataInput struct {
	SurgeryIds    []string  `json:"surgeryIds"`
	OccurredAt    time.Time `json:"occurredAt"`
	CaseNotes     string    `json:"caseNotes"`
	PatientAge    int       `json:"patientAge"`
	PatientGender string    `json:"patientGender"`
}

type PracticalActivityType struct {
	PracticalActivityTypeID int              `json:"practicalActivityTypeId"`
	DisplayName             string           `json:"displayName"`
	Name                    LogbookEntryType `json:"name"`
}

type Procedure struct {
	ProcedureID string                  `json:"procedureId"`
	ClinicID    string                  `json:"clinicId"`
	DisplayName string                  `json:"displayName"`
	Annotations []*ProcedureAnnotations `json:"annotations"`
	Branches    []*ProcedureBranch      `json:"branches"`
}

type ProcedureAnnotations struct {
	Methods []*Method `json:"methods"`
}

type ProcedureBranch struct {
	Label    *string            `json:"label"`
	Branches []*ProcedureBranch `json:"branches"`
}

type Purpose struct {
	DisplayName string     `json:"displayName"`
	Findings    []*Finding `json:"findings"`
}

type QueryOrder struct {
	Order   Order   `json:"order"`
	OrderBy OrderBy `json:"orderBy"`
}

type QueryPaging struct {
	PerPage int  `json:"perPage"`
	Page    int  `json:"page"`
	Limit   *int `json:"limit"`
	Offset  *int `json:"Offset"`
}

type ResidentExamination struct {
	ResidentExaminationID string                            `json:"residentExaminationId"`
	ExaminationID         string                            `json:"examinationId"`
	ClinicID              int                               `json:"clinicId"`
	DisplayName           string                            `json:"displayName"`
	Annotations           []*ResidentExaminationAnnotations `json:"annotations"`
	CreatedAt             time.Time                         `json:"createdAt"`
	ResidentUserID        string                            `json:"residentUserId"`
	Resident              *User                             `json:"resident"`
	SupervisorUserID      string                            `json:"supervisorUserId"`
	Supervisor            *User                             `json:"supervisor"`
}

type ResidentExaminationAnnotations struct {
	Label           string `json:"label"`
	Group           string `json:"group"`
	Value           bool   `json:"value"`
	EvaluationGroup string `json:"evaluationGroup"`
	EvaluationValue bool   `json:"evaluationValue"`
}

type ResidentExaminationAnnotationsInput struct {
	Label           string `json:"label"`
	Group           string `json:"group"`
	Value           bool   `json:"value"`
	EvaluationGroup string `json:"evaluationGroup"`
	EvaluationValue bool   `json:"evaluationValue"`
}

type ResidentExaminationInput struct {
	SupervisorUserID *string                                `json:"supervisorUserId"`
	ExaminationID    string                                 `json:"examinationId"`
	Annotations      []*ResidentExaminationAnnotationsInput `json:"annotations"`
}

type Role struct {
	RoleIdentifier string `json:"roleIdentifier"`
	DisplayName    string `json:"displayName"`
}

type RoleInput struct {
	RoleIdentifier string `json:"roleIdentifier"`
}

type Route struct {
	DisplayName string     `json:"displayName"`
	Purposes    []*Purpose `json:"purposes"`
}

type SeenNotificationInput struct {
	ID string `json:"id"`
}

type SupervisorExaminationReview struct {
	SupervisorExaminationReviewID string                                    `json:"supervisorExaminationReviewId"`
	ResidentExaminationID         string                                    `json:"residentExaminationId"`
	ResidentUserID                string                                    `json:"residentUserId"`
	SupervisorUserID              string                                    `json:"supervisorUserId"`
	DisplayName                   string                                    `json:"displayName"`
	Annotations                   []*SupervisorExaminationReviewAnnotations `json:"annotations"`
	Comment                       *string                                   `json:"comment"`
	CreatedAt                     time.Time                                 `json:"createdAt"`
	ResidentUpdatedAt             *time.Time                                `json:"residentUpdatedAt"`
	SupervisorUpdatedAt           *time.Time                                `json:"supervisorUpdatedAt"`
	IsReviewed                    bool                                      `json:"isReviewed"`
	Resident                      *User                                     `json:"resident"`
	Supervisor                    *User                                     `json:"supervisor"`
}

type SupervisorExaminationReviewAnnotations struct {
	Label           string  `json:"label"`
	Group           string  `json:"group"`
	Value           bool    `json:"value"`
	EvaluationGroup string  `json:"evaluationGroup"`
	EvaluationValue bool    `json:"evaluationValue"`
	Comment         *string `json:"comment"`
}

type SupervisorExaminationReviewAnnotationsInput struct {
	Label           string  `json:"label"`
	Group           string  `json:"group"`
	Value           bool    `json:"value"`
	EvaluationGroup string  `json:"evaluationGroup"`
	EvaluationValue bool    `json:"evaluationValue"`
	Comment         *string `json:"comment"`
}

type SupervisorExaminationReviewInput struct {
	SupervisorExaminationReviewID string                                         `json:"supervisorExaminationReviewId"`
	Annotations                   []*SupervisorExaminationReviewAnnotationsInput `json:"annotations"`
	Comment                       *string                                        `json:"comment"`
}

type Surgery struct {
	ID       string           `json:"id"`
	Diagnose *SurgeryDiagnose `json:"diagnose"`
	Method   *SurgeryMethod   `json:"method"`
}

type SurgeryDiagnose struct {
	ID           string `json:"id"`
	Bodypart     string `json:"bodypart"`
	DiagnoseName string `json:"diagnoseName"`
	DiagnoseCode string `json:"diagnoseCode"`
	ExtraCode    string `json:"extraCode"`
}

type SurgeryDiagnoseInput struct {
	ID           string `json:"id"`
	Bodypart     string `json:"bodypart"`
	DiagnoseName string `json:"diagnoseName"`
	DiagnoseCode string `json:"diagnoseCode"`
}

type SurgeryInput struct {
	Diagnose *SurgeryDiagnoseInput `json:"diagnose"`
	Method   *SurgeryMethodInput   `json:"method"`
}

type SurgeryLogbookEntryQueryFilter struct {
	Date         *time.Time `json:"date"`
	InProgress   *bool      `json:"inProgress"`
	HasDops      *bool      `json:"hasDops"`
	HasReview    *bool      `json:"hasReview"`
	Surgeries    []string   `json:"surgeries"`
	ResidentID   *string    `json:"residentId"`
	SupervisorID *string    `json:"supervisorId"`
}

type SurgeryMethod struct {
	ID           string `json:"id"`
	MethodName   string `json:"methodName"`
	MethodCode   string `json:"methodCode"`
	ApproachName string `json:"approachName"`
}

type SurgeryMethodInput struct {
	ID           string `json:"id"`
	MethodName   string `json:"methodName"`
	MethodCode   string `json:"methodCode"`
	ApproachName string `json:"approachName"`
}

type SurgeryOrder struct {
	Order   Order          `json:"order"`
	OrderBy SurgeryOrderBy `json:"orderBy"`
}

type SurgeryReviewQueryFilter struct {
	Date         *time.Time `json:"date"`
	InProgress   *bool      `json:"inProgress"`
	IsEvaluated  *bool      `json:"isEvaluated"`
	Surgeries    []string   `json:"surgeries"`
	ResidentID   *string    `json:"residentId"`
	SupervisorID *string    `json:"supervisorId"`
}

type User struct {
	UserID      string        `json:"userId"`
	DisplayName string        `json:"displayName"`
	ClinicRoles []*ClinicRole `json:"clinicRoles"`
	ClinicIds   []string      `json:"clinicIds"`
}

type UserClinicRoleInput struct {
	ClinicID       string `json:"clinicId"`
	RoleIdentifier string `json:"roleIdentifier"`
	UserID         string `json:"userId"`
}

type ActivityType string

const (
	ActivityTypeSurgery           ActivityType = "Surgery"
	ActivityTypeExamination       ActivityType = "Examination"
	ActivityTypeProcedure         ActivityType = "Procedure"
	ActivityTypeSurgeryReview     ActivityType = "SurgeryReview"
	ActivityTypeExaminationReview ActivityType = "ExaminationReview"
	ActivityTypeProcedureReview   ActivityType = "ProcedureReview"
	ActivityTypeDops              ActivityType = "Dops"
	ActivityTypeMiniCex           ActivityType = "MiniCex"
)

var AllActivityType = []ActivityType{
	ActivityTypeSurgery,
	ActivityTypeExamination,
	ActivityTypeProcedure,
	ActivityTypeSurgeryReview,
	ActivityTypeExaminationReview,
	ActivityTypeProcedureReview,
	ActivityTypeDops,
	ActivityTypeMiniCex,
}

func (e ActivityType) IsValid() bool {
	switch e {
	case ActivityTypeSurgery, ActivityTypeExamination, ActivityTypeProcedure, ActivityTypeSurgeryReview, ActivityTypeExaminationReview, ActivityTypeProcedureReview, ActivityTypeDops, ActivityTypeMiniCex:
		return true
	}
	return false
}

func (e ActivityType) String() string {
	return string(e)
}

func (e *ActivityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActivityType", str)
	}
	return nil
}

func (e ActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AnnotationType string

const (
	AnnotationTypeChecklist      AnnotationType = "Checklist"
	AnnotationTypeOtherChecklist AnnotationType = "OtherChecklist"
)

var AllAnnotationType = []AnnotationType{
	AnnotationTypeChecklist,
	AnnotationTypeOtherChecklist,
}

func (e AnnotationType) IsValid() bool {
	switch e {
	case AnnotationTypeChecklist, AnnotationTypeOtherChecklist:
		return true
	}
	return false
}

func (e AnnotationType) String() string {
	return string(e)
}

func (e *AnnotationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnnotationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnnotationType", str)
	}
	return nil
}

func (e AnnotationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AssessmentType string

const (
	AssessmentTypeSurgeryReview     AssessmentType = "SurgeryReview"
	AssessmentTypeExaminationReview AssessmentType = "ExaminationReview"
	AssessmentTypeProcedureReview   AssessmentType = "ProcedureReview"
	AssessmentTypeDops              AssessmentType = "Dops"
	AssessmentTypeMiniCex           AssessmentType = "MiniCex"
)

var AllAssessmentType = []AssessmentType{
	AssessmentTypeSurgeryReview,
	AssessmentTypeExaminationReview,
	AssessmentTypeProcedureReview,
	AssessmentTypeDops,
	AssessmentTypeMiniCex,
}

func (e AssessmentType) IsValid() bool {
	switch e {
	case AssessmentTypeSurgeryReview, AssessmentTypeExaminationReview, AssessmentTypeProcedureReview, AssessmentTypeDops, AssessmentTypeMiniCex:
		return true
	}
	return false
}

func (e AssessmentType) String() string {
	return string(e)
}

func (e *AssessmentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssessmentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssessmentType", str)
	}
	return nil
}

func (e AssessmentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Error string

const (
	ErrorUnAuthorized       Error = "UnAuthorized"
	ErrorItemNotFound       Error = "ItemNotFound"
	ErrorBadRequest         Error = "BadRequest"
	ErrorUnknownServerError Error = "UnknownServerError"
)

var AllError = []Error{
	ErrorUnAuthorized,
	ErrorItemNotFound,
	ErrorBadRequest,
	ErrorUnknownServerError,
}

func (e Error) IsValid() bool {
	switch e {
	case ErrorUnAuthorized, ErrorItemNotFound, ErrorBadRequest, ErrorUnknownServerError:
		return true
	}
	return false
}

func (e Error) String() string {
	return string(e)
}

func (e *Error) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Error(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Error", str)
	}
	return nil
}

func (e Error) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EvaluationFormAnnotationType string

const (
	EvaluationFormAnnotationTypeSlidingScale EvaluationFormAnnotationType = "SlidingScale"
	EvaluationFormAnnotationTypeOption       EvaluationFormAnnotationType = "Option"
	EvaluationFormAnnotationTypeSummary      EvaluationFormAnnotationType = "Summary"
)

var AllEvaluationFormAnnotationType = []EvaluationFormAnnotationType{
	EvaluationFormAnnotationTypeSlidingScale,
	EvaluationFormAnnotationTypeOption,
	EvaluationFormAnnotationTypeSummary,
}

func (e EvaluationFormAnnotationType) IsValid() bool {
	switch e {
	case EvaluationFormAnnotationTypeSlidingScale, EvaluationFormAnnotationTypeOption, EvaluationFormAnnotationTypeSummary:
		return true
	}
	return false
}

func (e EvaluationFormAnnotationType) String() string {
	return string(e)
}

func (e *EvaluationFormAnnotationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EvaluationFormAnnotationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EvaluationFormAnnotationType", str)
	}
	return nil
}

func (e EvaluationFormAnnotationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LogbookEntryType string

const (
	LogbookEntryTypeSurgery     LogbookEntryType = "Surgery"
	LogbookEntryTypeExamination LogbookEntryType = "Examination"
	LogbookEntryTypeProcedure   LogbookEntryType = "Procedure"
)

var AllLogbookEntryType = []LogbookEntryType{
	LogbookEntryTypeSurgery,
	LogbookEntryTypeExamination,
	LogbookEntryTypeProcedure,
}

func (e LogbookEntryType) IsValid() bool {
	switch e {
	case LogbookEntryTypeSurgery, LogbookEntryTypeExamination, LogbookEntryTypeProcedure:
		return true
	}
	return false
}

func (e LogbookEntryType) String() string {
	return string(e)
}

func (e *LogbookEntryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogbookEntryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogbookEntryType", str)
	}
	return nil
}

func (e LogbookEntryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationType string

const (
	NotificationTypeActivity          NotificationType = "Activity"
	NotificationTypeReviewRequest     NotificationType = "reviewRequest"
	NotificationTypeDopsRequest       NotificationType = "DopsRequest"
	NotificationTypeDopsEvaluation    NotificationType = "DopsEvaluation"
	NotificationTypeMiniCexRequest    NotificationType = "MiniCexRequest"
	NotificationTypeMiniCexEvaluation NotificationType = "MiniCexEvaluation"
)

var AllNotificationType = []NotificationType{
	NotificationTypeActivity,
	NotificationTypeReviewRequest,
	NotificationTypeDopsRequest,
	NotificationTypeDopsEvaluation,
	NotificationTypeMiniCexRequest,
	NotificationTypeMiniCexEvaluation,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeActivity, NotificationTypeReviewRequest, NotificationTypeDopsRequest, NotificationTypeDopsEvaluation, NotificationTypeMiniCexRequest, NotificationTypeMiniCexEvaluation:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Order string

const (
	OrderAscending  Order = "Ascending"
	OrderDescending Order = "Descending"
)

var AllOrder = []Order{
	OrderAscending,
	OrderDescending,
}

func (e Order) IsValid() bool {
	switch e {
	case OrderAscending, OrderDescending:
		return true
	}
	return false
}

func (e Order) String() string {
	return string(e)
}

func (e *Order) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Order(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Order", str)
	}
	return nil
}

func (e Order) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderBy string

const (
	OrderByOcurredAt OrderBy = "OcurredAt"
)

var AllOrderBy = []OrderBy{
	OrderByOcurredAt,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByOcurredAt:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Specialties string

const (
	SpecialtiesOrthopedics       Specialties = "Orthopedics"
	SpecialtiesEmergencyMedicine Specialties = "EmergencyMedicine"
	SpecialtiesUnknown           Specialties = "Unknown"
)

var AllSpecialties = []Specialties{
	SpecialtiesOrthopedics,
	SpecialtiesEmergencyMedicine,
	SpecialtiesUnknown,
}

func (e Specialties) IsValid() bool {
	switch e {
	case SpecialtiesOrthopedics, SpecialtiesEmergencyMedicine, SpecialtiesUnknown:
		return true
	}
	return false
}

func (e Specialties) String() string {
	return string(e)
}

func (e *Specialties) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Specialties(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Specialties", str)
	}
	return nil
}

func (e Specialties) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurgeryOrderBy string

const (
	SurgeryOrderByDiagnoseName SurgeryOrderBy = "DiagnoseName"
	SurgeryOrderByMethodName   SurgeryOrderBy = "MethodName"
)

var AllSurgeryOrderBy = []SurgeryOrderBy{
	SurgeryOrderByDiagnoseName,
	SurgeryOrderByMethodName,
}

func (e SurgeryOrderBy) IsValid() bool {
	switch e {
	case SurgeryOrderByDiagnoseName, SurgeryOrderByMethodName:
		return true
	}
	return false
}

func (e SurgeryOrderBy) String() string {
	return string(e)
}

func (e *SurgeryOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurgeryOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurgeryOrderBy", str)
	}
	return nil
}

func (e SurgeryOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	UserTypeResident   UserType = "Resident"
	UserTypeSupervisor UserType = "Supervisor"
)

var AllUserType = []UserType{
	UserTypeResident,
	UserTypeSupervisor,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeResident, UserTypeSupervisor:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
