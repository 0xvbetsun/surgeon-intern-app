// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vbetsun/surgeon-intern-app/pkg/models"
)

// IRepo is an autogenerated mock type for the IRepo type
type IRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, practicalActivityType
func (_m *IRepo) Add(ctx context.Context, practicalActivityType *models.PracticalActivityType) (*models.PracticalActivityType, error) {
	ret := _m.Called(ctx, practicalActivityType)

	var r0 *models.PracticalActivityType
	if rf, ok := ret.Get(0).(func(context.Context, *models.PracticalActivityType) *models.PracticalActivityType); ok {
		r0 = rf(ctx, practicalActivityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PracticalActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.PracticalActivityType) error); ok {
		r1 = rf(ctx, practicalActivityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, practicalActivityTypeID
func (_m *IRepo) GetByID(ctx context.Context, practicalActivityTypeID int) (*models.PracticalActivityType, error) {
	ret := _m.Called(ctx, practicalActivityTypeID)

	var r0 *models.PracticalActivityType
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.PracticalActivityType); ok {
		r0 = rf(ctx, practicalActivityTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PracticalActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, practicalActivityTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields: ctx
func (_m *IRepo) ListAll(ctx context.Context) ([]*models.PracticalActivityType, error) {
	ret := _m.Called(ctx)

	var r0 []*models.PracticalActivityType
	if rf, ok := ret.Get(0).(func(context.Context) []*models.PracticalActivityType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PracticalActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByPracticalActivity provides a mock function with given fields: ctx, practicalStepId
func (_m *IRepo) ListByPracticalActivity(ctx context.Context, practicalStepId int) ([]*models.PracticalActivityType, error) {
	ret := _m.Called(ctx, practicalStepId)

	var r0 []*models.PracticalActivityType
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.PracticalActivityType); ok {
		r0 = rf(ctx, practicalStepId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PracticalActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, practicalStepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
