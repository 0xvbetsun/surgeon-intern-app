// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SurgeryMethod is an object representing the database table.
type SurgeryMethod struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	MethodName   string `boil:"method_name" json:"method_name" toml:"method_name" yaml:"method_name"`
	MethodCode   string `boil:"method_code" json:"method_code" toml:"method_code" yaml:"method_code"`
	ApproachName string `boil:"approach_name" json:"approach_name" toml:"approach_name" yaml:"approach_name"`

	R *surgeryMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L surgeryMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SurgeryMethodColumns = struct {
	ID           string
	MethodName   string
	MethodCode   string
	ApproachName string
}{
	ID:           "id",
	MethodName:   "method_name",
	MethodCode:   "method_code",
	ApproachName: "approach_name",
}

var SurgeryMethodTableColumns = struct {
	ID           string
	MethodName   string
	MethodCode   string
	ApproachName string
}{
	ID:           "surgery_methods.id",
	MethodName:   "surgery_methods.method_name",
	MethodCode:   "surgery_methods.method_code",
	ApproachName: "surgery_methods.approach_name",
}

// Generated where

var SurgeryMethodWhere = struct {
	ID           whereHelperstring
	MethodName   whereHelperstring
	MethodCode   whereHelperstring
	ApproachName whereHelperstring
}{
	ID:           whereHelperstring{field: "\"surgery_methods\".\"id\""},
	MethodName:   whereHelperstring{field: "\"surgery_methods\".\"method_name\""},
	MethodCode:   whereHelperstring{field: "\"surgery_methods\".\"method_code\""},
	ApproachName: whereHelperstring{field: "\"surgery_methods\".\"approach_name\""},
}

// SurgeryMethodRels is where relationship names are stored.
var SurgeryMethodRels = struct {
	MethodSurgeries string
}{
	MethodSurgeries: "MethodSurgeries",
}

// surgeryMethodR is where relationships are stored.
type surgeryMethodR struct {
	MethodSurgeries SurgerySlice `boil:"MethodSurgeries" json:"MethodSurgeries" toml:"MethodSurgeries" yaml:"MethodSurgeries"`
}

// NewStruct creates a new relationship struct
func (*surgeryMethodR) NewStruct() *surgeryMethodR {
	return &surgeryMethodR{}
}

// surgeryMethodL is where Load methods for each relationship are stored.
type surgeryMethodL struct{}

var (
	surgeryMethodAllColumns            = []string{"id", "method_name", "method_code", "approach_name"}
	surgeryMethodColumnsWithoutDefault = []string{}
	surgeryMethodColumnsWithDefault    = []string{"id", "method_name", "method_code", "approach_name"}
	surgeryMethodPrimaryKeyColumns     = []string{"id"}
)

type (
	// SurgeryMethodSlice is an alias for a slice of pointers to SurgeryMethod.
	// This should almost always be used instead of []SurgeryMethod.
	SurgeryMethodSlice []*SurgeryMethod
	// SurgeryMethodHook is the signature for custom SurgeryMethod hook methods
	SurgeryMethodHook func(context.Context, boil.ContextExecutor, *SurgeryMethod) error

	surgeryMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	surgeryMethodType                 = reflect.TypeOf(&SurgeryMethod{})
	surgeryMethodMapping              = queries.MakeStructMapping(surgeryMethodType)
	surgeryMethodPrimaryKeyMapping, _ = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, surgeryMethodPrimaryKeyColumns)
	surgeryMethodInsertCacheMut       sync.RWMutex
	surgeryMethodInsertCache          = make(map[string]insertCache)
	surgeryMethodUpdateCacheMut       sync.RWMutex
	surgeryMethodUpdateCache          = make(map[string]updateCache)
	surgeryMethodUpsertCacheMut       sync.RWMutex
	surgeryMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var surgeryMethodBeforeInsertHooks []SurgeryMethodHook
var surgeryMethodBeforeUpdateHooks []SurgeryMethodHook
var surgeryMethodBeforeDeleteHooks []SurgeryMethodHook
var surgeryMethodBeforeUpsertHooks []SurgeryMethodHook

var surgeryMethodAfterInsertHooks []SurgeryMethodHook
var surgeryMethodAfterSelectHooks []SurgeryMethodHook
var surgeryMethodAfterUpdateHooks []SurgeryMethodHook
var surgeryMethodAfterDeleteHooks []SurgeryMethodHook
var surgeryMethodAfterUpsertHooks []SurgeryMethodHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SurgeryMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SurgeryMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SurgeryMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SurgeryMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SurgeryMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SurgeryMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SurgeryMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SurgeryMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SurgeryMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSurgeryMethodHook registers your hook function for all future operations.
func AddSurgeryMethodHook(hookPoint boil.HookPoint, surgeryMethodHook SurgeryMethodHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		surgeryMethodBeforeInsertHooks = append(surgeryMethodBeforeInsertHooks, surgeryMethodHook)
	case boil.BeforeUpdateHook:
		surgeryMethodBeforeUpdateHooks = append(surgeryMethodBeforeUpdateHooks, surgeryMethodHook)
	case boil.BeforeDeleteHook:
		surgeryMethodBeforeDeleteHooks = append(surgeryMethodBeforeDeleteHooks, surgeryMethodHook)
	case boil.BeforeUpsertHook:
		surgeryMethodBeforeUpsertHooks = append(surgeryMethodBeforeUpsertHooks, surgeryMethodHook)
	case boil.AfterInsertHook:
		surgeryMethodAfterInsertHooks = append(surgeryMethodAfterInsertHooks, surgeryMethodHook)
	case boil.AfterSelectHook:
		surgeryMethodAfterSelectHooks = append(surgeryMethodAfterSelectHooks, surgeryMethodHook)
	case boil.AfterUpdateHook:
		surgeryMethodAfterUpdateHooks = append(surgeryMethodAfterUpdateHooks, surgeryMethodHook)
	case boil.AfterDeleteHook:
		surgeryMethodAfterDeleteHooks = append(surgeryMethodAfterDeleteHooks, surgeryMethodHook)
	case boil.AfterUpsertHook:
		surgeryMethodAfterUpsertHooks = append(surgeryMethodAfterUpsertHooks, surgeryMethodHook)
	}
}

// One returns a single surgeryMethod record from the query.
func (q surgeryMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SurgeryMethod, error) {
	o := &SurgeryMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for surgery_methods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SurgeryMethod records from the query.
func (q surgeryMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (SurgeryMethodSlice, error) {
	var o []*SurgeryMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SurgeryMethod slice")
	}

	if len(surgeryMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SurgeryMethod records in the query.
func (q surgeryMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count surgery_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q surgeryMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if surgery_methods exists")
	}

	return count > 0, nil
}

// MethodSurgeries retrieves all the surgery's Surgeries with an executor via method_id column.
func (o *SurgeryMethod) MethodSurgeries(mods ...qm.QueryMod) surgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"surgeries\".\"method_id\"=?", o.ID),
	)

	query := Surgeries(queryMods...)
	queries.SetFrom(query.Query, "\"surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"surgeries\".*"})
	}

	return query
}

// LoadMethodSurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (surgeryMethodL) LoadMethodSurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgeryMethod interface{}, mods queries.Applicator) error {
	var slice []*SurgeryMethod
	var object *SurgeryMethod

	if singular {
		object = maybeSurgeryMethod.(*SurgeryMethod)
	} else {
		slice = *maybeSurgeryMethod.(*[]*SurgeryMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryMethodR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgeries`),
		qm.WhereIn(`surgeries.method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load surgeries")
	}

	var resultSlice []*Surgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgeries")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MethodSurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &surgeryR{}
			}
			foreign.R.Method = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MethodID {
				local.R.MethodSurgeries = append(local.R.MethodSurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &surgeryR{}
				}
				foreign.R.Method = local
				break
			}
		}
	}

	return nil
}

// AddMethodSurgeries adds the given related objects to the existing relationships
// of the surgery_method, optionally inserting them as new records.
// Appends related to o.R.MethodSurgeries.
// Sets related.R.Method appropriately.
func (o *SurgeryMethod) AddMethodSurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Surgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MethodID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"method_id"}),
				strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MethodID = o.ID
		}
	}

	if o.R == nil {
		o.R = &surgeryMethodR{
			MethodSurgeries: related,
		}
	} else {
		o.R.MethodSurgeries = append(o.R.MethodSurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &surgeryR{
				Method: o,
			}
		} else {
			rel.R.Method = o
		}
	}
	return nil
}

// SurgeryMethods retrieves all the records using an executor.
func SurgeryMethods(mods ...qm.QueryMod) surgeryMethodQuery {
	mods = append(mods, qm.From("\"surgery_methods\""))
	return surgeryMethodQuery{NewQuery(mods...)}
}

// FindSurgeryMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSurgeryMethod(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SurgeryMethod, error) {
	surgeryMethodObj := &SurgeryMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"surgery_methods\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, surgeryMethodObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from surgery_methods")
	}

	if err = surgeryMethodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return surgeryMethodObj, err
	}

	return surgeryMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SurgeryMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgery_methods provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	surgeryMethodInsertCacheMut.RLock()
	cache, cached := surgeryMethodInsertCache[key]
	surgeryMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			surgeryMethodAllColumns,
			surgeryMethodColumnsWithDefault,
			surgeryMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"surgery_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"surgery_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into surgery_methods")
	}

	if !cached {
		surgeryMethodInsertCacheMut.Lock()
		surgeryMethodInsertCache[key] = cache
		surgeryMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SurgeryMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SurgeryMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	surgeryMethodUpdateCacheMut.RLock()
	cache, cached := surgeryMethodUpdateCache[key]
	surgeryMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			surgeryMethodAllColumns,
			surgeryMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update surgery_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"surgery_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, surgeryMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, append(wl, surgeryMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update surgery_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for surgery_methods")
	}

	if !cached {
		surgeryMethodUpdateCacheMut.Lock()
		surgeryMethodUpdateCache[key] = cache
		surgeryMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q surgeryMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for surgery_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for surgery_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SurgeryMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"surgery_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, surgeryMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in surgeryMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all surgeryMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SurgeryMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgery_methods provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	surgeryMethodUpsertCacheMut.RLock()
	cache, cached := surgeryMethodUpsertCache[key]
	surgeryMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			surgeryMethodAllColumns,
			surgeryMethodColumnsWithDefault,
			surgeryMethodColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			surgeryMethodAllColumns,
			surgeryMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert surgery_methods, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(surgeryMethodPrimaryKeyColumns))
			copy(conflict, surgeryMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"surgery_methods\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(surgeryMethodType, surgeryMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert surgery_methods")
	}

	if !cached {
		surgeryMethodUpsertCacheMut.Lock()
		surgeryMethodUpsertCache[key] = cache
		surgeryMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SurgeryMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SurgeryMethod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SurgeryMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), surgeryMethodPrimaryKeyMapping)
	sql := "DELETE FROM \"surgery_methods\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from surgery_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for surgery_methods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q surgeryMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no surgeryMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgery_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgery_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SurgeryMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(surgeryMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"surgery_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryMethodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgeryMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgery_methods")
	}

	if len(surgeryMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SurgeryMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSurgeryMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SurgeryMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SurgeryMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"surgery_methods\".* FROM \"surgery_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SurgeryMethodSlice")
	}

	*o = slice

	return nil
}

// SurgeryMethodExists checks if the SurgeryMethod row exists.
func SurgeryMethodExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"surgery_methods\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if surgery_methods exists")
	}

	return exists, nil
}
