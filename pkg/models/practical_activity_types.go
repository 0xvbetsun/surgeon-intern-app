// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PracticalActivityType is an object representing the database table.
type PracticalActivityType struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName string    `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *practicalActivityTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L practicalActivityTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PracticalActivityTypeColumns = struct {
	ID          string
	DisplayName string
	Name        string
	CreatedAt   string
}{
	ID:          "id",
	DisplayName: "display_name",
	Name:        "name",
	CreatedAt:   "created_at",
}

var PracticalActivityTypeTableColumns = struct {
	ID          string
	DisplayName string
	Name        string
	CreatedAt   string
}{
	ID:          "practical_activity_types.id",
	DisplayName: "practical_activity_types.display_name",
	Name:        "practical_activity_types.name",
	CreatedAt:   "practical_activity_types.created_at",
}

// Generated where

var PracticalActivityTypeWhere = struct {
	ID          whereHelperint
	DisplayName whereHelperstring
	Name        whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "\"practical_activity_types\".\"id\""},
	DisplayName: whereHelperstring{field: "\"practical_activity_types\".\"display_name\""},
	Name:        whereHelperstring{field: "\"practical_activity_types\".\"name\""},
	CreatedAt:   whereHelpertime_Time{field: "\"practical_activity_types\".\"created_at\""},
}

// PracticalActivityTypeRels is where relationship names are stored.
var PracticalActivityTypeRels = struct {
	Examinations                string
	OrthopedicSurgeryActivities string
	Specialties                 string
}{
	Examinations:                "Examinations",
	OrthopedicSurgeryActivities: "OrthopedicSurgeryActivities",
	Specialties:                 "Specialties",
}

// practicalActivityTypeR is where relationships are stored.
type practicalActivityTypeR struct {
	Examinations                ExaminationSlice               `boil:"Examinations" json:"Examinations" toml:"Examinations" yaml:"Examinations"`
	OrthopedicSurgeryActivities OrthopedicSurgeryActivitySlice `boil:"OrthopedicSurgeryActivities" json:"OrthopedicSurgeryActivities" toml:"OrthopedicSurgeryActivities" yaml:"OrthopedicSurgeryActivities"`
	Specialties                 SpecialtySlice                 `boil:"Specialties" json:"Specialties" toml:"Specialties" yaml:"Specialties"`
}

// NewStruct creates a new relationship struct
func (*practicalActivityTypeR) NewStruct() *practicalActivityTypeR {
	return &practicalActivityTypeR{}
}

// practicalActivityTypeL is where Load methods for each relationship are stored.
type practicalActivityTypeL struct{}

var (
	practicalActivityTypeAllColumns            = []string{"id", "display_name", "name", "created_at"}
	practicalActivityTypeColumnsWithoutDefault = []string{"display_name", "name"}
	practicalActivityTypeColumnsWithDefault    = []string{"id", "created_at"}
	practicalActivityTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// PracticalActivityTypeSlice is an alias for a slice of pointers to PracticalActivityType.
	// This should almost always be used instead of []PracticalActivityType.
	PracticalActivityTypeSlice []*PracticalActivityType
	// PracticalActivityTypeHook is the signature for custom PracticalActivityType hook methods
	PracticalActivityTypeHook func(context.Context, boil.ContextExecutor, *PracticalActivityType) error

	practicalActivityTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	practicalActivityTypeType                 = reflect.TypeOf(&PracticalActivityType{})
	practicalActivityTypeMapping              = queries.MakeStructMapping(practicalActivityTypeType)
	practicalActivityTypePrimaryKeyMapping, _ = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, practicalActivityTypePrimaryKeyColumns)
	practicalActivityTypeInsertCacheMut       sync.RWMutex
	practicalActivityTypeInsertCache          = make(map[string]insertCache)
	practicalActivityTypeUpdateCacheMut       sync.RWMutex
	practicalActivityTypeUpdateCache          = make(map[string]updateCache)
	practicalActivityTypeUpsertCacheMut       sync.RWMutex
	practicalActivityTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var practicalActivityTypeBeforeInsertHooks []PracticalActivityTypeHook
var practicalActivityTypeBeforeUpdateHooks []PracticalActivityTypeHook
var practicalActivityTypeBeforeDeleteHooks []PracticalActivityTypeHook
var practicalActivityTypeBeforeUpsertHooks []PracticalActivityTypeHook

var practicalActivityTypeAfterInsertHooks []PracticalActivityTypeHook
var practicalActivityTypeAfterSelectHooks []PracticalActivityTypeHook
var practicalActivityTypeAfterUpdateHooks []PracticalActivityTypeHook
var practicalActivityTypeAfterDeleteHooks []PracticalActivityTypeHook
var practicalActivityTypeAfterUpsertHooks []PracticalActivityTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PracticalActivityType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PracticalActivityType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PracticalActivityType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PracticalActivityType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PracticalActivityType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PracticalActivityType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PracticalActivityType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PracticalActivityType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PracticalActivityType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range practicalActivityTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPracticalActivityTypeHook registers your hook function for all future operations.
func AddPracticalActivityTypeHook(hookPoint boil.HookPoint, practicalActivityTypeHook PracticalActivityTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		practicalActivityTypeBeforeInsertHooks = append(practicalActivityTypeBeforeInsertHooks, practicalActivityTypeHook)
	case boil.BeforeUpdateHook:
		practicalActivityTypeBeforeUpdateHooks = append(practicalActivityTypeBeforeUpdateHooks, practicalActivityTypeHook)
	case boil.BeforeDeleteHook:
		practicalActivityTypeBeforeDeleteHooks = append(practicalActivityTypeBeforeDeleteHooks, practicalActivityTypeHook)
	case boil.BeforeUpsertHook:
		practicalActivityTypeBeforeUpsertHooks = append(practicalActivityTypeBeforeUpsertHooks, practicalActivityTypeHook)
	case boil.AfterInsertHook:
		practicalActivityTypeAfterInsertHooks = append(practicalActivityTypeAfterInsertHooks, practicalActivityTypeHook)
	case boil.AfterSelectHook:
		practicalActivityTypeAfterSelectHooks = append(practicalActivityTypeAfterSelectHooks, practicalActivityTypeHook)
	case boil.AfterUpdateHook:
		practicalActivityTypeAfterUpdateHooks = append(practicalActivityTypeAfterUpdateHooks, practicalActivityTypeHook)
	case boil.AfterDeleteHook:
		practicalActivityTypeAfterDeleteHooks = append(practicalActivityTypeAfterDeleteHooks, practicalActivityTypeHook)
	case boil.AfterUpsertHook:
		practicalActivityTypeAfterUpsertHooks = append(practicalActivityTypeAfterUpsertHooks, practicalActivityTypeHook)
	}
}

// One returns a single practicalActivityType record from the query.
func (q practicalActivityTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PracticalActivityType, error) {
	o := &PracticalActivityType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for practical_activity_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PracticalActivityType records from the query.
func (q practicalActivityTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PracticalActivityTypeSlice, error) {
	var o []*PracticalActivityType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PracticalActivityType slice")
	}

	if len(practicalActivityTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PracticalActivityType records in the query.
func (q practicalActivityTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count practical_activity_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q practicalActivityTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if practical_activity_types exists")
	}

	return count > 0, nil
}

// Examinations retrieves all the examination's Examinations with an executor.
func (o *PracticalActivityType) Examinations(mods ...qm.QueryMod) examinationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations\".\"practical_activity_type_id\"=?", o.ID),
	)

	query := Examinations(queryMods...)
	queries.SetFrom(query.Query, "\"examinations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations\".*"})
	}

	return query
}

// OrthopedicSurgeryActivities retrieves all the orthopedic_surgery_activity's OrthopedicSurgeryActivities with an executor.
func (o *PracticalActivityType) OrthopedicSurgeryActivities(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities\".\"practical_activity_type_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities\".*"})
	}

	return query
}

// Specialties retrieves all the specialty's Specialties with an executor.
func (o *PracticalActivityType) Specialties(mods ...qm.QueryMod) specialtyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"specialties_activity_types\" on \"specialties\".\"id\" = \"specialties_activity_types\".\"specialty_id\""),
		qm.Where("\"specialties_activity_types\".\"activity_type_id\"=?", o.ID),
	)

	query := Specialties(queryMods...)
	queries.SetFrom(query.Query, "\"specialties\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"specialties\".*"})
	}

	return query
}

// LoadExaminations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (practicalActivityTypeL) LoadExaminations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePracticalActivityType interface{}, mods queries.Applicator) error {
	var slice []*PracticalActivityType
	var object *PracticalActivityType

	if singular {
		object = maybePracticalActivityType.(*PracticalActivityType)
	} else {
		slice = *maybePracticalActivityType.(*[]*PracticalActivityType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &practicalActivityTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &practicalActivityTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations`),
		qm.WhereIn(`examinations.practical_activity_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Examinations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationR{}
			}
			foreign.R.PracticalActivityType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PracticalActivityTypeID {
				local.R.Examinations = append(local.R.Examinations, foreign)
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.PracticalActivityType = local
				break
			}
		}
	}

	return nil
}

// LoadOrthopedicSurgeryActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (practicalActivityTypeL) LoadOrthopedicSurgeryActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybePracticalActivityType interface{}, mods queries.Applicator) error {
	var slice []*PracticalActivityType
	var object *PracticalActivityType

	if singular {
		object = maybePracticalActivityType.(*PracticalActivityType)
	} else {
		slice = *maybePracticalActivityType.(*[]*PracticalActivityType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &practicalActivityTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &practicalActivityTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.practical_activity_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(orthopedicSurgeryActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrthopedicSurgeryActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivityR{}
			}
			foreign.R.PracticalActivityType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PracticalActivityTypeID {
				local.R.OrthopedicSurgeryActivities = append(local.R.OrthopedicSurgeryActivities, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.PracticalActivityType = local
				break
			}
		}
	}

	return nil
}

// LoadSpecialties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (practicalActivityTypeL) LoadSpecialties(ctx context.Context, e boil.ContextExecutor, singular bool, maybePracticalActivityType interface{}, mods queries.Applicator) error {
	var slice []*PracticalActivityType
	var object *PracticalActivityType

	if singular {
		object = maybePracticalActivityType.(*PracticalActivityType)
	} else {
		slice = *maybePracticalActivityType.(*[]*PracticalActivityType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &practicalActivityTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &practicalActivityTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"specialties\".id, \"specialties\".name, \"a\".\"activity_type_id\""),
		qm.From("\"specialties\""),
		qm.InnerJoin("\"specialties_activity_types\" as \"a\" on \"specialties\".\"id\" = \"a\".\"specialty_id\""),
		qm.WhereIn("\"a\".\"activity_type_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load specialties")
	}

	var resultSlice []*Specialty

	var localJoinCols []int
	for results.Next() {
		one := new(Specialty)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for specialties")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice specialties")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on specialties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for specialties")
	}

	if len(specialtyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Specialties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &specialtyR{}
			}
			foreign.R.ActivityTypePracticalActivityTypes = append(foreign.R.ActivityTypePracticalActivityTypes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Specialties = append(local.R.Specialties, foreign)
				if foreign.R == nil {
					foreign.R = &specialtyR{}
				}
				foreign.R.ActivityTypePracticalActivityTypes = append(foreign.R.ActivityTypePracticalActivityTypes, local)
				break
			}
		}
	}

	return nil
}

// AddExaminations adds the given related objects to the existing relationships
// of the practical_activity_type, optionally inserting them as new records.
// Appends related to o.R.Examinations.
// Sets related.R.PracticalActivityType appropriately.
func (o *PracticalActivityType) AddExaminations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Examination) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PracticalActivityTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"practical_activity_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PracticalActivityTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &practicalActivityTypeR{
			Examinations: related,
		}
	} else {
		o.R.Examinations = append(o.R.Examinations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationR{
				PracticalActivityType: o,
			}
		} else {
			rel.R.PracticalActivityType = o
		}
	}
	return nil
}

// AddOrthopedicSurgeryActivities adds the given related objects to the existing relationships
// of the practical_activity_type, optionally inserting them as new records.
// Appends related to o.R.OrthopedicSurgeryActivities.
// Sets related.R.PracticalActivityType appropriately.
func (o *PracticalActivityType) AddOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PracticalActivityTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"practical_activity_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PracticalActivityTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &practicalActivityTypeR{
			OrthopedicSurgeryActivities: related,
		}
	} else {
		o.R.OrthopedicSurgeryActivities = append(o.R.OrthopedicSurgeryActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivityR{
				PracticalActivityType: o,
			}
		} else {
			rel.R.PracticalActivityType = o
		}
	}
	return nil
}

// AddSpecialties adds the given related objects to the existing relationships
// of the practical_activity_type, optionally inserting them as new records.
// Appends related to o.R.Specialties.
// Sets related.R.ActivityTypePracticalActivityTypes appropriately.
func (o *PracticalActivityType) AddSpecialties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Specialty) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"specialties_activity_types\" (\"activity_type_id\", \"specialty_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &practicalActivityTypeR{
			Specialties: related,
		}
	} else {
		o.R.Specialties = append(o.R.Specialties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &specialtyR{
				ActivityTypePracticalActivityTypes: PracticalActivityTypeSlice{o},
			}
		} else {
			rel.R.ActivityTypePracticalActivityTypes = append(rel.R.ActivityTypePracticalActivityTypes, o)
		}
	}
	return nil
}

// SetSpecialties removes all previously related items of the
// practical_activity_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ActivityTypePracticalActivityTypes's Specialties accordingly.
// Replaces o.R.Specialties with related.
// Sets related.R.ActivityTypePracticalActivityTypes's Specialties accordingly.
func (o *PracticalActivityType) SetSpecialties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Specialty) error {
	query := "delete from \"specialties_activity_types\" where \"activity_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSpecialtiesFromActivityTypePracticalActivityTypesSlice(o, related)
	if o.R != nil {
		o.R.Specialties = nil
	}
	return o.AddSpecialties(ctx, exec, insert, related...)
}

// RemoveSpecialties relationships from objects passed in.
// Removes related items from R.Specialties (uses pointer comparison, removal does not keep order)
// Sets related.R.ActivityTypePracticalActivityTypes.
func (o *PracticalActivityType) RemoveSpecialties(ctx context.Context, exec boil.ContextExecutor, related ...*Specialty) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"specialties_activity_types\" where \"activity_type_id\" = $1 and \"specialty_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSpecialtiesFromActivityTypePracticalActivityTypesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Specialties {
			if rel != ri {
				continue
			}

			ln := len(o.R.Specialties)
			if ln > 1 && i < ln-1 {
				o.R.Specialties[i] = o.R.Specialties[ln-1]
			}
			o.R.Specialties = o.R.Specialties[:ln-1]
			break
		}
	}

	return nil
}

func removeSpecialtiesFromActivityTypePracticalActivityTypesSlice(o *PracticalActivityType, related []*Specialty) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ActivityTypePracticalActivityTypes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ActivityTypePracticalActivityTypes)
			if ln > 1 && i < ln-1 {
				rel.R.ActivityTypePracticalActivityTypes[i] = rel.R.ActivityTypePracticalActivityTypes[ln-1]
			}
			rel.R.ActivityTypePracticalActivityTypes = rel.R.ActivityTypePracticalActivityTypes[:ln-1]
			break
		}
	}
}

// PracticalActivityTypes retrieves all the records using an executor.
func PracticalActivityTypes(mods ...qm.QueryMod) practicalActivityTypeQuery {
	mods = append(mods, qm.From("\"practical_activity_types\""))
	return practicalActivityTypeQuery{NewQuery(mods...)}
}

// FindPracticalActivityType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPracticalActivityType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PracticalActivityType, error) {
	practicalActivityTypeObj := &PracticalActivityType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"practical_activity_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, practicalActivityTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from practical_activity_types")
	}

	if err = practicalActivityTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return practicalActivityTypeObj, err
	}

	return practicalActivityTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PracticalActivityType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no practical_activity_types provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(practicalActivityTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	practicalActivityTypeInsertCacheMut.RLock()
	cache, cached := practicalActivityTypeInsertCache[key]
	practicalActivityTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			practicalActivityTypeAllColumns,
			practicalActivityTypeColumnsWithDefault,
			practicalActivityTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"practical_activity_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"practical_activity_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into practical_activity_types")
	}

	if !cached {
		practicalActivityTypeInsertCacheMut.Lock()
		practicalActivityTypeInsertCache[key] = cache
		practicalActivityTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PracticalActivityType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PracticalActivityType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	practicalActivityTypeUpdateCacheMut.RLock()
	cache, cached := practicalActivityTypeUpdateCache[key]
	practicalActivityTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			practicalActivityTypeAllColumns,
			practicalActivityTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update practical_activity_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"practical_activity_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, practicalActivityTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, append(wl, practicalActivityTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update practical_activity_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for practical_activity_types")
	}

	if !cached {
		practicalActivityTypeUpdateCacheMut.Lock()
		practicalActivityTypeUpdateCache[key] = cache
		practicalActivityTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q practicalActivityTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for practical_activity_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for practical_activity_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PracticalActivityTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), practicalActivityTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"practical_activity_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, practicalActivityTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in practicalActivityType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all practicalActivityType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PracticalActivityType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no practical_activity_types provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(practicalActivityTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	practicalActivityTypeUpsertCacheMut.RLock()
	cache, cached := practicalActivityTypeUpsertCache[key]
	practicalActivityTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			practicalActivityTypeAllColumns,
			practicalActivityTypeColumnsWithDefault,
			practicalActivityTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			practicalActivityTypeAllColumns,
			practicalActivityTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert practical_activity_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(practicalActivityTypePrimaryKeyColumns))
			copy(conflict, practicalActivityTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"practical_activity_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(practicalActivityTypeType, practicalActivityTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert practical_activity_types")
	}

	if !cached {
		practicalActivityTypeUpsertCacheMut.Lock()
		practicalActivityTypeUpsertCache[key] = cache
		practicalActivityTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PracticalActivityType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PracticalActivityType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PracticalActivityType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), practicalActivityTypePrimaryKeyMapping)
	sql := "DELETE FROM \"practical_activity_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from practical_activity_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for practical_activity_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q practicalActivityTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no practicalActivityTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from practical_activity_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for practical_activity_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PracticalActivityTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(practicalActivityTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), practicalActivityTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"practical_activity_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, practicalActivityTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from practicalActivityType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for practical_activity_types")
	}

	if len(practicalActivityTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PracticalActivityType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPracticalActivityType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PracticalActivityTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PracticalActivityTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), practicalActivityTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"practical_activity_types\".* FROM \"practical_activity_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, practicalActivityTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PracticalActivityTypeSlice")
	}

	*o = slice

	return nil
}

// PracticalActivityTypeExists checks if the PracticalActivityType row exists.
func PracticalActivityTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"practical_activity_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if practical_activity_types exists")
	}

	return exists, nil
}
