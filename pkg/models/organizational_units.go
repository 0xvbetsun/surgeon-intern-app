// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OrganizationalUnit is an object representing the database table.
type OrganizationalUnit struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ParentID    null.String `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Metadata    types.JSON  `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	TypeID      string      `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`

	R *organizationalUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationalUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationalUnitColumns = struct {
	ID          string
	DisplayName string
	CreatedAt   string
	DeletedAt   string
	ParentID    string
	Metadata    string
	TypeID      string
}{
	ID:          "id",
	DisplayName: "display_name",
	CreatedAt:   "created_at",
	DeletedAt:   "deleted_at",
	ParentID:    "parent_id",
	Metadata:    "metadata",
	TypeID:      "type_id",
}

var OrganizationalUnitTableColumns = struct {
	ID          string
	DisplayName string
	CreatedAt   string
	DeletedAt   string
	ParentID    string
	Metadata    string
	TypeID      string
}{
	ID:          "organizational_units.id",
	DisplayName: "organizational_units.display_name",
	CreatedAt:   "organizational_units.created_at",
	DeletedAt:   "organizational_units.deleted_at",
	ParentID:    "organizational_units.parent_id",
	Metadata:    "organizational_units.metadata",
	TypeID:      "organizational_units.type_id",
}

// Generated where

var OrganizationalUnitWhere = struct {
	ID          whereHelperstring
	DisplayName whereHelperstring
	CreatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	ParentID    whereHelpernull_String
	Metadata    whereHelpertypes_JSON
	TypeID      whereHelperstring
}{
	ID:          whereHelperstring{field: "\"organizational_units\".\"id\""},
	DisplayName: whereHelperstring{field: "\"organizational_units\".\"display_name\""},
	CreatedAt:   whereHelpertime_Time{field: "\"organizational_units\".\"created_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"organizational_units\".\"deleted_at\""},
	ParentID:    whereHelpernull_String{field: "\"organizational_units\".\"parent_id\""},
	Metadata:    whereHelpertypes_JSON{field: "\"organizational_units\".\"metadata\""},
	TypeID:      whereHelperstring{field: "\"organizational_units\".\"type_id\""},
}

// OrganizationalUnitRels is where relationship names are stored.
var OrganizationalUnitRels = struct {
	Parent                          string
	Type                            string
	DepartmentDopsEvaluations       string
	DepartmentEvaluationForms       string
	DepartmentExaminations          string
	DepartmentMiniCexAreas          string
	DepartmentMiniCexEvaluations    string
	Specialties                     string
	ParentOrganizationalUnits       string
	Procedures                      string
	UnitUserOrganizationalUnitRoles string
}{
	Parent:                          "Parent",
	Type:                            "Type",
	DepartmentDopsEvaluations:       "DepartmentDopsEvaluations",
	DepartmentEvaluationForms:       "DepartmentEvaluationForms",
	DepartmentExaminations:          "DepartmentExaminations",
	DepartmentMiniCexAreas:          "DepartmentMiniCexAreas",
	DepartmentMiniCexEvaluations:    "DepartmentMiniCexEvaluations",
	Specialties:                     "Specialties",
	ParentOrganizationalUnits:       "ParentOrganizationalUnits",
	Procedures:                      "Procedures",
	UnitUserOrganizationalUnitRoles: "UnitUserOrganizationalUnitRoles",
}

// organizationalUnitR is where relationships are stored.
type organizationalUnitR struct {
	Parent                          *OrganizationalUnit             `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	Type                            *OrganizationalUnitType         `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
	DepartmentDopsEvaluations       DopsEvaluationSlice             `boil:"DepartmentDopsEvaluations" json:"DepartmentDopsEvaluations" toml:"DepartmentDopsEvaluations" yaml:"DepartmentDopsEvaluations"`
	DepartmentEvaluationForms       EvaluationFormSlice             `boil:"DepartmentEvaluationForms" json:"DepartmentEvaluationForms" toml:"DepartmentEvaluationForms" yaml:"DepartmentEvaluationForms"`
	DepartmentExaminations          ExaminationSlice                `boil:"DepartmentExaminations" json:"DepartmentExaminations" toml:"DepartmentExaminations" yaml:"DepartmentExaminations"`
	DepartmentMiniCexAreas          MiniCexAreaSlice                `boil:"DepartmentMiniCexAreas" json:"DepartmentMiniCexAreas" toml:"DepartmentMiniCexAreas" yaml:"DepartmentMiniCexAreas"`
	DepartmentMiniCexEvaluations    MiniCexEvaluationSlice          `boil:"DepartmentMiniCexEvaluations" json:"DepartmentMiniCexEvaluations" toml:"DepartmentMiniCexEvaluations" yaml:"DepartmentMiniCexEvaluations"`
	Specialties                     SpecialtySlice                  `boil:"Specialties" json:"Specialties" toml:"Specialties" yaml:"Specialties"`
	ParentOrganizationalUnits       OrganizationalUnitSlice         `boil:"ParentOrganizationalUnits" json:"ParentOrganizationalUnits" toml:"ParentOrganizationalUnits" yaml:"ParentOrganizationalUnits"`
	Procedures                      ProcedureSlice                  `boil:"Procedures" json:"Procedures" toml:"Procedures" yaml:"Procedures"`
	UnitUserOrganizationalUnitRoles UserOrganizationalUnitRoleSlice `boil:"UnitUserOrganizationalUnitRoles" json:"UnitUserOrganizationalUnitRoles" toml:"UnitUserOrganizationalUnitRoles" yaml:"UnitUserOrganizationalUnitRoles"`
}

// NewStruct creates a new relationship struct
func (*organizationalUnitR) NewStruct() *organizationalUnitR {
	return &organizationalUnitR{}
}

// organizationalUnitL is where Load methods for each relationship are stored.
type organizationalUnitL struct{}

var (
	organizationalUnitAllColumns            = []string{"id", "display_name", "created_at", "deleted_at", "parent_id", "metadata", "type_id"}
	organizationalUnitColumnsWithoutDefault = []string{"deleted_at", "parent_id", "type_id"}
	organizationalUnitColumnsWithDefault    = []string{"id", "display_name", "created_at", "metadata"}
	organizationalUnitPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationalUnitSlice is an alias for a slice of pointers to OrganizationalUnit.
	// This should almost always be used instead of []OrganizationalUnit.
	OrganizationalUnitSlice []*OrganizationalUnit
	// OrganizationalUnitHook is the signature for custom OrganizationalUnit hook methods
	OrganizationalUnitHook func(context.Context, boil.ContextExecutor, *OrganizationalUnit) error

	organizationalUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationalUnitType                 = reflect.TypeOf(&OrganizationalUnit{})
	organizationalUnitMapping              = queries.MakeStructMapping(organizationalUnitType)
	organizationalUnitPrimaryKeyMapping, _ = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, organizationalUnitPrimaryKeyColumns)
	organizationalUnitInsertCacheMut       sync.RWMutex
	organizationalUnitInsertCache          = make(map[string]insertCache)
	organizationalUnitUpdateCacheMut       sync.RWMutex
	organizationalUnitUpdateCache          = make(map[string]updateCache)
	organizationalUnitUpsertCacheMut       sync.RWMutex
	organizationalUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationalUnitBeforeInsertHooks []OrganizationalUnitHook
var organizationalUnitBeforeUpdateHooks []OrganizationalUnitHook
var organizationalUnitBeforeDeleteHooks []OrganizationalUnitHook
var organizationalUnitBeforeUpsertHooks []OrganizationalUnitHook

var organizationalUnitAfterInsertHooks []OrganizationalUnitHook
var organizationalUnitAfterSelectHooks []OrganizationalUnitHook
var organizationalUnitAfterUpdateHooks []OrganizationalUnitHook
var organizationalUnitAfterDeleteHooks []OrganizationalUnitHook
var organizationalUnitAfterUpsertHooks []OrganizationalUnitHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationalUnit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationalUnit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationalUnit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationalUnit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationalUnit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationalUnit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationalUnit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationalUnit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationalUnit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationalUnitHook registers your hook function for all future operations.
func AddOrganizationalUnitHook(hookPoint boil.HookPoint, organizationalUnitHook OrganizationalUnitHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationalUnitBeforeInsertHooks = append(organizationalUnitBeforeInsertHooks, organizationalUnitHook)
	case boil.BeforeUpdateHook:
		organizationalUnitBeforeUpdateHooks = append(organizationalUnitBeforeUpdateHooks, organizationalUnitHook)
	case boil.BeforeDeleteHook:
		organizationalUnitBeforeDeleteHooks = append(organizationalUnitBeforeDeleteHooks, organizationalUnitHook)
	case boil.BeforeUpsertHook:
		organizationalUnitBeforeUpsertHooks = append(organizationalUnitBeforeUpsertHooks, organizationalUnitHook)
	case boil.AfterInsertHook:
		organizationalUnitAfterInsertHooks = append(organizationalUnitAfterInsertHooks, organizationalUnitHook)
	case boil.AfterSelectHook:
		organizationalUnitAfterSelectHooks = append(organizationalUnitAfterSelectHooks, organizationalUnitHook)
	case boil.AfterUpdateHook:
		organizationalUnitAfterUpdateHooks = append(organizationalUnitAfterUpdateHooks, organizationalUnitHook)
	case boil.AfterDeleteHook:
		organizationalUnitAfterDeleteHooks = append(organizationalUnitAfterDeleteHooks, organizationalUnitHook)
	case boil.AfterUpsertHook:
		organizationalUnitAfterUpsertHooks = append(organizationalUnitAfterUpsertHooks, organizationalUnitHook)
	}
}

// One returns a single organizationalUnit record from the query.
func (q organizationalUnitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationalUnit, error) {
	o := &OrganizationalUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizational_units")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationalUnit records from the query.
func (q organizationalUnitQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationalUnitSlice, error) {
	var o []*OrganizationalUnit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationalUnit slice")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationalUnit records in the query.
func (q organizationalUnitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizational_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationalUnitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizational_units exists")
	}

	return count > 0, nil
}

// Parent pointed to by the foreign key.
func (o *OrganizationalUnit) Parent(mods ...qm.QueryMod) organizationalUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	return query
}

// Type pointed to by the foreign key.
func (o *OrganizationalUnit) Type(mods ...qm.QueryMod) organizationalUnitTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnitTypes(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_unit_types\"")

	return query
}

// DepartmentDopsEvaluations retrieves all the dops_evaluation's DopsEvaluations with an executor via department_id column.
func (o *OrganizationalUnit) DepartmentDopsEvaluations(mods ...qm.QueryMod) dopsEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dops_evaluations\".\"department_id\"=?", o.ID),
	)

	query := DopsEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"dops_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dops_evaluations\".*"})
	}

	return query
}

// DepartmentEvaluationForms retrieves all the evaluation_form's EvaluationForms with an executor via department_id column.
func (o *OrganizationalUnit) DepartmentEvaluationForms(mods ...qm.QueryMod) evaluationFormQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"evaluation_forms\".\"department_id\"=?", o.ID),
	)

	query := EvaluationForms(queryMods...)
	queries.SetFrom(query.Query, "\"evaluation_forms\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"evaluation_forms\".*"})
	}

	return query
}

// DepartmentExaminations retrieves all the examination's Examinations with an executor via department_id column.
func (o *OrganizationalUnit) DepartmentExaminations(mods ...qm.QueryMod) examinationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations\".\"department_id\"=?", o.ID),
	)

	query := Examinations(queryMods...)
	queries.SetFrom(query.Query, "\"examinations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations\".*"})
	}

	return query
}

// DepartmentMiniCexAreas retrieves all the mini_cex_area's MiniCexAreas with an executor via department_id column.
func (o *OrganizationalUnit) DepartmentMiniCexAreas(mods ...qm.QueryMod) miniCexAreaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mini_cex_areas\".\"department_id\"=?", o.ID),
	)

	query := MiniCexAreas(queryMods...)
	queries.SetFrom(query.Query, "\"mini_cex_areas\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mini_cex_areas\".*"})
	}

	return query
}

// DepartmentMiniCexEvaluations retrieves all the mini_cex_evaluation's MiniCexEvaluations with an executor via department_id column.
func (o *OrganizationalUnit) DepartmentMiniCexEvaluations(mods ...qm.QueryMod) miniCexEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mini_cex_evaluations\".\"department_id\"=?", o.ID),
	)

	query := MiniCexEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"mini_cex_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mini_cex_evaluations\".*"})
	}

	return query
}

// Specialties retrieves all the specialty's Specialties with an executor.
func (o *OrganizationalUnit) Specialties(mods ...qm.QueryMod) specialtyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"organizational_unit_specialties\" on \"specialties\".\"id\" = \"organizational_unit_specialties\".\"specialty_id\""),
		qm.Where("\"organizational_unit_specialties\".\"unit_id\"=?", o.ID),
	)

	query := Specialties(queryMods...)
	queries.SetFrom(query.Query, "\"specialties\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"specialties\".*"})
	}

	return query
}

// ParentOrganizationalUnits retrieves all the organizational_unit's OrganizationalUnits with an executor via parent_id column.
func (o *OrganizationalUnit) ParentOrganizationalUnits(mods ...qm.QueryMod) organizationalUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizational_units\".\"parent_id\"=?", o.ID),
	)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizational_units\".*"})
	}

	return query
}

// Procedures retrieves all the procedure's Procedures with an executor.
func (o *OrganizationalUnit) Procedures(mods ...qm.QueryMod) procedureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"procedures\".\"organizational_unit_id\"=?", o.ID),
	)

	query := Procedures(queryMods...)
	queries.SetFrom(query.Query, "\"procedures\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"procedures\".*"})
	}

	return query
}

// UnitUserOrganizationalUnitRoles retrieves all the user_organizational_unit_role's UserOrganizationalUnitRoles with an executor via unit_id column.
func (o *OrganizationalUnit) UnitUserOrganizationalUnitRoles(mods ...qm.QueryMod) userOrganizationalUnitRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_organizational_unit_roles\".\"unit_id\"=?", o.ID),
	)

	query := UserOrganizationalUnitRoles(queryMods...)
	queries.SetFrom(query.Query, "\"user_organizational_unit_roles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_organizational_unit_roles\".*"})
	}

	return query
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationalUnitL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		if !queries.IsNil(object.ParentID) {
			args = append(args, object.ParentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentID) {
				args = append(args, obj.ParentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnit")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitR{}
		}
		foreign.R.ParentOrganizationalUnits = append(foreign.R.ParentOrganizationalUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.ParentOrganizationalUnits = append(foreign.R.ParentOrganizationalUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (organizationalUnitL) LoadType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_unit_types`),
		qm.WhereIn(`organizational_unit_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnitType")
	}

	var resultSlice []*OrganizationalUnitType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnitType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_unit_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_unit_types")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitTypeR{}
		}
		foreign.R.TypeOrganizationalUnits = append(foreign.R.TypeOrganizationalUnits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitTypeR{}
				}
				foreign.R.TypeOrganizationalUnits = append(foreign.R.TypeOrganizationalUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadDepartmentDopsEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadDepartmentDopsEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dops_evaluations`),
		qm.WhereIn(`dops_evaluations.department_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dops_evaluations")
	}

	var resultSlice []*DopsEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dops_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dops_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dops_evaluations")
	}

	if len(dopsEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartmentDopsEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dopsEvaluationR{}
			}
			foreign.R.Department = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DepartmentID) {
				local.R.DepartmentDopsEvaluations = append(local.R.DepartmentDopsEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &dopsEvaluationR{}
				}
				foreign.R.Department = local
				break
			}
		}
	}

	return nil
}

// LoadDepartmentEvaluationForms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadDepartmentEvaluationForms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`evaluation_forms`),
		qm.WhereIn(`evaluation_forms.department_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load evaluation_forms")
	}

	var resultSlice []*EvaluationForm
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice evaluation_forms")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on evaluation_forms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evaluation_forms")
	}

	if len(evaluationFormAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartmentEvaluationForms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &evaluationFormR{}
			}
			foreign.R.Department = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DepartmentID {
				local.R.DepartmentEvaluationForms = append(local.R.DepartmentEvaluationForms, foreign)
				if foreign.R == nil {
					foreign.R = &evaluationFormR{}
				}
				foreign.R.Department = local
				break
			}
		}
	}

	return nil
}

// LoadDepartmentExaminations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadDepartmentExaminations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations`),
		qm.WhereIn(`examinations.department_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartmentExaminations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationR{}
			}
			foreign.R.Department = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DepartmentID {
				local.R.DepartmentExaminations = append(local.R.DepartmentExaminations, foreign)
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.Department = local
				break
			}
		}
	}

	return nil
}

// LoadDepartmentMiniCexAreas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadDepartmentMiniCexAreas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mini_cex_areas`),
		qm.WhereIn(`mini_cex_areas.department_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mini_cex_areas")
	}

	var resultSlice []*MiniCexArea
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mini_cex_areas")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mini_cex_areas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mini_cex_areas")
	}

	if len(miniCexAreaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartmentMiniCexAreas = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &miniCexAreaR{}
			}
			foreign.R.Department = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DepartmentID {
				local.R.DepartmentMiniCexAreas = append(local.R.DepartmentMiniCexAreas, foreign)
				if foreign.R == nil {
					foreign.R = &miniCexAreaR{}
				}
				foreign.R.Department = local
				break
			}
		}
	}

	return nil
}

// LoadDepartmentMiniCexEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadDepartmentMiniCexEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mini_cex_evaluations`),
		qm.WhereIn(`mini_cex_evaluations.department_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mini_cex_evaluations")
	}

	var resultSlice []*MiniCexEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mini_cex_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mini_cex_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mini_cex_evaluations")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartmentMiniCexEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &miniCexEvaluationR{}
			}
			foreign.R.Department = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DepartmentID) {
				local.R.DepartmentMiniCexEvaluations = append(local.R.DepartmentMiniCexEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &miniCexEvaluationR{}
				}
				foreign.R.Department = local
				break
			}
		}
	}

	return nil
}

// LoadSpecialties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadSpecialties(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"specialties\".id, \"specialties\".name, \"a\".\"unit_id\""),
		qm.From("\"specialties\""),
		qm.InnerJoin("\"organizational_unit_specialties\" as \"a\" on \"specialties\".\"id\" = \"a\".\"specialty_id\""),
		qm.WhereIn("\"a\".\"unit_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load specialties")
	}

	var resultSlice []*Specialty

	var localJoinCols []string
	for results.Next() {
		one := new(Specialty)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for specialties")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice specialties")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on specialties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for specialties")
	}

	if len(specialtyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Specialties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &specialtyR{}
			}
			foreign.R.UnitOrganizationalUnits = append(foreign.R.UnitOrganizationalUnits, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Specialties = append(local.R.Specialties, foreign)
				if foreign.R == nil {
					foreign.R = &specialtyR{}
				}
				foreign.R.UnitOrganizationalUnits = append(foreign.R.UnitOrganizationalUnits, local)
				break
			}
		}
	}

	return nil
}

// LoadParentOrganizationalUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadParentOrganizationalUnits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.parent_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizational_units")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizational_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentOrganizationalUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationalUnitR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentOrganizationalUnits = append(local.R.ParentOrganizationalUnits, foreign)
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// LoadProcedures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadProcedures(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`procedures`),
		qm.WhereIn(`procedures.organizational_unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load procedures")
	}

	var resultSlice []*Procedure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice procedures")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on procedures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for procedures")
	}

	if len(procedureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Procedures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &procedureR{}
			}
			foreign.R.OrganizationalUnit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrganizationalUnitID {
				local.R.Procedures = append(local.R.Procedures, foreign)
				if foreign.R == nil {
					foreign.R = &procedureR{}
				}
				foreign.R.OrganizationalUnit = local
				break
			}
		}
	}

	return nil
}

// LoadUnitUserOrganizationalUnitRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitL) LoadUnitUserOrganizationalUnitRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnit interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnit
	var object *OrganizationalUnit

	if singular {
		object = maybeOrganizationalUnit.(*OrganizationalUnit)
	} else {
		slice = *maybeOrganizationalUnit.(*[]*OrganizationalUnit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_organizational_unit_roles`),
		qm.WhereIn(`user_organizational_unit_roles.unit_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_organizational_unit_roles")
	}

	var resultSlice []*UserOrganizationalUnitRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_organizational_unit_roles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_organizational_unit_roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_organizational_unit_roles")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UnitUserOrganizationalUnitRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOrganizationalUnitRoleR{}
			}
			foreign.R.Unit = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UnitID {
				local.R.UnitUserOrganizationalUnitRoles = append(local.R.UnitUserOrganizationalUnitRoles, foreign)
				if foreign.R == nil {
					foreign.R = &userOrganizationalUnitRoleR{}
				}
				foreign.R.Unit = local
				break
			}
		}
	}

	return nil
}

// SetParent of the organizationalUnit to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentOrganizationalUnits.
func (o *OrganizationalUnit) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organizational_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationalUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &organizationalUnitR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &organizationalUnitR{
			ParentOrganizationalUnits: OrganizationalUnitSlice{o},
		}
	} else {
		related.R.ParentOrganizationalUnits = append(related.R.ParentOrganizationalUnits, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OrganizationalUnit) RemoveParent(ctx context.Context, exec boil.ContextExecutor, related *OrganizationalUnit) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentOrganizationalUnits {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentOrganizationalUnits)
		if ln > 1 && i < ln-1 {
			related.R.ParentOrganizationalUnits[i] = related.R.ParentOrganizationalUnits[ln-1]
		}
		related.R.ParentOrganizationalUnits = related.R.ParentOrganizationalUnits[:ln-1]
		break
	}
	return nil
}

// SetType of the organizationalUnit to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeOrganizationalUnits.
func (o *OrganizationalUnit) SetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnitType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"organizational_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
		strmangle.WhereClause("\"", "\"", 2, organizationalUnitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &organizationalUnitR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &organizationalUnitTypeR{
			TypeOrganizationalUnits: OrganizationalUnitSlice{o},
		}
	} else {
		related.R.TypeOrganizationalUnits = append(related.R.TypeOrganizationalUnits, o)
	}

	return nil
}

// AddDepartmentDopsEvaluations adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.DepartmentDopsEvaluations.
// Sets related.R.Department appropriately.
func (o *OrganizationalUnit) AddDepartmentDopsEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DopsEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DepartmentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dops_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
				strmangle.WhereClause("\"", "\"", 2, dopsEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DepartmentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			DepartmentDopsEvaluations: related,
		}
	} else {
		o.R.DepartmentDopsEvaluations = append(o.R.DepartmentDopsEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dopsEvaluationR{
				Department: o,
			}
		} else {
			rel.R.Department = o
		}
	}
	return nil
}

// SetDepartmentDopsEvaluations removes all previously related items of the
// organizational_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Department's DepartmentDopsEvaluations accordingly.
// Replaces o.R.DepartmentDopsEvaluations with related.
// Sets related.R.Department's DepartmentDopsEvaluations accordingly.
func (o *OrganizationalUnit) SetDepartmentDopsEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DopsEvaluation) error {
	query := "update \"dops_evaluations\" set \"department_id\" = null where \"department_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DepartmentDopsEvaluations {
			queries.SetScanner(&rel.DepartmentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Department = nil
		}

		o.R.DepartmentDopsEvaluations = nil
	}
	return o.AddDepartmentDopsEvaluations(ctx, exec, insert, related...)
}

// RemoveDepartmentDopsEvaluations relationships from objects passed in.
// Removes related items from R.DepartmentDopsEvaluations (uses pointer comparison, removal does not keep order)
// Sets related.R.Department.
func (o *OrganizationalUnit) RemoveDepartmentDopsEvaluations(ctx context.Context, exec boil.ContextExecutor, related ...*DopsEvaluation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DepartmentID, nil)
		if rel.R != nil {
			rel.R.Department = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("department_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DepartmentDopsEvaluations {
			if rel != ri {
				continue
			}

			ln := len(o.R.DepartmentDopsEvaluations)
			if ln > 1 && i < ln-1 {
				o.R.DepartmentDopsEvaluations[i] = o.R.DepartmentDopsEvaluations[ln-1]
			}
			o.R.DepartmentDopsEvaluations = o.R.DepartmentDopsEvaluations[:ln-1]
			break
		}
	}

	return nil
}

// AddDepartmentEvaluationForms adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.DepartmentEvaluationForms.
// Sets related.R.Department appropriately.
func (o *OrganizationalUnit) AddDepartmentEvaluationForms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EvaluationForm) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"evaluation_forms\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
				strmangle.WhereClause("\"", "\"", 2, evaluationFormPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			DepartmentEvaluationForms: related,
		}
	} else {
		o.R.DepartmentEvaluationForms = append(o.R.DepartmentEvaluationForms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &evaluationFormR{
				Department: o,
			}
		} else {
			rel.R.Department = o
		}
	}
	return nil
}

// AddDepartmentExaminations adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.DepartmentExaminations.
// Sets related.R.Department appropriately.
func (o *OrganizationalUnit) AddDepartmentExaminations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Examination) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			DepartmentExaminations: related,
		}
	} else {
		o.R.DepartmentExaminations = append(o.R.DepartmentExaminations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationR{
				Department: o,
			}
		} else {
			rel.R.Department = o
		}
	}
	return nil
}

// AddDepartmentMiniCexAreas adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.DepartmentMiniCexAreas.
// Sets related.R.Department appropriately.
func (o *OrganizationalUnit) AddDepartmentMiniCexAreas(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MiniCexArea) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mini_cex_areas\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
				strmangle.WhereClause("\"", "\"", 2, miniCexAreaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			DepartmentMiniCexAreas: related,
		}
	} else {
		o.R.DepartmentMiniCexAreas = append(o.R.DepartmentMiniCexAreas, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &miniCexAreaR{
				Department: o,
			}
		} else {
			rel.R.Department = o
		}
	}
	return nil
}

// AddDepartmentMiniCexEvaluations adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.DepartmentMiniCexEvaluations.
// Sets related.R.Department appropriately.
func (o *OrganizationalUnit) AddDepartmentMiniCexEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MiniCexEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DepartmentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
				strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DepartmentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			DepartmentMiniCexEvaluations: related,
		}
	} else {
		o.R.DepartmentMiniCexEvaluations = append(o.R.DepartmentMiniCexEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &miniCexEvaluationR{
				Department: o,
			}
		} else {
			rel.R.Department = o
		}
	}
	return nil
}

// SetDepartmentMiniCexEvaluations removes all previously related items of the
// organizational_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Department's DepartmentMiniCexEvaluations accordingly.
// Replaces o.R.DepartmentMiniCexEvaluations with related.
// Sets related.R.Department's DepartmentMiniCexEvaluations accordingly.
func (o *OrganizationalUnit) SetDepartmentMiniCexEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MiniCexEvaluation) error {
	query := "update \"mini_cex_evaluations\" set \"department_id\" = null where \"department_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DepartmentMiniCexEvaluations {
			queries.SetScanner(&rel.DepartmentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Department = nil
		}

		o.R.DepartmentMiniCexEvaluations = nil
	}
	return o.AddDepartmentMiniCexEvaluations(ctx, exec, insert, related...)
}

// RemoveDepartmentMiniCexEvaluations relationships from objects passed in.
// Removes related items from R.DepartmentMiniCexEvaluations (uses pointer comparison, removal does not keep order)
// Sets related.R.Department.
func (o *OrganizationalUnit) RemoveDepartmentMiniCexEvaluations(ctx context.Context, exec boil.ContextExecutor, related ...*MiniCexEvaluation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DepartmentID, nil)
		if rel.R != nil {
			rel.R.Department = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("department_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DepartmentMiniCexEvaluations {
			if rel != ri {
				continue
			}

			ln := len(o.R.DepartmentMiniCexEvaluations)
			if ln > 1 && i < ln-1 {
				o.R.DepartmentMiniCexEvaluations[i] = o.R.DepartmentMiniCexEvaluations[ln-1]
			}
			o.R.DepartmentMiniCexEvaluations = o.R.DepartmentMiniCexEvaluations[:ln-1]
			break
		}
	}

	return nil
}

// AddSpecialties adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.Specialties.
// Sets related.R.UnitOrganizationalUnits appropriately.
func (o *OrganizationalUnit) AddSpecialties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Specialty) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"organizational_unit_specialties\" (\"unit_id\", \"specialty_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &organizationalUnitR{
			Specialties: related,
		}
	} else {
		o.R.Specialties = append(o.R.Specialties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &specialtyR{
				UnitOrganizationalUnits: OrganizationalUnitSlice{o},
			}
		} else {
			rel.R.UnitOrganizationalUnits = append(rel.R.UnitOrganizationalUnits, o)
		}
	}
	return nil
}

// SetSpecialties removes all previously related items of the
// organizational_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UnitOrganizationalUnits's Specialties accordingly.
// Replaces o.R.Specialties with related.
// Sets related.R.UnitOrganizationalUnits's Specialties accordingly.
func (o *OrganizationalUnit) SetSpecialties(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Specialty) error {
	query := "delete from \"organizational_unit_specialties\" where \"unit_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeSpecialtiesFromUnitOrganizationalUnitsSlice(o, related)
	if o.R != nil {
		o.R.Specialties = nil
	}
	return o.AddSpecialties(ctx, exec, insert, related...)
}

// RemoveSpecialties relationships from objects passed in.
// Removes related items from R.Specialties (uses pointer comparison, removal does not keep order)
// Sets related.R.UnitOrganizationalUnits.
func (o *OrganizationalUnit) RemoveSpecialties(ctx context.Context, exec boil.ContextExecutor, related ...*Specialty) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"organizational_unit_specialties\" where \"unit_id\" = $1 and \"specialty_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeSpecialtiesFromUnitOrganizationalUnitsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Specialties {
			if rel != ri {
				continue
			}

			ln := len(o.R.Specialties)
			if ln > 1 && i < ln-1 {
				o.R.Specialties[i] = o.R.Specialties[ln-1]
			}
			o.R.Specialties = o.R.Specialties[:ln-1]
			break
		}
	}

	return nil
}

func removeSpecialtiesFromUnitOrganizationalUnitsSlice(o *OrganizationalUnit, related []*Specialty) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.UnitOrganizationalUnits {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.UnitOrganizationalUnits)
			if ln > 1 && i < ln-1 {
				rel.R.UnitOrganizationalUnits[i] = rel.R.UnitOrganizationalUnits[ln-1]
			}
			rel.R.UnitOrganizationalUnits = rel.R.UnitOrganizationalUnits[:ln-1]
			break
		}
	}
}

// AddParentOrganizationalUnits adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.ParentOrganizationalUnits.
// Sets related.R.Parent appropriately.
func (o *OrganizationalUnit) AddParentOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationalUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizational_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationalUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			ParentOrganizationalUnits: related,
		}
	} else {
		o.R.ParentOrganizationalUnits = append(o.R.ParentOrganizationalUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationalUnitR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentOrganizationalUnits removes all previously related items of the
// organizational_unit replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentOrganizationalUnits accordingly.
// Replaces o.R.ParentOrganizationalUnits with related.
// Sets related.R.Parent's ParentOrganizationalUnits accordingly.
func (o *OrganizationalUnit) SetParentOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationalUnit) error {
	query := "update \"organizational_units\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentOrganizationalUnits {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentOrganizationalUnits = nil
	}
	return o.AddParentOrganizationalUnits(ctx, exec, insert, related...)
}

// RemoveParentOrganizationalUnits relationships from objects passed in.
// Removes related items from R.ParentOrganizationalUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *OrganizationalUnit) RemoveParentOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationalUnit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentOrganizationalUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentOrganizationalUnits)
			if ln > 1 && i < ln-1 {
				o.R.ParentOrganizationalUnits[i] = o.R.ParentOrganizationalUnits[ln-1]
			}
			o.R.ParentOrganizationalUnits = o.R.ParentOrganizationalUnits[:ln-1]
			break
		}
	}

	return nil
}

// AddProcedures adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.Procedures.
// Sets related.R.OrganizationalUnit appropriately.
func (o *OrganizationalUnit) AddProcedures(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Procedure) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrganizationalUnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"procedures\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"organizational_unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, procedurePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrganizationalUnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			Procedures: related,
		}
	} else {
		o.R.Procedures = append(o.R.Procedures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &procedureR{
				OrganizationalUnit: o,
			}
		} else {
			rel.R.OrganizationalUnit = o
		}
	}
	return nil
}

// AddUnitUserOrganizationalUnitRoles adds the given related objects to the existing relationships
// of the organizational_unit, optionally inserting them as new records.
// Appends related to o.R.UnitUserOrganizationalUnitRoles.
// Sets related.R.Unit appropriately.
func (o *OrganizationalUnit) AddUnitUserOrganizationalUnitRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserOrganizationalUnitRole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UnitID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrganizationalUnitRolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UnitID, rel.UserID, rel.RoleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UnitID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitR{
			UnitUserOrganizationalUnitRoles: related,
		}
	} else {
		o.R.UnitUserOrganizationalUnitRoles = append(o.R.UnitUserOrganizationalUnitRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrganizationalUnitRoleR{
				Unit: o,
			}
		} else {
			rel.R.Unit = o
		}
	}
	return nil
}

// OrganizationalUnits retrieves all the records using an executor.
func OrganizationalUnits(mods ...qm.QueryMod) organizationalUnitQuery {
	mods = append(mods, qm.From("\"organizational_units\""))
	return organizationalUnitQuery{NewQuery(mods...)}
}

// FindOrganizationalUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationalUnit(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrganizationalUnit, error) {
	organizationalUnitObj := &OrganizationalUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organizational_units\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationalUnitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizational_units")
	}

	if err = organizationalUnitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationalUnitObj, err
	}

	return organizationalUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationalUnit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizational_units provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationalUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationalUnitInsertCacheMut.RLock()
	cache, cached := organizationalUnitInsertCache[key]
	organizationalUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationalUnitAllColumns,
			organizationalUnitColumnsWithDefault,
			organizationalUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organizational_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organizational_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizational_units")
	}

	if !cached {
		organizationalUnitInsertCacheMut.Lock()
		organizationalUnitInsertCache[key] = cache
		organizationalUnitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationalUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationalUnit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationalUnitUpdateCacheMut.RLock()
	cache, cached := organizationalUnitUpdateCache[key]
	organizationalUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationalUnitAllColumns,
			organizationalUnitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizational_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organizational_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationalUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, append(wl, organizationalUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizational_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizational_units")
	}

	if !cached {
		organizationalUnitUpdateCacheMut.Lock()
		organizationalUnitUpdateCache[key] = cache
		organizationalUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationalUnitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizational_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizational_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationalUnitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organizational_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationalUnitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationalUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationalUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationalUnit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizational_units provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationalUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationalUnitUpsertCacheMut.RLock()
	cache, cached := organizationalUnitUpsertCache[key]
	organizationalUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationalUnitAllColumns,
			organizationalUnitColumnsWithDefault,
			organizationalUnitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationalUnitAllColumns,
			organizationalUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organizational_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationalUnitPrimaryKeyColumns))
			copy(conflict, organizationalUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organizational_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationalUnitType, organizationalUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organizational_units")
	}

	if !cached {
		organizationalUnitUpsertCacheMut.Lock()
		organizationalUnitUpsertCache[key] = cache
		organizationalUnitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationalUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationalUnit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationalUnit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationalUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"organizational_units\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizational_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizational_units")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationalUnitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationalUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizational_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizational_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationalUnitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationalUnitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organizational_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationalUnitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationalUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizational_units")
	}

	if len(organizationalUnitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationalUnit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationalUnit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationalUnitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationalUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organizational_units\".* FROM \"organizational_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationalUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationalUnitSlice")
	}

	*o = slice

	return nil
}

// OrganizationalUnitExists checks if the OrganizationalUnit row exists.
func OrganizationalUnitExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organizational_units\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizational_units exists")
	}

	return exists, nil
}
