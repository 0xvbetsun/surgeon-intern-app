// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrthopedicSurgeryActivitiesSurgeries(t *testing.T) {
	t.Parallel()

	query := OrthopedicSurgeryActivitiesSurgeries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrthopedicSurgeryActivitiesSurgeries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrthopedicSurgeryActivitiesSurgerySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrthopedicSurgeryActivitiesSurgeryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrthopedicSurgeryActivitiesSurgery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrthopedicSurgeryActivitiesSurgeryExists to return true, but got false.")
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orthopedicSurgeryActivitiesSurgeryFound, err := FindOrthopedicSurgeryActivitiesSurgery(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orthopedicSurgeryActivitiesSurgeryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrthopedicSurgeryActivitiesSurgeries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrthopedicSurgeryActivitiesSurgeries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orthopedicSurgeryActivitiesSurgeryOne := &OrthopedicSurgeryActivitiesSurgery{}
	orthopedicSurgeryActivitiesSurgeryTwo := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, orthopedicSurgeryActivitiesSurgeryOne, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}
	if err = randomize.Struct(seed, orthopedicSurgeryActivitiesSurgeryTwo, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orthopedicSurgeryActivitiesSurgeryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orthopedicSurgeryActivitiesSurgeryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrthopedicSurgeryActivitiesSurgeries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orthopedicSurgeryActivitiesSurgeryOne := &OrthopedicSurgeryActivitiesSurgery{}
	orthopedicSurgeryActivitiesSurgeryTwo := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, orthopedicSurgeryActivitiesSurgeryOne, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}
	if err = randomize.Struct(seed, orthopedicSurgeryActivitiesSurgeryTwo, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orthopedicSurgeryActivitiesSurgeryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orthopedicSurgeryActivitiesSurgeryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orthopedicSurgeryActivitiesSurgeryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func orthopedicSurgeryActivitiesSurgeryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivitiesSurgery) error {
	*o = OrthopedicSurgeryActivitiesSurgery{}
	return nil
}

func testOrthopedicSurgeryActivitiesSurgeriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrthopedicSurgeryActivitiesSurgery{}
	o := &OrthopedicSurgeryActivitiesSurgery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery object: %s", err)
	}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.BeforeInsertHook, orthopedicSurgeryActivitiesSurgeryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryBeforeInsertHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.AfterInsertHook, orthopedicSurgeryActivitiesSurgeryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryAfterInsertHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.AfterSelectHook, orthopedicSurgeryActivitiesSurgeryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryAfterSelectHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.BeforeUpdateHook, orthopedicSurgeryActivitiesSurgeryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryBeforeUpdateHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.AfterUpdateHook, orthopedicSurgeryActivitiesSurgeryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryAfterUpdateHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.BeforeDeleteHook, orthopedicSurgeryActivitiesSurgeryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryBeforeDeleteHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.AfterDeleteHook, orthopedicSurgeryActivitiesSurgeryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryAfterDeleteHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.BeforeUpsertHook, orthopedicSurgeryActivitiesSurgeryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryBeforeUpsertHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}

	AddOrthopedicSurgeryActivitiesSurgeryHook(boil.AfterUpsertHook, orthopedicSurgeryActivitiesSurgeryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivitiesSurgeryAfterUpsertHooks = []OrthopedicSurgeryActivitiesSurgeryHook{}
}

func testOrthopedicSurgeryActivitiesSurgeriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orthopedicSurgeryActivitiesSurgeryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSurgeryToOneOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivitiesSurgery
	var foreign OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrthopedicSurgeryActivityID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgeryActivity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitiesSurgerySlice{&local}
	if err = local.L.LoadOrthopedicSurgeryActivity(ctx, tx, false, (*[]*OrthopedicSurgeryActivitiesSurgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryActivity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgeryActivity = nil
	if err = local.L.LoadOrthopedicSurgeryActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryActivity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivitiesSurgeryToOneSurgeryUsingSurgery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivitiesSurgery
	var foreign Surgery

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SurgeryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Surgery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitiesSurgerySlice{&local}
	if err = local.L.LoadSurgery(ctx, tx, false, (*[]*OrthopedicSurgeryActivitiesSurgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Surgery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Surgery = nil
	if err = local.L.LoadSurgery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Surgery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivitiesSurgeryToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivitiesSurgery
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivitiesSurgeryDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns, orthopedicSurgeryActivitiesSurgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrthopedicSurgeryActivity{&b, &c} {
		err = a.SetOrthopedicSurgeryActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgeryActivity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrthopedicSurgeryActivitiesSurgeries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrthopedicSurgeryActivityID != x.ID {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryActivityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrthopedicSurgeryActivityID))
		reflect.Indirect(reflect.ValueOf(&a.OrthopedicSurgeryActivityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrthopedicSurgeryActivityID != x.ID {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryActivityID, x.ID)
		}
	}
}
func testOrthopedicSurgeryActivitiesSurgeryToOneSetOpSurgeryUsingSurgery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivitiesSurgery
	var b, c Surgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivitiesSurgeryDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns, orthopedicSurgeryActivitiesSurgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Surgery{&b, &c} {
		err = a.SetSurgery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Surgery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrthopedicSurgeryActivitiesSurgeries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SurgeryID != x.ID {
			t.Error("foreign key was wrong value", a.SurgeryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SurgeryID))
		reflect.Indirect(reflect.ValueOf(&a.SurgeryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SurgeryID != x.ID {
			t.Error("foreign key was wrong value", a.SurgeryID, x.ID)
		}
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrthopedicSurgeryActivitiesSurgerySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrthopedicSurgeryActivitiesSurgeries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orthopedicSurgeryActivitiesSurgeryDBTypes = map[string]string{`ID`: `uuid`, `SurgeryID`: `uuid`, `OrthopedicSurgeryActivityID`: `uuid`}
	_                                         = bytes.MinRead
)

func testOrthopedicSurgeryActivitiesSurgeriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orthopedicSurgeryActivitiesSurgeryAllColumns) == len(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orthopedicSurgeryActivitiesSurgeryAllColumns) == len(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orthopedicSurgeryActivitiesSurgeryDBTypes, true, orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orthopedicSurgeryActivitiesSurgeryAllColumns, orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns) {
		fields = orthopedicSurgeryActivitiesSurgeryAllColumns
	} else {
		fields = strmangle.SetComplement(
			orthopedicSurgeryActivitiesSurgeryAllColumns,
			orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrthopedicSurgeryActivitiesSurgerySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrthopedicSurgeryActivitiesSurgeriesUpsert(t *testing.T) {
	t.Parallel()

	if len(orthopedicSurgeryActivitiesSurgeryAllColumns) == len(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrthopedicSurgeryActivitiesSurgery{}
	if err = randomize.Struct(seed, &o, orthopedicSurgeryActivitiesSurgeryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrthopedicSurgeryActivitiesSurgery: %s", err)
	}

	count, err := OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivitiesSurgery struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrthopedicSurgeryActivitiesSurgery: %s", err)
	}

	count, err = OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
