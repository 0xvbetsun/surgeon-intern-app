// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DisplayName    string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Email          string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	UserExternalID null.String `boil:"user_external_id" json:"user_external_id,omitempty" toml:"user_external_id" yaml:"user_external_id,omitempty"`
	Activated      bool        `boil:"activated" json:"activated" toml:"activated" yaml:"activated"`
	Activationcode null.String `boil:"activationcode" json:"activationcode,omitempty" toml:"activationcode" yaml:"activationcode,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID             string
	CreatedAt      string
	DisplayName    string
	Email          string
	UserExternalID string
	Activated      string
	Activationcode string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	DisplayName:    "display_name",
	Email:          "email",
	UserExternalID: "user_external_id",
	Activated:      "activated",
	Activationcode: "activationcode",
}

var UserTableColumns = struct {
	ID             string
	CreatedAt      string
	DisplayName    string
	Email          string
	UserExternalID string
	Activated      string
	Activationcode string
}{
	ID:             "users.id",
	CreatedAt:      "users.created_at",
	DisplayName:    "users.display_name",
	Email:          "users.email",
	UserExternalID: "users.user_external_id",
	Activated:      "users.activated",
	Activationcode: "users.activationcode",
}

// Generated where

var UserWhere = struct {
	ID             whereHelperstring
	CreatedAt      whereHelpertime_Time
	DisplayName    whereHelperstring
	Email          whereHelperstring
	UserExternalID whereHelpernull_String
	Activated      whereHelperbool
	Activationcode whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"users\".\"id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"users\".\"created_at\""},
	DisplayName:    whereHelperstring{field: "\"users\".\"display_name\""},
	Email:          whereHelperstring{field: "\"users\".\"email\""},
	UserExternalID: whereHelpernull_String{field: "\"users\".\"user_external_id\""},
	Activated:      whereHelperbool{field: "\"users\".\"activated\""},
	Activationcode: whereHelpernull_String{field: "\"users\".\"activationcode\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	ResidentDopsEvaluations                           string
	SupervisorDopsEvaluations                         string
	ResidentUserExaminationActivities                 string
	SupervisorUserExaminationActivities               string
	ActivityAuthorUserExaminationsActivitiesReviews   string
	ActivityReviewerUserExaminationsActivitiesReviews string
	SupervisorUserExaminationsActivityReviews         string
	ResidentMiniCexEvaluations                        string
	SupervisorMiniCexEvaluations                      string
	Notifications                                     string
	AssistantOrthopedicSurgeriesActivityReviews       string
	OperatorOrthopedicSurgeriesActivityReviews        string
	ResidentOrthopedicSurgeriesActivityReviews        string
	SupervisorOrthopedicSurgeriesActivityReviews      string
	AssistantOrthopedicSurgeryActivities              string
	OperatorOrthopedicSurgeryActivities               string
	ResidentOrthopedicSurgeryActivities               string
	SupervisorOrthopedicSurgeryActivities             string
	UserOrganizationalUnitRoles                       string
}{
	ResidentDopsEvaluations:                           "ResidentDopsEvaluations",
	SupervisorDopsEvaluations:                         "SupervisorDopsEvaluations",
	ResidentUserExaminationActivities:                 "ResidentUserExaminationActivities",
	SupervisorUserExaminationActivities:               "SupervisorUserExaminationActivities",
	ActivityAuthorUserExaminationsActivitiesReviews:   "ActivityAuthorUserExaminationsActivitiesReviews",
	ActivityReviewerUserExaminationsActivitiesReviews: "ActivityReviewerUserExaminationsActivitiesReviews",
	SupervisorUserExaminationsActivityReviews:         "SupervisorUserExaminationsActivityReviews",
	ResidentMiniCexEvaluations:                        "ResidentMiniCexEvaluations",
	SupervisorMiniCexEvaluations:                      "SupervisorMiniCexEvaluations",
	Notifications:                                     "Notifications",
	AssistantOrthopedicSurgeriesActivityReviews:       "AssistantOrthopedicSurgeriesActivityReviews",
	OperatorOrthopedicSurgeriesActivityReviews:        "OperatorOrthopedicSurgeriesActivityReviews",
	ResidentOrthopedicSurgeriesActivityReviews:        "ResidentOrthopedicSurgeriesActivityReviews",
	SupervisorOrthopedicSurgeriesActivityReviews:      "SupervisorOrthopedicSurgeriesActivityReviews",
	AssistantOrthopedicSurgeryActivities:              "AssistantOrthopedicSurgeryActivities",
	OperatorOrthopedicSurgeryActivities:               "OperatorOrthopedicSurgeryActivities",
	ResidentOrthopedicSurgeryActivities:               "ResidentOrthopedicSurgeryActivities",
	SupervisorOrthopedicSurgeryActivities:             "SupervisorOrthopedicSurgeryActivities",
	UserOrganizationalUnitRoles:                       "UserOrganizationalUnitRoles",
}

// userR is where relationships are stored.
type userR struct {
	ResidentDopsEvaluations                           DopsEvaluationSlice                    `boil:"ResidentDopsEvaluations" json:"ResidentDopsEvaluations" toml:"ResidentDopsEvaluations" yaml:"ResidentDopsEvaluations"`
	SupervisorDopsEvaluations                         DopsEvaluationSlice                    `boil:"SupervisorDopsEvaluations" json:"SupervisorDopsEvaluations" toml:"SupervisorDopsEvaluations" yaml:"SupervisorDopsEvaluations"`
	ResidentUserExaminationActivities                 ExaminationActivitySlice               `boil:"ResidentUserExaminationActivities" json:"ResidentUserExaminationActivities" toml:"ResidentUserExaminationActivities" yaml:"ResidentUserExaminationActivities"`
	SupervisorUserExaminationActivities               ExaminationActivitySlice               `boil:"SupervisorUserExaminationActivities" json:"SupervisorUserExaminationActivities" toml:"SupervisorUserExaminationActivities" yaml:"SupervisorUserExaminationActivities"`
	ActivityAuthorUserExaminationsActivitiesReviews   ExaminationsActivitiesReviewSlice      `boil:"ActivityAuthorUserExaminationsActivitiesReviews" json:"ActivityAuthorUserExaminationsActivitiesReviews" toml:"ActivityAuthorUserExaminationsActivitiesReviews" yaml:"ActivityAuthorUserExaminationsActivitiesReviews"`
	ActivityReviewerUserExaminationsActivitiesReviews ExaminationsActivitiesReviewSlice      `boil:"ActivityReviewerUserExaminationsActivitiesReviews" json:"ActivityReviewerUserExaminationsActivitiesReviews" toml:"ActivityReviewerUserExaminationsActivitiesReviews" yaml:"ActivityReviewerUserExaminationsActivitiesReviews"`
	SupervisorUserExaminationsActivityReviews         ExaminationsActivityReviewSlice        `boil:"SupervisorUserExaminationsActivityReviews" json:"SupervisorUserExaminationsActivityReviews" toml:"SupervisorUserExaminationsActivityReviews" yaml:"SupervisorUserExaminationsActivityReviews"`
	ResidentMiniCexEvaluations                        MiniCexEvaluationSlice                 `boil:"ResidentMiniCexEvaluations" json:"ResidentMiniCexEvaluations" toml:"ResidentMiniCexEvaluations" yaml:"ResidentMiniCexEvaluations"`
	SupervisorMiniCexEvaluations                      MiniCexEvaluationSlice                 `boil:"SupervisorMiniCexEvaluations" json:"SupervisorMiniCexEvaluations" toml:"SupervisorMiniCexEvaluations" yaml:"SupervisorMiniCexEvaluations"`
	Notifications                                     NotificationSlice                      `boil:"Notifications" json:"Notifications" toml:"Notifications" yaml:"Notifications"`
	AssistantOrthopedicSurgeriesActivityReviews       OrthopedicSurgeriesActivityReviewSlice `boil:"AssistantOrthopedicSurgeriesActivityReviews" json:"AssistantOrthopedicSurgeriesActivityReviews" toml:"AssistantOrthopedicSurgeriesActivityReviews" yaml:"AssistantOrthopedicSurgeriesActivityReviews"`
	OperatorOrthopedicSurgeriesActivityReviews        OrthopedicSurgeriesActivityReviewSlice `boil:"OperatorOrthopedicSurgeriesActivityReviews" json:"OperatorOrthopedicSurgeriesActivityReviews" toml:"OperatorOrthopedicSurgeriesActivityReviews" yaml:"OperatorOrthopedicSurgeriesActivityReviews"`
	ResidentOrthopedicSurgeriesActivityReviews        OrthopedicSurgeriesActivityReviewSlice `boil:"ResidentOrthopedicSurgeriesActivityReviews" json:"ResidentOrthopedicSurgeriesActivityReviews" toml:"ResidentOrthopedicSurgeriesActivityReviews" yaml:"ResidentOrthopedicSurgeriesActivityReviews"`
	SupervisorOrthopedicSurgeriesActivityReviews      OrthopedicSurgeriesActivityReviewSlice `boil:"SupervisorOrthopedicSurgeriesActivityReviews" json:"SupervisorOrthopedicSurgeriesActivityReviews" toml:"SupervisorOrthopedicSurgeriesActivityReviews" yaml:"SupervisorOrthopedicSurgeriesActivityReviews"`
	AssistantOrthopedicSurgeryActivities              OrthopedicSurgeryActivitySlice         `boil:"AssistantOrthopedicSurgeryActivities" json:"AssistantOrthopedicSurgeryActivities" toml:"AssistantOrthopedicSurgeryActivities" yaml:"AssistantOrthopedicSurgeryActivities"`
	OperatorOrthopedicSurgeryActivities               OrthopedicSurgeryActivitySlice         `boil:"OperatorOrthopedicSurgeryActivities" json:"OperatorOrthopedicSurgeryActivities" toml:"OperatorOrthopedicSurgeryActivities" yaml:"OperatorOrthopedicSurgeryActivities"`
	ResidentOrthopedicSurgeryActivities               OrthopedicSurgeryActivitySlice         `boil:"ResidentOrthopedicSurgeryActivities" json:"ResidentOrthopedicSurgeryActivities" toml:"ResidentOrthopedicSurgeryActivities" yaml:"ResidentOrthopedicSurgeryActivities"`
	SupervisorOrthopedicSurgeryActivities             OrthopedicSurgeryActivitySlice         `boil:"SupervisorOrthopedicSurgeryActivities" json:"SupervisorOrthopedicSurgeryActivities" toml:"SupervisorOrthopedicSurgeryActivities" yaml:"SupervisorOrthopedicSurgeryActivities"`
	UserOrganizationalUnitRoles                       UserOrganizationalUnitRoleSlice        `boil:"UserOrganizationalUnitRoles" json:"UserOrganizationalUnitRoles" toml:"UserOrganizationalUnitRoles" yaml:"UserOrganizationalUnitRoles"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "created_at", "display_name", "email", "user_external_id", "activated", "activationcode"}
	userColumnsWithoutDefault = []string{"display_name", "email", "user_external_id", "activationcode"}
	userColumnsWithDefault    = []string{"id", "created_at", "activated"}
	userPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(context.Context, boil.ContextExecutor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBeforeInsertHooks []UserHook
var userBeforeUpdateHooks []UserHook
var userBeforeDeleteHooks []UserHook
var userBeforeUpsertHooks []UserHook

var userAfterInsertHooks []UserHook
var userAfterSelectHooks []UserHook
var userAfterUpdateHooks []UserHook
var userAfterDeleteHooks []UserHook
var userAfterUpsertHooks []UserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
	case boil.BeforeUpdateHook:
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
	case boil.BeforeDeleteHook:
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
	case boil.BeforeUpsertHook:
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
	case boil.AfterInsertHook:
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
	case boil.AfterSelectHook:
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
	case boil.AfterUpdateHook:
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
	case boil.AfterDeleteHook:
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
	case boil.AfterUpsertHook:
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
	}
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users exists")
	}

	return count > 0, nil
}

// ResidentDopsEvaluations retrieves all the dops_evaluation's DopsEvaluations with an executor via resident_id column.
func (o *User) ResidentDopsEvaluations(mods ...qm.QueryMod) dopsEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dops_evaluations\".\"resident_id\"=?", o.ID),
	)

	query := DopsEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"dops_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dops_evaluations\".*"})
	}

	return query
}

// SupervisorDopsEvaluations retrieves all the dops_evaluation's DopsEvaluations with an executor via supervisor_id column.
func (o *User) SupervisorDopsEvaluations(mods ...qm.QueryMod) dopsEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dops_evaluations\".\"supervisor_id\"=?", o.ID),
	)

	query := DopsEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"dops_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dops_evaluations\".*"})
	}

	return query
}

// ResidentUserExaminationActivities retrieves all the examination_activity's ExaminationActivities with an executor via resident_user_id column.
func (o *User) ResidentUserExaminationActivities(mods ...qm.QueryMod) examinationActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examination_activities\".\"resident_user_id\"=?", o.ID),
	)

	query := ExaminationActivities(queryMods...)
	queries.SetFrom(query.Query, "\"examination_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examination_activities\".*"})
	}

	return query
}

// SupervisorUserExaminationActivities retrieves all the examination_activity's ExaminationActivities with an executor via supervisor_user_id column.
func (o *User) SupervisorUserExaminationActivities(mods ...qm.QueryMod) examinationActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examination_activities\".\"supervisor_user_id\"=?", o.ID),
	)

	query := ExaminationActivities(queryMods...)
	queries.SetFrom(query.Query, "\"examination_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examination_activities\".*"})
	}

	return query
}

// ActivityAuthorUserExaminationsActivitiesReviews retrieves all the examinations_activities_review's ExaminationsActivitiesReviews with an executor via activity_author_user_id column.
func (o *User) ActivityAuthorUserExaminationsActivitiesReviews(mods ...qm.QueryMod) examinationsActivitiesReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations_activities_reviews\".\"activity_author_user_id\"=?", o.ID),
	)

	query := ExaminationsActivitiesReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activities_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations_activities_reviews\".*"})
	}

	return query
}

// ActivityReviewerUserExaminationsActivitiesReviews retrieves all the examinations_activities_review's ExaminationsActivitiesReviews with an executor via activity_reviewer_user_id column.
func (o *User) ActivityReviewerUserExaminationsActivitiesReviews(mods ...qm.QueryMod) examinationsActivitiesReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations_activities_reviews\".\"activity_reviewer_user_id\"=?", o.ID),
	)

	query := ExaminationsActivitiesReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activities_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations_activities_reviews\".*"})
	}

	return query
}

// SupervisorUserExaminationsActivityReviews retrieves all the examinations_activity_review's ExaminationsActivityReviews with an executor via supervisor_user_id column.
func (o *User) SupervisorUserExaminationsActivityReviews(mods ...qm.QueryMod) examinationsActivityReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations_activity_reviews\".\"supervisor_user_id\"=?", o.ID),
	)

	query := ExaminationsActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activity_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations_activity_reviews\".*"})
	}

	return query
}

// ResidentMiniCexEvaluations retrieves all the mini_cex_evaluation's MiniCexEvaluations with an executor via resident_id column.
func (o *User) ResidentMiniCexEvaluations(mods ...qm.QueryMod) miniCexEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mini_cex_evaluations\".\"resident_id\"=?", o.ID),
	)

	query := MiniCexEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"mini_cex_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mini_cex_evaluations\".*"})
	}

	return query
}

// SupervisorMiniCexEvaluations retrieves all the mini_cex_evaluation's MiniCexEvaluations with an executor via supervisor_id column.
func (o *User) SupervisorMiniCexEvaluations(mods ...qm.QueryMod) miniCexEvaluationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mini_cex_evaluations\".\"supervisor_id\"=?", o.ID),
	)

	query := MiniCexEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"mini_cex_evaluations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mini_cex_evaluations\".*"})
	}

	return query
}

// Notifications retrieves all the notification's Notifications with an executor.
func (o *User) Notifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notifications\".\"user_id\"=?", o.ID),
	)

	query := Notifications(queryMods...)
	queries.SetFrom(query.Query, "\"notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notifications\".*"})
	}

	return query
}

// AssistantOrthopedicSurgeriesActivityReviews retrieves all the orthopedic_surgeries_activity_review's OrthopedicSurgeriesActivityReviews with an executor via assistant_id column.
func (o *User) AssistantOrthopedicSurgeriesActivityReviews(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgeries_activity_review\".\"assistant_id\"=?", o.ID),
	)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgeries_activity_review\".*"})
	}

	return query
}

// OperatorOrthopedicSurgeriesActivityReviews retrieves all the orthopedic_surgeries_activity_review's OrthopedicSurgeriesActivityReviews with an executor via operator_id column.
func (o *User) OperatorOrthopedicSurgeriesActivityReviews(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgeries_activity_review\".\"operator_id\"=?", o.ID),
	)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgeries_activity_review\".*"})
	}

	return query
}

// ResidentOrthopedicSurgeriesActivityReviews retrieves all the orthopedic_surgeries_activity_review's OrthopedicSurgeriesActivityReviews with an executor via resident_id column.
func (o *User) ResidentOrthopedicSurgeriesActivityReviews(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgeries_activity_review\".\"resident_id\"=?", o.ID),
	)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgeries_activity_review\".*"})
	}

	return query
}

// SupervisorOrthopedicSurgeriesActivityReviews retrieves all the orthopedic_surgeries_activity_review's OrthopedicSurgeriesActivityReviews with an executor via supervisor_id column.
func (o *User) SupervisorOrthopedicSurgeriesActivityReviews(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgeries_activity_review\".\"supervisor_id\"=?", o.ID),
	)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgeries_activity_review\".*"})
	}

	return query
}

// AssistantOrthopedicSurgeryActivities retrieves all the orthopedic_surgery_activity's OrthopedicSurgeryActivities with an executor via assistant_id column.
func (o *User) AssistantOrthopedicSurgeryActivities(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities\".\"assistant_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities\".*"})
	}

	return query
}

// OperatorOrthopedicSurgeryActivities retrieves all the orthopedic_surgery_activity's OrthopedicSurgeryActivities with an executor via operator_id column.
func (o *User) OperatorOrthopedicSurgeryActivities(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities\".\"operator_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities\".*"})
	}

	return query
}

// ResidentOrthopedicSurgeryActivities retrieves all the orthopedic_surgery_activity's OrthopedicSurgeryActivities with an executor via resident_id column.
func (o *User) ResidentOrthopedicSurgeryActivities(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities\".\"resident_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities\".*"})
	}

	return query
}

// SupervisorOrthopedicSurgeryActivities retrieves all the orthopedic_surgery_activity's OrthopedicSurgeryActivities with an executor via supervisor_id column.
func (o *User) SupervisorOrthopedicSurgeryActivities(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities\".\"supervisor_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities\".*"})
	}

	return query
}

// UserOrganizationalUnitRoles retrieves all the user_organizational_unit_role's UserOrganizationalUnitRoles with an executor.
func (o *User) UserOrganizationalUnitRoles(mods ...qm.QueryMod) userOrganizationalUnitRoleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_organizational_unit_roles\".\"user_id\"=?", o.ID),
	)

	query := UserOrganizationalUnitRoles(queryMods...)
	queries.SetFrom(query.Query, "\"user_organizational_unit_roles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_organizational_unit_roles\".*"})
	}

	return query
}

// LoadResidentDopsEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResidentDopsEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dops_evaluations`),
		qm.WhereIn(`dops_evaluations.resident_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dops_evaluations")
	}

	var resultSlice []*DopsEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dops_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dops_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dops_evaluations")
	}

	if len(dopsEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResidentDopsEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dopsEvaluationR{}
			}
			foreign.R.Resident = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ResidentID {
				local.R.ResidentDopsEvaluations = append(local.R.ResidentDopsEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &dopsEvaluationR{}
				}
				foreign.R.Resident = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorDopsEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorDopsEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dops_evaluations`),
		qm.WhereIn(`dops_evaluations.supervisor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dops_evaluations")
	}

	var resultSlice []*DopsEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dops_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dops_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dops_evaluations")
	}

	if len(dopsEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorDopsEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dopsEvaluationR{}
			}
			foreign.R.Supervisor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupervisorID {
				local.R.SupervisorDopsEvaluations = append(local.R.SupervisorDopsEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &dopsEvaluationR{}
				}
				foreign.R.Supervisor = local
				break
			}
		}
	}

	return nil
}

// LoadResidentUserExaminationActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResidentUserExaminationActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examination_activities`),
		qm.WhereIn(`examination_activities.resident_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examination_activities")
	}

	var resultSlice []*ExaminationActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examination_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examination_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination_activities")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResidentUserExaminationActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationActivityR{}
			}
			foreign.R.ResidentUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ResidentUserID {
				local.R.ResidentUserExaminationActivities = append(local.R.ResidentUserExaminationActivities, foreign)
				if foreign.R == nil {
					foreign.R = &examinationActivityR{}
				}
				foreign.R.ResidentUser = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorUserExaminationActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorUserExaminationActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examination_activities`),
		qm.WhereIn(`examination_activities.supervisor_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examination_activities")
	}

	var resultSlice []*ExaminationActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examination_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examination_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination_activities")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorUserExaminationActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationActivityR{}
			}
			foreign.R.SupervisorUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SupervisorUserID) {
				local.R.SupervisorUserExaminationActivities = append(local.R.SupervisorUserExaminationActivities, foreign)
				if foreign.R == nil {
					foreign.R = &examinationActivityR{}
				}
				foreign.R.SupervisorUser = local
				break
			}
		}
	}

	return nil
}

// LoadActivityAuthorUserExaminationsActivitiesReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadActivityAuthorUserExaminationsActivitiesReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activities_reviews`),
		qm.WhereIn(`examinations_activities_reviews.activity_author_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations_activities_reviews")
	}

	var resultSlice []*ExaminationsActivitiesReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations_activities_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations_activities_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activities_reviews")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActivityAuthorUserExaminationsActivitiesReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationsActivitiesReviewR{}
			}
			foreign.R.ActivityAuthorUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ActivityAuthorUserID {
				local.R.ActivityAuthorUserExaminationsActivitiesReviews = append(local.R.ActivityAuthorUserExaminationsActivitiesReviews, foreign)
				if foreign.R == nil {
					foreign.R = &examinationsActivitiesReviewR{}
				}
				foreign.R.ActivityAuthorUser = local
				break
			}
		}
	}

	return nil
}

// LoadActivityReviewerUserExaminationsActivitiesReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadActivityReviewerUserExaminationsActivitiesReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activities_reviews`),
		qm.WhereIn(`examinations_activities_reviews.activity_reviewer_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations_activities_reviews")
	}

	var resultSlice []*ExaminationsActivitiesReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations_activities_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations_activities_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activities_reviews")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActivityReviewerUserExaminationsActivitiesReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationsActivitiesReviewR{}
			}
			foreign.R.ActivityReviewerUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ActivityReviewerUserID {
				local.R.ActivityReviewerUserExaminationsActivitiesReviews = append(local.R.ActivityReviewerUserExaminationsActivitiesReviews, foreign)
				if foreign.R == nil {
					foreign.R = &examinationsActivitiesReviewR{}
				}
				foreign.R.ActivityReviewerUser = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorUserExaminationsActivityReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorUserExaminationsActivityReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activity_reviews`),
		qm.WhereIn(`examinations_activity_reviews.supervisor_user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations_activity_reviews")
	}

	var resultSlice []*ExaminationsActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations_activity_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations_activity_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activity_reviews")
	}

	if len(examinationsActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorUserExaminationsActivityReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationsActivityReviewR{}
			}
			foreign.R.SupervisorUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupervisorUserID {
				local.R.SupervisorUserExaminationsActivityReviews = append(local.R.SupervisorUserExaminationsActivityReviews, foreign)
				if foreign.R == nil {
					foreign.R = &examinationsActivityReviewR{}
				}
				foreign.R.SupervisorUser = local
				break
			}
		}
	}

	return nil
}

// LoadResidentMiniCexEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResidentMiniCexEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mini_cex_evaluations`),
		qm.WhereIn(`mini_cex_evaluations.resident_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mini_cex_evaluations")
	}

	var resultSlice []*MiniCexEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mini_cex_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mini_cex_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mini_cex_evaluations")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResidentMiniCexEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &miniCexEvaluationR{}
			}
			foreign.R.Resident = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ResidentID {
				local.R.ResidentMiniCexEvaluations = append(local.R.ResidentMiniCexEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &miniCexEvaluationR{}
				}
				foreign.R.Resident = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorMiniCexEvaluations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorMiniCexEvaluations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mini_cex_evaluations`),
		qm.WhereIn(`mini_cex_evaluations.supervisor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mini_cex_evaluations")
	}

	var resultSlice []*MiniCexEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mini_cex_evaluations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mini_cex_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mini_cex_evaluations")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorMiniCexEvaluations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &miniCexEvaluationR{}
			}
			foreign.R.Supervisor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupervisorID {
				local.R.SupervisorMiniCexEvaluations = append(local.R.SupervisorMiniCexEvaluations, foreign)
				if foreign.R == nil {
					foreign.R = &miniCexEvaluationR{}
				}
				foreign.R.Supervisor = local
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`notifications`),
		qm.WhereIn(`notifications.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notifications")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notifications")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.Notifications = append(local.R.Notifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadAssistantOrthopedicSurgeriesActivityReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAssistantOrthopedicSurgeriesActivityReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.assistant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgeries_activity_review")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgeries_activity_review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(orthopedicSurgeriesActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssistantOrthopedicSurgeriesActivityReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeriesActivityReviewR{}
			}
			foreign.R.Assistant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssistantID {
				local.R.AssistantOrthopedicSurgeriesActivityReviews = append(local.R.AssistantOrthopedicSurgeriesActivityReviews, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.Assistant = local
				break
			}
		}
	}

	return nil
}

// LoadOperatorOrthopedicSurgeriesActivityReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOperatorOrthopedicSurgeriesActivityReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.operator_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgeries_activity_review")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgeries_activity_review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(orthopedicSurgeriesActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OperatorOrthopedicSurgeriesActivityReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeriesActivityReviewR{}
			}
			foreign.R.Operator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OperatorID {
				local.R.OperatorOrthopedicSurgeriesActivityReviews = append(local.R.OperatorOrthopedicSurgeriesActivityReviews, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.Operator = local
				break
			}
		}
	}

	return nil
}

// LoadResidentOrthopedicSurgeriesActivityReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResidentOrthopedicSurgeriesActivityReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.resident_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgeries_activity_review")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgeries_activity_review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(orthopedicSurgeriesActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResidentOrthopedicSurgeriesActivityReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeriesActivityReviewR{}
			}
			foreign.R.Resident = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ResidentID {
				local.R.ResidentOrthopedicSurgeriesActivityReviews = append(local.R.ResidentOrthopedicSurgeriesActivityReviews, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.Resident = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorOrthopedicSurgeriesActivityReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorOrthopedicSurgeriesActivityReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.supervisor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgeries_activity_review")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgeries_activity_review")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(orthopedicSurgeriesActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorOrthopedicSurgeriesActivityReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeriesActivityReviewR{}
			}
			foreign.R.Supervisor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupervisorID {
				local.R.SupervisorOrthopedicSurgeriesActivityReviews = append(local.R.SupervisorOrthopedicSurgeriesActivityReviews, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.Supervisor = local
				break
			}
		}
	}

	return nil
}

// LoadAssistantOrthopedicSurgeryActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAssistantOrthopedicSurgeryActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.assistant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(orthopedicSurgeryActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssistantOrthopedicSurgeryActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivityR{}
			}
			foreign.R.Assistant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssistantID) {
				local.R.AssistantOrthopedicSurgeryActivities = append(local.R.AssistantOrthopedicSurgeryActivities, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.Assistant = local
				break
			}
		}
	}

	return nil
}

// LoadOperatorOrthopedicSurgeryActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadOperatorOrthopedicSurgeryActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.operator_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(orthopedicSurgeryActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OperatorOrthopedicSurgeryActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivityR{}
			}
			foreign.R.Operator = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OperatorID) {
				local.R.OperatorOrthopedicSurgeryActivities = append(local.R.OperatorOrthopedicSurgeryActivities, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.Operator = local
				break
			}
		}
	}

	return nil
}

// LoadResidentOrthopedicSurgeryActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadResidentOrthopedicSurgeryActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.resident_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(orthopedicSurgeryActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ResidentOrthopedicSurgeryActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivityR{}
			}
			foreign.R.Resident = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ResidentID {
				local.R.ResidentOrthopedicSurgeryActivities = append(local.R.ResidentOrthopedicSurgeryActivities, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.Resident = local
				break
			}
		}
	}

	return nil
}

// LoadSupervisorOrthopedicSurgeryActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadSupervisorOrthopedicSurgeryActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.supervisor_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(orthopedicSurgeryActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupervisorOrthopedicSurgeryActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivityR{}
			}
			foreign.R.Supervisor = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SupervisorID) {
				local.R.SupervisorOrthopedicSurgeryActivities = append(local.R.SupervisorOrthopedicSurgeryActivities, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.Supervisor = local
				break
			}
		}
	}

	return nil
}

// LoadUserOrganizationalUnitRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUserOrganizationalUnitRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		object = maybeUser.(*User)
	} else {
		slice = *maybeUser.(*[]*User)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_organizational_unit_roles`),
		qm.WhereIn(`user_organizational_unit_roles.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_organizational_unit_roles")
	}

	var resultSlice []*UserOrganizationalUnitRole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_organizational_unit_roles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_organizational_unit_roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_organizational_unit_roles")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserOrganizationalUnitRoles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOrganizationalUnitRoleR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserOrganizationalUnitRoles = append(local.R.UserOrganizationalUnitRoles, foreign)
				if foreign.R == nil {
					foreign.R = &userOrganizationalUnitRoleR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// AddResidentDopsEvaluations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResidentDopsEvaluations.
// Sets related.R.Resident appropriately.
func (o *User) AddResidentDopsEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DopsEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResidentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dops_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resident_id"}),
				strmangle.WhereClause("\"", "\"", 2, dopsEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResidentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResidentDopsEvaluations: related,
		}
	} else {
		o.R.ResidentDopsEvaluations = append(o.R.ResidentDopsEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dopsEvaluationR{
				Resident: o,
			}
		} else {
			rel.R.Resident = o
		}
	}
	return nil
}

// AddSupervisorDopsEvaluations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorDopsEvaluations.
// Sets related.R.Supervisor appropriately.
func (o *User) AddSupervisorDopsEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DopsEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupervisorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dops_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_id"}),
				strmangle.WhereClause("\"", "\"", 2, dopsEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupervisorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorDopsEvaluations: related,
		}
	} else {
		o.R.SupervisorDopsEvaluations = append(o.R.SupervisorDopsEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dopsEvaluationR{
				Supervisor: o,
			}
		} else {
			rel.R.Supervisor = o
		}
	}
	return nil
}

// AddResidentUserExaminationActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResidentUserExaminationActivities.
// Sets related.R.ResidentUser appropriately.
func (o *User) AddResidentUserExaminationActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResidentUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examination_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resident_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResidentUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResidentUserExaminationActivities: related,
		}
	} else {
		o.R.ResidentUserExaminationActivities = append(o.R.ResidentUserExaminationActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationActivityR{
				ResidentUser: o,
			}
		} else {
			rel.R.ResidentUser = o
		}
	}
	return nil
}

// AddSupervisorUserExaminationActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorUserExaminationActivities.
// Sets related.R.SupervisorUser appropriately.
func (o *User) AddSupervisorUserExaminationActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SupervisorUserID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examination_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SupervisorUserID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorUserExaminationActivities: related,
		}
	} else {
		o.R.SupervisorUserExaminationActivities = append(o.R.SupervisorUserExaminationActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationActivityR{
				SupervisorUser: o,
			}
		} else {
			rel.R.SupervisorUser = o
		}
	}
	return nil
}

// SetSupervisorUserExaminationActivities removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SupervisorUser's SupervisorUserExaminationActivities accordingly.
// Replaces o.R.SupervisorUserExaminationActivities with related.
// Sets related.R.SupervisorUser's SupervisorUserExaminationActivities accordingly.
func (o *User) SetSupervisorUserExaminationActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationActivity) error {
	query := "update \"examination_activities\" set \"supervisor_user_id\" = null where \"supervisor_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SupervisorUserExaminationActivities {
			queries.SetScanner(&rel.SupervisorUserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SupervisorUser = nil
		}

		o.R.SupervisorUserExaminationActivities = nil
	}
	return o.AddSupervisorUserExaminationActivities(ctx, exec, insert, related...)
}

// RemoveSupervisorUserExaminationActivities relationships from objects passed in.
// Removes related items from R.SupervisorUserExaminationActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.SupervisorUser.
func (o *User) RemoveSupervisorUserExaminationActivities(ctx context.Context, exec boil.ContextExecutor, related ...*ExaminationActivity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SupervisorUserID, nil)
		if rel.R != nil {
			rel.R.SupervisorUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("supervisor_user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SupervisorUserExaminationActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.SupervisorUserExaminationActivities)
			if ln > 1 && i < ln-1 {
				o.R.SupervisorUserExaminationActivities[i] = o.R.SupervisorUserExaminationActivities[ln-1]
			}
			o.R.SupervisorUserExaminationActivities = o.R.SupervisorUserExaminationActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddActivityAuthorUserExaminationsActivitiesReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ActivityAuthorUserExaminationsActivitiesReviews.
// Sets related.R.ActivityAuthorUser appropriately.
func (o *User) AddActivityAuthorUserExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivitiesReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ActivityAuthorUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"activity_author_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ActivityAuthorUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ActivityAuthorUserExaminationsActivitiesReviews: related,
		}
	} else {
		o.R.ActivityAuthorUserExaminationsActivitiesReviews = append(o.R.ActivityAuthorUserExaminationsActivitiesReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationsActivitiesReviewR{
				ActivityAuthorUser: o,
			}
		} else {
			rel.R.ActivityAuthorUser = o
		}
	}
	return nil
}

// AddActivityReviewerUserExaminationsActivitiesReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ActivityReviewerUserExaminationsActivitiesReviews.
// Sets related.R.ActivityReviewerUser appropriately.
func (o *User) AddActivityReviewerUserExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivitiesReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ActivityReviewerUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"activity_reviewer_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ActivityReviewerUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ActivityReviewerUserExaminationsActivitiesReviews: related,
		}
	} else {
		o.R.ActivityReviewerUserExaminationsActivitiesReviews = append(o.R.ActivityReviewerUserExaminationsActivitiesReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationsActivitiesReviewR{
				ActivityReviewerUser: o,
			}
		} else {
			rel.R.ActivityReviewerUser = o
		}
	}
	return nil
}

// AddSupervisorUserExaminationsActivityReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorUserExaminationsActivityReviews.
// Sets related.R.SupervisorUser appropriately.
func (o *User) AddSupervisorUserExaminationsActivityReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivityReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupervisorUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations_activity_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationsActivityReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupervisorUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorUserExaminationsActivityReviews: related,
		}
	} else {
		o.R.SupervisorUserExaminationsActivityReviews = append(o.R.SupervisorUserExaminationsActivityReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationsActivityReviewR{
				SupervisorUser: o,
			}
		} else {
			rel.R.SupervisorUser = o
		}
	}
	return nil
}

// AddResidentMiniCexEvaluations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResidentMiniCexEvaluations.
// Sets related.R.Resident appropriately.
func (o *User) AddResidentMiniCexEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MiniCexEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResidentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resident_id"}),
				strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResidentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResidentMiniCexEvaluations: related,
		}
	} else {
		o.R.ResidentMiniCexEvaluations = append(o.R.ResidentMiniCexEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &miniCexEvaluationR{
				Resident: o,
			}
		} else {
			rel.R.Resident = o
		}
	}
	return nil
}

// AddSupervisorMiniCexEvaluations adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorMiniCexEvaluations.
// Sets related.R.Supervisor appropriately.
func (o *User) AddSupervisorMiniCexEvaluations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MiniCexEvaluation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupervisorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_id"}),
				strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupervisorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorMiniCexEvaluations: related,
		}
	} else {
		o.R.SupervisorMiniCexEvaluations = append(o.R.SupervisorMiniCexEvaluations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &miniCexEvaluationR{
				Supervisor: o,
			}
		} else {
			rel.R.Supervisor = o
		}
	}
	return nil
}

// AddNotifications adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.User appropriately.
func (o *User) AddNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddAssistantOrthopedicSurgeriesActivityReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AssistantOrthopedicSurgeriesActivityReviews.
// Sets related.R.Assistant appropriately.
func (o *User) AddAssistantOrthopedicSurgeriesActivityReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeriesActivityReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssistantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgeries_activity_review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assistant_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssistantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			AssistantOrthopedicSurgeriesActivityReviews: related,
		}
	} else {
		o.R.AssistantOrthopedicSurgeriesActivityReviews = append(o.R.AssistantOrthopedicSurgeriesActivityReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeriesActivityReviewR{
				Assistant: o,
			}
		} else {
			rel.R.Assistant = o
		}
	}
	return nil
}

// AddOperatorOrthopedicSurgeriesActivityReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OperatorOrthopedicSurgeriesActivityReviews.
// Sets related.R.Operator appropriately.
func (o *User) AddOperatorOrthopedicSurgeriesActivityReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeriesActivityReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperatorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgeries_activity_review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"operator_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperatorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			OperatorOrthopedicSurgeriesActivityReviews: related,
		}
	} else {
		o.R.OperatorOrthopedicSurgeriesActivityReviews = append(o.R.OperatorOrthopedicSurgeriesActivityReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeriesActivityReviewR{
				Operator: o,
			}
		} else {
			rel.R.Operator = o
		}
	}
	return nil
}

// AddResidentOrthopedicSurgeriesActivityReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResidentOrthopedicSurgeriesActivityReviews.
// Sets related.R.Resident appropriately.
func (o *User) AddResidentOrthopedicSurgeriesActivityReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeriesActivityReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResidentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgeries_activity_review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resident_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResidentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResidentOrthopedicSurgeriesActivityReviews: related,
		}
	} else {
		o.R.ResidentOrthopedicSurgeriesActivityReviews = append(o.R.ResidentOrthopedicSurgeriesActivityReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeriesActivityReviewR{
				Resident: o,
			}
		} else {
			rel.R.Resident = o
		}
	}
	return nil
}

// AddSupervisorOrthopedicSurgeriesActivityReviews adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorOrthopedicSurgeriesActivityReviews.
// Sets related.R.Supervisor appropriately.
func (o *User) AddSupervisorOrthopedicSurgeriesActivityReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeriesActivityReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupervisorID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgeries_activity_review\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupervisorID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorOrthopedicSurgeriesActivityReviews: related,
		}
	} else {
		o.R.SupervisorOrthopedicSurgeriesActivityReviews = append(o.R.SupervisorOrthopedicSurgeriesActivityReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeriesActivityReviewR{
				Supervisor: o,
			}
		} else {
			rel.R.Supervisor = o
		}
	}
	return nil
}

// AddAssistantOrthopedicSurgeryActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AssistantOrthopedicSurgeryActivities.
// Sets related.R.Assistant appropriately.
func (o *User) AddAssistantOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssistantID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assistant_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssistantID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			AssistantOrthopedicSurgeryActivities: related,
		}
	} else {
		o.R.AssistantOrthopedicSurgeryActivities = append(o.R.AssistantOrthopedicSurgeryActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivityR{
				Assistant: o,
			}
		} else {
			rel.R.Assistant = o
		}
	}
	return nil
}

// SetAssistantOrthopedicSurgeryActivities removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Assistant's AssistantOrthopedicSurgeryActivities accordingly.
// Replaces o.R.AssistantOrthopedicSurgeryActivities with related.
// Sets related.R.Assistant's AssistantOrthopedicSurgeryActivities accordingly.
func (o *User) SetAssistantOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	query := "update \"orthopedic_surgery_activities\" set \"assistant_id\" = null where \"assistant_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssistantOrthopedicSurgeryActivities {
			queries.SetScanner(&rel.AssistantID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Assistant = nil
		}

		o.R.AssistantOrthopedicSurgeryActivities = nil
	}
	return o.AddAssistantOrthopedicSurgeryActivities(ctx, exec, insert, related...)
}

// RemoveAssistantOrthopedicSurgeryActivities relationships from objects passed in.
// Removes related items from R.AssistantOrthopedicSurgeryActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.Assistant.
func (o *User) RemoveAssistantOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, related ...*OrthopedicSurgeryActivity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssistantID, nil)
		if rel.R != nil {
			rel.R.Assistant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assistant_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssistantOrthopedicSurgeryActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssistantOrthopedicSurgeryActivities)
			if ln > 1 && i < ln-1 {
				o.R.AssistantOrthopedicSurgeryActivities[i] = o.R.AssistantOrthopedicSurgeryActivities[ln-1]
			}
			o.R.AssistantOrthopedicSurgeryActivities = o.R.AssistantOrthopedicSurgeryActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddOperatorOrthopedicSurgeryActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.OperatorOrthopedicSurgeryActivities.
// Sets related.R.Operator appropriately.
func (o *User) AddOperatorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperatorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"operator_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperatorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			OperatorOrthopedicSurgeryActivities: related,
		}
	} else {
		o.R.OperatorOrthopedicSurgeryActivities = append(o.R.OperatorOrthopedicSurgeryActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivityR{
				Operator: o,
			}
		} else {
			rel.R.Operator = o
		}
	}
	return nil
}

// SetOperatorOrthopedicSurgeryActivities removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Operator's OperatorOrthopedicSurgeryActivities accordingly.
// Replaces o.R.OperatorOrthopedicSurgeryActivities with related.
// Sets related.R.Operator's OperatorOrthopedicSurgeryActivities accordingly.
func (o *User) SetOperatorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	query := "update \"orthopedic_surgery_activities\" set \"operator_id\" = null where \"operator_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OperatorOrthopedicSurgeryActivities {
			queries.SetScanner(&rel.OperatorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Operator = nil
		}

		o.R.OperatorOrthopedicSurgeryActivities = nil
	}
	return o.AddOperatorOrthopedicSurgeryActivities(ctx, exec, insert, related...)
}

// RemoveOperatorOrthopedicSurgeryActivities relationships from objects passed in.
// Removes related items from R.OperatorOrthopedicSurgeryActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.Operator.
func (o *User) RemoveOperatorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, related ...*OrthopedicSurgeryActivity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperatorID, nil)
		if rel.R != nil {
			rel.R.Operator = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("operator_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperatorOrthopedicSurgeryActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperatorOrthopedicSurgeryActivities)
			if ln > 1 && i < ln-1 {
				o.R.OperatorOrthopedicSurgeryActivities[i] = o.R.OperatorOrthopedicSurgeryActivities[ln-1]
			}
			o.R.OperatorOrthopedicSurgeryActivities = o.R.OperatorOrthopedicSurgeryActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddResidentOrthopedicSurgeryActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.ResidentOrthopedicSurgeryActivities.
// Sets related.R.Resident appropriately.
func (o *User) AddResidentOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ResidentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"resident_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ResidentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			ResidentOrthopedicSurgeryActivities: related,
		}
	} else {
		o.R.ResidentOrthopedicSurgeryActivities = append(o.R.ResidentOrthopedicSurgeryActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivityR{
				Resident: o,
			}
		} else {
			rel.R.Resident = o
		}
	}
	return nil
}

// AddSupervisorOrthopedicSurgeryActivities adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.SupervisorOrthopedicSurgeryActivities.
// Sets related.R.Supervisor appropriately.
func (o *User) AddSupervisorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SupervisorID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SupervisorID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			SupervisorOrthopedicSurgeryActivities: related,
		}
	} else {
		o.R.SupervisorOrthopedicSurgeryActivities = append(o.R.SupervisorOrthopedicSurgeryActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivityR{
				Supervisor: o,
			}
		} else {
			rel.R.Supervisor = o
		}
	}
	return nil
}

// SetSupervisorOrthopedicSurgeryActivities removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Supervisor's SupervisorOrthopedicSurgeryActivities accordingly.
// Replaces o.R.SupervisorOrthopedicSurgeryActivities with related.
// Sets related.R.Supervisor's SupervisorOrthopedicSurgeryActivities accordingly.
func (o *User) SetSupervisorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivity) error {
	query := "update \"orthopedic_surgery_activities\" set \"supervisor_id\" = null where \"supervisor_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SupervisorOrthopedicSurgeryActivities {
			queries.SetScanner(&rel.SupervisorID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Supervisor = nil
		}

		o.R.SupervisorOrthopedicSurgeryActivities = nil
	}
	return o.AddSupervisorOrthopedicSurgeryActivities(ctx, exec, insert, related...)
}

// RemoveSupervisorOrthopedicSurgeryActivities relationships from objects passed in.
// Removes related items from R.SupervisorOrthopedicSurgeryActivities (uses pointer comparison, removal does not keep order)
// Sets related.R.Supervisor.
func (o *User) RemoveSupervisorOrthopedicSurgeryActivities(ctx context.Context, exec boil.ContextExecutor, related ...*OrthopedicSurgeryActivity) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SupervisorID, nil)
		if rel.R != nil {
			rel.R.Supervisor = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("supervisor_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SupervisorOrthopedicSurgeryActivities {
			if rel != ri {
				continue
			}

			ln := len(o.R.SupervisorOrthopedicSurgeryActivities)
			if ln > 1 && i < ln-1 {
				o.R.SupervisorOrthopedicSurgeryActivities[i] = o.R.SupervisorOrthopedicSurgeryActivities[ln-1]
			}
			o.R.SupervisorOrthopedicSurgeryActivities = o.R.SupervisorOrthopedicSurgeryActivities[:ln-1]
			break
		}
	}

	return nil
}

// AddUserOrganizationalUnitRoles adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UserOrganizationalUnitRoles.
// Sets related.R.User appropriately.
func (o *User) AddUserOrganizationalUnitRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserOrganizationalUnitRole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrganizationalUnitRolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UnitID, rel.UserID, rel.RoleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UserOrganizationalUnitRoles: related,
		}
	} else {
		o.R.UserOrganizationalUnitRoles = append(o.R.UserOrganizationalUnitRoles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrganizationalUnitRoleR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""))
	return userQuery{NewQuery(mods...)}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users")
	}

	if err = userObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userObj, err
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM \"users\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users exists")
	}

	return exists, nil
}
