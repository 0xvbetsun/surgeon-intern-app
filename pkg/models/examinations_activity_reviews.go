// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ExaminationsActivityReview is an object representing the database table.
type ExaminationsActivityReview struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SupervisorUserID string      `boil:"supervisor_user_id" json:"supervisor_user_id" toml:"supervisor_user_id" yaml:"supervisor_user_id"`
	DisplayName      string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Annotations      types.JSON  `boil:"annotations" json:"annotations" toml:"annotations" yaml:"annotations"`
	Comment          null.String `boil:"comment" json:"comment,omitempty" toml:"comment" yaml:"comment,omitempty"`

	R *examinationsActivityReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examinationsActivityReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExaminationsActivityReviewColumns = struct {
	ID               string
	SupervisorUserID string
	DisplayName      string
	CreatedAt        string
	Annotations      string
	Comment          string
}{
	ID:               "id",
	SupervisorUserID: "supervisor_user_id",
	DisplayName:      "display_name",
	CreatedAt:        "created_at",
	Annotations:      "annotations",
	Comment:          "comment",
}

var ExaminationsActivityReviewTableColumns = struct {
	ID               string
	SupervisorUserID string
	DisplayName      string
	CreatedAt        string
	Annotations      string
	Comment          string
}{
	ID:               "examinations_activity_reviews.id",
	SupervisorUserID: "examinations_activity_reviews.supervisor_user_id",
	DisplayName:      "examinations_activity_reviews.display_name",
	CreatedAt:        "examinations_activity_reviews.created_at",
	Annotations:      "examinations_activity_reviews.annotations",
	Comment:          "examinations_activity_reviews.comment",
}

// Generated where

var ExaminationsActivityReviewWhere = struct {
	ID               whereHelperstring
	SupervisorUserID whereHelperstring
	DisplayName      whereHelperstring
	CreatedAt        whereHelpertime_Time
	Annotations      whereHelpertypes_JSON
	Comment          whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"examinations_activity_reviews\".\"id\""},
	SupervisorUserID: whereHelperstring{field: "\"examinations_activity_reviews\".\"supervisor_user_id\""},
	DisplayName:      whereHelperstring{field: "\"examinations_activity_reviews\".\"display_name\""},
	CreatedAt:        whereHelpertime_Time{field: "\"examinations_activity_reviews\".\"created_at\""},
	Annotations:      whereHelpertypes_JSON{field: "\"examinations_activity_reviews\".\"annotations\""},
	Comment:          whereHelpernull_String{field: "\"examinations_activity_reviews\".\"comment\""},
}

// ExaminationsActivityReviewRels is where relationship names are stored.
var ExaminationsActivityReviewRels = struct {
	SupervisorUser                string
	ExaminationsActivitiesReviews string
}{
	SupervisorUser:                "SupervisorUser",
	ExaminationsActivitiesReviews: "ExaminationsActivitiesReviews",
}

// examinationsActivityReviewR is where relationships are stored.
type examinationsActivityReviewR struct {
	SupervisorUser                *User                             `boil:"SupervisorUser" json:"SupervisorUser" toml:"SupervisorUser" yaml:"SupervisorUser"`
	ExaminationsActivitiesReviews ExaminationsActivitiesReviewSlice `boil:"ExaminationsActivitiesReviews" json:"ExaminationsActivitiesReviews" toml:"ExaminationsActivitiesReviews" yaml:"ExaminationsActivitiesReviews"`
}

// NewStruct creates a new relationship struct
func (*examinationsActivityReviewR) NewStruct() *examinationsActivityReviewR {
	return &examinationsActivityReviewR{}
}

// examinationsActivityReviewL is where Load methods for each relationship are stored.
type examinationsActivityReviewL struct{}

var (
	examinationsActivityReviewAllColumns            = []string{"id", "supervisor_user_id", "display_name", "created_at", "annotations", "comment"}
	examinationsActivityReviewColumnsWithoutDefault = []string{"supervisor_user_id", "display_name", "annotations", "comment"}
	examinationsActivityReviewColumnsWithDefault    = []string{"id", "created_at"}
	examinationsActivityReviewPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExaminationsActivityReviewSlice is an alias for a slice of pointers to ExaminationsActivityReview.
	// This should almost always be used instead of []ExaminationsActivityReview.
	ExaminationsActivityReviewSlice []*ExaminationsActivityReview
	// ExaminationsActivityReviewHook is the signature for custom ExaminationsActivityReview hook methods
	ExaminationsActivityReviewHook func(context.Context, boil.ContextExecutor, *ExaminationsActivityReview) error

	examinationsActivityReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examinationsActivityReviewType                 = reflect.TypeOf(&ExaminationsActivityReview{})
	examinationsActivityReviewMapping              = queries.MakeStructMapping(examinationsActivityReviewType)
	examinationsActivityReviewPrimaryKeyMapping, _ = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, examinationsActivityReviewPrimaryKeyColumns)
	examinationsActivityReviewInsertCacheMut       sync.RWMutex
	examinationsActivityReviewInsertCache          = make(map[string]insertCache)
	examinationsActivityReviewUpdateCacheMut       sync.RWMutex
	examinationsActivityReviewUpdateCache          = make(map[string]updateCache)
	examinationsActivityReviewUpsertCacheMut       sync.RWMutex
	examinationsActivityReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examinationsActivityReviewBeforeInsertHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewBeforeUpdateHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewBeforeDeleteHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewBeforeUpsertHooks []ExaminationsActivityReviewHook

var examinationsActivityReviewAfterInsertHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewAfterSelectHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewAfterUpdateHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewAfterDeleteHooks []ExaminationsActivityReviewHook
var examinationsActivityReviewAfterUpsertHooks []ExaminationsActivityReviewHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExaminationsActivityReview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExaminationsActivityReview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExaminationsActivityReview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExaminationsActivityReview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExaminationsActivityReview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExaminationsActivityReview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExaminationsActivityReview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExaminationsActivityReview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExaminationsActivityReview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivityReviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExaminationsActivityReviewHook registers your hook function for all future operations.
func AddExaminationsActivityReviewHook(hookPoint boil.HookPoint, examinationsActivityReviewHook ExaminationsActivityReviewHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		examinationsActivityReviewBeforeInsertHooks = append(examinationsActivityReviewBeforeInsertHooks, examinationsActivityReviewHook)
	case boil.BeforeUpdateHook:
		examinationsActivityReviewBeforeUpdateHooks = append(examinationsActivityReviewBeforeUpdateHooks, examinationsActivityReviewHook)
	case boil.BeforeDeleteHook:
		examinationsActivityReviewBeforeDeleteHooks = append(examinationsActivityReviewBeforeDeleteHooks, examinationsActivityReviewHook)
	case boil.BeforeUpsertHook:
		examinationsActivityReviewBeforeUpsertHooks = append(examinationsActivityReviewBeforeUpsertHooks, examinationsActivityReviewHook)
	case boil.AfterInsertHook:
		examinationsActivityReviewAfterInsertHooks = append(examinationsActivityReviewAfterInsertHooks, examinationsActivityReviewHook)
	case boil.AfterSelectHook:
		examinationsActivityReviewAfterSelectHooks = append(examinationsActivityReviewAfterSelectHooks, examinationsActivityReviewHook)
	case boil.AfterUpdateHook:
		examinationsActivityReviewAfterUpdateHooks = append(examinationsActivityReviewAfterUpdateHooks, examinationsActivityReviewHook)
	case boil.AfterDeleteHook:
		examinationsActivityReviewAfterDeleteHooks = append(examinationsActivityReviewAfterDeleteHooks, examinationsActivityReviewHook)
	case boil.AfterUpsertHook:
		examinationsActivityReviewAfterUpsertHooks = append(examinationsActivityReviewAfterUpsertHooks, examinationsActivityReviewHook)
	}
}

// One returns a single examinationsActivityReview record from the query.
func (q examinationsActivityReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExaminationsActivityReview, error) {
	o := &ExaminationsActivityReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for examinations_activity_reviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExaminationsActivityReview records from the query.
func (q examinationsActivityReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExaminationsActivityReviewSlice, error) {
	var o []*ExaminationsActivityReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExaminationsActivityReview slice")
	}

	if len(examinationsActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExaminationsActivityReview records in the query.
func (q examinationsActivityReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count examinations_activity_reviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examinationsActivityReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if examinations_activity_reviews exists")
	}

	return count > 0, nil
}

// SupervisorUser pointed to by the foreign key.
func (o *ExaminationsActivityReview) SupervisorUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupervisorUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ExaminationsActivitiesReviews retrieves all the examinations_activities_review's ExaminationsActivitiesReviews with an executor.
func (o *ExaminationsActivityReview) ExaminationsActivitiesReviews(mods ...qm.QueryMod) examinationsActivitiesReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations_activities_reviews\".\"examinations_activity_reviews_id\"=?", o.ID),
	)

	query := ExaminationsActivitiesReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activities_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations_activities_reviews\".*"})
	}

	return query
}

// LoadSupervisorUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationsActivityReviewL) LoadSupervisorUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivityReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivityReview
	var object *ExaminationsActivityReview

	if singular {
		object = maybeExaminationsActivityReview.(*ExaminationsActivityReview)
	} else {
		slice = *maybeExaminationsActivityReview.(*[]*ExaminationsActivityReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivityReviewR{}
		}
		args = append(args, object.SupervisorUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivityReviewR{}
			}

			for _, a := range args {
				if a == obj.SupervisorUserID {
					continue Outer
				}
			}

			args = append(args, obj.SupervisorUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(examinationsActivityReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupervisorUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SupervisorUserExaminationsActivityReviews = append(foreign.R.SupervisorUserExaminationsActivityReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupervisorUserID == foreign.ID {
				local.R.SupervisorUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SupervisorUserExaminationsActivityReviews = append(foreign.R.SupervisorUserExaminationsActivityReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadExaminationsActivitiesReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examinationsActivityReviewL) LoadExaminationsActivitiesReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivityReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivityReview
	var object *ExaminationsActivityReview

	if singular {
		object = maybeExaminationsActivityReview.(*ExaminationsActivityReview)
	} else {
		slice = *maybeExaminationsActivityReview.(*[]*ExaminationsActivityReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivityReviewR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivityReviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activities_reviews`),
		qm.WhereIn(`examinations_activities_reviews.examinations_activity_reviews_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations_activities_reviews")
	}

	var resultSlice []*ExaminationsActivitiesReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations_activities_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations_activities_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activities_reviews")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExaminationsActivitiesReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationsActivitiesReviewR{}
			}
			foreign.R.ExaminationsActivityReview = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ExaminationsActivityReviewsID) {
				local.R.ExaminationsActivitiesReviews = append(local.R.ExaminationsActivitiesReviews, foreign)
				if foreign.R == nil {
					foreign.R = &examinationsActivitiesReviewR{}
				}
				foreign.R.ExaminationsActivityReview = local
				break
			}
		}
	}

	return nil
}

// SetSupervisorUser of the examinationsActivityReview to the related item.
// Sets o.R.SupervisorUser to related.
// Adds o to related.R.SupervisorUserExaminationsActivityReviews.
func (o *ExaminationsActivityReview) SetSupervisorUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations_activity_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationsActivityReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupervisorUserID = related.ID
	if o.R == nil {
		o.R = &examinationsActivityReviewR{
			SupervisorUser: related,
		}
	} else {
		o.R.SupervisorUser = related
	}

	if related.R == nil {
		related.R = &userR{
			SupervisorUserExaminationsActivityReviews: ExaminationsActivityReviewSlice{o},
		}
	} else {
		related.R.SupervisorUserExaminationsActivityReviews = append(related.R.SupervisorUserExaminationsActivityReviews, o)
	}

	return nil
}

// AddExaminationsActivitiesReviews adds the given related objects to the existing relationships
// of the examinations_activity_review, optionally inserting them as new records.
// Appends related to o.R.ExaminationsActivitiesReviews.
// Sets related.R.ExaminationsActivityReview appropriately.
func (o *ExaminationsActivityReview) AddExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivitiesReview) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ExaminationsActivityReviewsID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"examinations_activity_reviews_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ExaminationsActivityReviewsID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &examinationsActivityReviewR{
			ExaminationsActivitiesReviews: related,
		}
	} else {
		o.R.ExaminationsActivitiesReviews = append(o.R.ExaminationsActivitiesReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationsActivitiesReviewR{
				ExaminationsActivityReview: o,
			}
		} else {
			rel.R.ExaminationsActivityReview = o
		}
	}
	return nil
}

// SetExaminationsActivitiesReviews removes all previously related items of the
// examinations_activity_review replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ExaminationsActivityReview's ExaminationsActivitiesReviews accordingly.
// Replaces o.R.ExaminationsActivitiesReviews with related.
// Sets related.R.ExaminationsActivityReview's ExaminationsActivitiesReviews accordingly.
func (o *ExaminationsActivityReview) SetExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivitiesReview) error {
	query := "update \"examinations_activities_reviews\" set \"examinations_activity_reviews_id\" = null where \"examinations_activity_reviews_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ExaminationsActivitiesReviews {
			queries.SetScanner(&rel.ExaminationsActivityReviewsID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ExaminationsActivityReview = nil
		}

		o.R.ExaminationsActivitiesReviews = nil
	}
	return o.AddExaminationsActivitiesReviews(ctx, exec, insert, related...)
}

// RemoveExaminationsActivitiesReviews relationships from objects passed in.
// Removes related items from R.ExaminationsActivitiesReviews (uses pointer comparison, removal does not keep order)
// Sets related.R.ExaminationsActivityReview.
func (o *ExaminationsActivityReview) RemoveExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, related ...*ExaminationsActivitiesReview) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ExaminationsActivityReviewsID, nil)
		if rel.R != nil {
			rel.R.ExaminationsActivityReview = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("examinations_activity_reviews_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ExaminationsActivitiesReviews {
			if rel != ri {
				continue
			}

			ln := len(o.R.ExaminationsActivitiesReviews)
			if ln > 1 && i < ln-1 {
				o.R.ExaminationsActivitiesReviews[i] = o.R.ExaminationsActivitiesReviews[ln-1]
			}
			o.R.ExaminationsActivitiesReviews = o.R.ExaminationsActivitiesReviews[:ln-1]
			break
		}
	}

	return nil
}

// ExaminationsActivityReviews retrieves all the records using an executor.
func ExaminationsActivityReviews(mods ...qm.QueryMod) examinationsActivityReviewQuery {
	mods = append(mods, qm.From("\"examinations_activity_reviews\""))
	return examinationsActivityReviewQuery{NewQuery(mods...)}
}

// FindExaminationsActivityReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExaminationsActivityReview(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExaminationsActivityReview, error) {
	examinationsActivityReviewObj := &ExaminationsActivityReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"examinations_activity_reviews\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examinationsActivityReviewObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from examinations_activity_reviews")
	}

	if err = examinationsActivityReviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examinationsActivityReviewObj, err
	}

	return examinationsActivityReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExaminationsActivityReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations_activity_reviews provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationsActivityReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examinationsActivityReviewInsertCacheMut.RLock()
	cache, cached := examinationsActivityReviewInsertCache[key]
	examinationsActivityReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examinationsActivityReviewAllColumns,
			examinationsActivityReviewColumnsWithDefault,
			examinationsActivityReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"examinations_activity_reviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"examinations_activity_reviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into examinations_activity_reviews")
	}

	if !cached {
		examinationsActivityReviewInsertCacheMut.Lock()
		examinationsActivityReviewInsertCache[key] = cache
		examinationsActivityReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExaminationsActivityReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExaminationsActivityReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examinationsActivityReviewUpdateCacheMut.RLock()
	cache, cached := examinationsActivityReviewUpdateCache[key]
	examinationsActivityReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examinationsActivityReviewAllColumns,
			examinationsActivityReviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update examinations_activity_reviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"examinations_activity_reviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examinationsActivityReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, append(wl, examinationsActivityReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update examinations_activity_reviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for examinations_activity_reviews")
	}

	if !cached {
		examinationsActivityReviewUpdateCacheMut.Lock()
		examinationsActivityReviewUpdateCache[key] = cache
		examinationsActivityReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examinationsActivityReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for examinations_activity_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for examinations_activity_reviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExaminationsActivityReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivityReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"examinations_activity_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examinationsActivityReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examinationsActivityReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examinationsActivityReview")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExaminationsActivityReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations_activity_reviews provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationsActivityReviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examinationsActivityReviewUpsertCacheMut.RLock()
	cache, cached := examinationsActivityReviewUpsertCache[key]
	examinationsActivityReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			examinationsActivityReviewAllColumns,
			examinationsActivityReviewColumnsWithDefault,
			examinationsActivityReviewColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			examinationsActivityReviewAllColumns,
			examinationsActivityReviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert examinations_activity_reviews, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(examinationsActivityReviewPrimaryKeyColumns))
			copy(conflict, examinationsActivityReviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"examinations_activity_reviews\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examinationsActivityReviewType, examinationsActivityReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert examinations_activity_reviews")
	}

	if !cached {
		examinationsActivityReviewUpsertCacheMut.Lock()
		examinationsActivityReviewUpsertCache[key] = cache
		examinationsActivityReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExaminationsActivityReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExaminationsActivityReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExaminationsActivityReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examinationsActivityReviewPrimaryKeyMapping)
	sql := "DELETE FROM \"examinations_activity_reviews\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from examinations_activity_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for examinations_activity_reviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examinationsActivityReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examinationsActivityReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinations_activity_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations_activity_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExaminationsActivityReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examinationsActivityReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivityReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"examinations_activity_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationsActivityReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinationsActivityReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations_activity_reviews")
	}

	if len(examinationsActivityReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExaminationsActivityReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExaminationsActivityReview(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExaminationsActivityReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExaminationsActivityReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivityReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"examinations_activity_reviews\".* FROM \"examinations_activity_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationsActivityReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExaminationsActivityReviewSlice")
	}

	*o = slice

	return nil
}

// ExaminationsActivityReviewExists checks if the ExaminationsActivityReview row exists.
func ExaminationsActivityReviewExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"examinations_activity_reviews\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if examinations_activity_reviews exists")
	}

	return exists, nil
}
