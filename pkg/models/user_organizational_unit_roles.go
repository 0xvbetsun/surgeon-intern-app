// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserOrganizationalUnitRole is an object representing the database table.
type UserOrganizationalUnitRole struct {
	UnitID string `boil:"unit_id" json:"unit_id" toml:"unit_id" yaml:"unit_id"`
	UserID string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RoleID int    `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *userOrganizationalUnitRoleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOrganizationalUnitRoleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOrganizationalUnitRoleColumns = struct {
	UnitID string
	UserID string
	RoleID string
}{
	UnitID: "unit_id",
	UserID: "user_id",
	RoleID: "role_id",
}

var UserOrganizationalUnitRoleTableColumns = struct {
	UnitID string
	UserID string
	RoleID string
}{
	UnitID: "user_organizational_unit_roles.unit_id",
	UserID: "user_organizational_unit_roles.user_id",
	RoleID: "user_organizational_unit_roles.role_id",
}

// Generated where

var UserOrganizationalUnitRoleWhere = struct {
	UnitID whereHelperstring
	UserID whereHelperstring
	RoleID whereHelperint
}{
	UnitID: whereHelperstring{field: "\"user_organizational_unit_roles\".\"unit_id\""},
	UserID: whereHelperstring{field: "\"user_organizational_unit_roles\".\"user_id\""},
	RoleID: whereHelperint{field: "\"user_organizational_unit_roles\".\"role_id\""},
}

// UserOrganizationalUnitRoleRels is where relationship names are stored.
var UserOrganizationalUnitRoleRels = struct {
	Role string
	Unit string
	User string
}{
	Role: "Role",
	Unit: "Unit",
	User: "User",
}

// userOrganizationalUnitRoleR is where relationships are stored.
type userOrganizationalUnitRoleR struct {
	Role *Role               `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	Unit *OrganizationalUnit `boil:"Unit" json:"Unit" toml:"Unit" yaml:"Unit"`
	User *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userOrganizationalUnitRoleR) NewStruct() *userOrganizationalUnitRoleR {
	return &userOrganizationalUnitRoleR{}
}

// userOrganizationalUnitRoleL is where Load methods for each relationship are stored.
type userOrganizationalUnitRoleL struct{}

var (
	userOrganizationalUnitRoleAllColumns            = []string{"unit_id", "user_id", "role_id"}
	userOrganizationalUnitRoleColumnsWithoutDefault = []string{"unit_id", "user_id", "role_id"}
	userOrganizationalUnitRoleColumnsWithDefault    = []string{}
	userOrganizationalUnitRolePrimaryKeyColumns     = []string{"unit_id", "user_id", "role_id"}
)

type (
	// UserOrganizationalUnitRoleSlice is an alias for a slice of pointers to UserOrganizationalUnitRole.
	// This should almost always be used instead of []UserOrganizationalUnitRole.
	UserOrganizationalUnitRoleSlice []*UserOrganizationalUnitRole
	// UserOrganizationalUnitRoleHook is the signature for custom UserOrganizationalUnitRole hook methods
	UserOrganizationalUnitRoleHook func(context.Context, boil.ContextExecutor, *UserOrganizationalUnitRole) error

	userOrganizationalUnitRoleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOrganizationalUnitRoleType                 = reflect.TypeOf(&UserOrganizationalUnitRole{})
	userOrganizationalUnitRoleMapping              = queries.MakeStructMapping(userOrganizationalUnitRoleType)
	userOrganizationalUnitRolePrimaryKeyMapping, _ = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, userOrganizationalUnitRolePrimaryKeyColumns)
	userOrganizationalUnitRoleInsertCacheMut       sync.RWMutex
	userOrganizationalUnitRoleInsertCache          = make(map[string]insertCache)
	userOrganizationalUnitRoleUpdateCacheMut       sync.RWMutex
	userOrganizationalUnitRoleUpdateCache          = make(map[string]updateCache)
	userOrganizationalUnitRoleUpsertCacheMut       sync.RWMutex
	userOrganizationalUnitRoleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userOrganizationalUnitRoleBeforeInsertHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleBeforeUpdateHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleBeforeDeleteHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleBeforeUpsertHooks []UserOrganizationalUnitRoleHook

var userOrganizationalUnitRoleAfterInsertHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleAfterSelectHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleAfterUpdateHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleAfterDeleteHooks []UserOrganizationalUnitRoleHook
var userOrganizationalUnitRoleAfterUpsertHooks []UserOrganizationalUnitRoleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOrganizationalUnitRole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOrganizationalUnitRole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOrganizationalUnitRole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOrganizationalUnitRole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOrganizationalUnitRole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOrganizationalUnitRole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOrganizationalUnitRole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOrganizationalUnitRole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOrganizationalUnitRole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userOrganizationalUnitRoleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOrganizationalUnitRoleHook registers your hook function for all future operations.
func AddUserOrganizationalUnitRoleHook(hookPoint boil.HookPoint, userOrganizationalUnitRoleHook UserOrganizationalUnitRoleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userOrganizationalUnitRoleBeforeInsertHooks = append(userOrganizationalUnitRoleBeforeInsertHooks, userOrganizationalUnitRoleHook)
	case boil.BeforeUpdateHook:
		userOrganizationalUnitRoleBeforeUpdateHooks = append(userOrganizationalUnitRoleBeforeUpdateHooks, userOrganizationalUnitRoleHook)
	case boil.BeforeDeleteHook:
		userOrganizationalUnitRoleBeforeDeleteHooks = append(userOrganizationalUnitRoleBeforeDeleteHooks, userOrganizationalUnitRoleHook)
	case boil.BeforeUpsertHook:
		userOrganizationalUnitRoleBeforeUpsertHooks = append(userOrganizationalUnitRoleBeforeUpsertHooks, userOrganizationalUnitRoleHook)
	case boil.AfterInsertHook:
		userOrganizationalUnitRoleAfterInsertHooks = append(userOrganizationalUnitRoleAfterInsertHooks, userOrganizationalUnitRoleHook)
	case boil.AfterSelectHook:
		userOrganizationalUnitRoleAfterSelectHooks = append(userOrganizationalUnitRoleAfterSelectHooks, userOrganizationalUnitRoleHook)
	case boil.AfterUpdateHook:
		userOrganizationalUnitRoleAfterUpdateHooks = append(userOrganizationalUnitRoleAfterUpdateHooks, userOrganizationalUnitRoleHook)
	case boil.AfterDeleteHook:
		userOrganizationalUnitRoleAfterDeleteHooks = append(userOrganizationalUnitRoleAfterDeleteHooks, userOrganizationalUnitRoleHook)
	case boil.AfterUpsertHook:
		userOrganizationalUnitRoleAfterUpsertHooks = append(userOrganizationalUnitRoleAfterUpsertHooks, userOrganizationalUnitRoleHook)
	}
}

// One returns a single userOrganizationalUnitRole record from the query.
func (q userOrganizationalUnitRoleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserOrganizationalUnitRole, error) {
	o := &UserOrganizationalUnitRole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_organizational_unit_roles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserOrganizationalUnitRole records from the query.
func (q userOrganizationalUnitRoleQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserOrganizationalUnitRoleSlice, error) {
	var o []*UserOrganizationalUnitRole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOrganizationalUnitRole slice")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserOrganizationalUnitRole records in the query.
func (q userOrganizationalUnitRoleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_organizational_unit_roles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userOrganizationalUnitRoleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_organizational_unit_roles exists")
	}

	return count > 0, nil
}

// Role pointed to by the foreign key.
func (o *UserOrganizationalUnitRole) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "\"roles\"")

	return query
}

// Unit pointed to by the foreign key.
func (o *UserOrganizationalUnitRole) Unit(mods ...qm.QueryMod) organizationalUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UnitID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserOrganizationalUnitRole) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrganizationalUnitRoleL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserOrganizationalUnitRole interface{}, mods queries.Applicator) error {
	var slice []*UserOrganizationalUnitRole
	var object *UserOrganizationalUnitRole

	if singular {
		object = maybeUserOrganizationalUnitRole.(*UserOrganizationalUnitRole)
	} else {
		slice = *maybeUserOrganizationalUnitRole.(*[]*UserOrganizationalUnitRole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrganizationalUnitRoleR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrganizationalUnitRoleR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.UserOrganizationalUnitRoles = append(foreign.R.UserOrganizationalUnitRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UserOrganizationalUnitRoles = append(foreign.R.UserOrganizationalUnitRoles, local)
				break
			}
		}
	}

	return nil
}

// LoadUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrganizationalUnitRoleL) LoadUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserOrganizationalUnitRole interface{}, mods queries.Applicator) error {
	var slice []*UserOrganizationalUnitRole
	var object *UserOrganizationalUnitRole

	if singular {
		object = maybeUserOrganizationalUnitRole.(*UserOrganizationalUnitRole)
	} else {
		slice = *maybeUserOrganizationalUnitRole.(*[]*UserOrganizationalUnitRole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrganizationalUnitRoleR{}
		}
		args = append(args, object.UnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrganizationalUnitRoleR{}
			}

			for _, a := range args {
				if a == obj.UnitID {
					continue Outer
				}
			}

			args = append(args, obj.UnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnit")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Unit = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitR{}
		}
		foreign.R.UnitUserOrganizationalUnitRoles = append(foreign.R.UnitUserOrganizationalUnitRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UnitID == foreign.ID {
				local.R.Unit = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.UnitUserOrganizationalUnitRoles = append(foreign.R.UnitUserOrganizationalUnitRoles, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrganizationalUnitRoleL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserOrganizationalUnitRole interface{}, mods queries.Applicator) error {
	var slice []*UserOrganizationalUnitRole
	var object *UserOrganizationalUnitRole

	if singular {
		object = maybeUserOrganizationalUnitRole.(*UserOrganizationalUnitRole)
	} else {
		slice = *maybeUserOrganizationalUnitRole.(*[]*UserOrganizationalUnitRole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrganizationalUnitRoleR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrganizationalUnitRoleR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userOrganizationalUnitRoleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserOrganizationalUnitRoles = append(foreign.R.UserOrganizationalUnitRoles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserOrganizationalUnitRoles = append(foreign.R.UserOrganizationalUnitRoles, local)
				break
			}
		}
	}

	return nil
}

// SetRole of the userOrganizationalUnitRole to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.UserOrganizationalUnitRoles.
func (o *UserOrganizationalUnitRole) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrganizationalUnitRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UnitID, o.UserID, o.RoleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &userOrganizationalUnitRoleR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			UserOrganizationalUnitRoles: UserOrganizationalUnitRoleSlice{o},
		}
	} else {
		related.R.UserOrganizationalUnitRoles = append(related.R.UserOrganizationalUnitRoles, o)
	}

	return nil
}

// SetUnit of the userOrganizationalUnitRole to the related item.
// Sets o.R.Unit to related.
// Adds o to related.R.UnitUserOrganizationalUnitRoles.
func (o *UserOrganizationalUnitRole) SetUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrganizationalUnitRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UnitID, o.UserID, o.RoleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UnitID = related.ID
	if o.R == nil {
		o.R = &userOrganizationalUnitRoleR{
			Unit: related,
		}
	} else {
		o.R.Unit = related
	}

	if related.R == nil {
		related.R = &organizationalUnitR{
			UnitUserOrganizationalUnitRoles: UserOrganizationalUnitRoleSlice{o},
		}
	} else {
		related.R.UnitUserOrganizationalUnitRoles = append(related.R.UnitUserOrganizationalUnitRoles, o)
	}

	return nil
}

// SetUser of the userOrganizationalUnitRole to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserOrganizationalUnitRoles.
func (o *UserOrganizationalUnitRole) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrganizationalUnitRolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UnitID, o.UserID, o.RoleID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userOrganizationalUnitRoleR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserOrganizationalUnitRoles: UserOrganizationalUnitRoleSlice{o},
		}
	} else {
		related.R.UserOrganizationalUnitRoles = append(related.R.UserOrganizationalUnitRoles, o)
	}

	return nil
}

// UserOrganizationalUnitRoles retrieves all the records using an executor.
func UserOrganizationalUnitRoles(mods ...qm.QueryMod) userOrganizationalUnitRoleQuery {
	mods = append(mods, qm.From("\"user_organizational_unit_roles\""))
	return userOrganizationalUnitRoleQuery{NewQuery(mods...)}
}

// FindUserOrganizationalUnitRole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOrganizationalUnitRole(ctx context.Context, exec boil.ContextExecutor, unitID string, userID string, roleID int, selectCols ...string) (*UserOrganizationalUnitRole, error) {
	userOrganizationalUnitRoleObj := &UserOrganizationalUnitRole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_organizational_unit_roles\" where \"unit_id\"=$1 AND \"user_id\"=$2 AND \"role_id\"=$3", sel,
	)

	q := queries.Raw(query, unitID, userID, roleID)

	err := q.Bind(ctx, exec, userOrganizationalUnitRoleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_organizational_unit_roles")
	}

	if err = userOrganizationalUnitRoleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userOrganizationalUnitRoleObj, err
	}

	return userOrganizationalUnitRoleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserOrganizationalUnitRole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_organizational_unit_roles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrganizationalUnitRoleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userOrganizationalUnitRoleInsertCacheMut.RLock()
	cache, cached := userOrganizationalUnitRoleInsertCache[key]
	userOrganizationalUnitRoleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userOrganizationalUnitRoleAllColumns,
			userOrganizationalUnitRoleColumnsWithDefault,
			userOrganizationalUnitRoleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_organizational_unit_roles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_organizational_unit_roles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_organizational_unit_roles")
	}

	if !cached {
		userOrganizationalUnitRoleInsertCacheMut.Lock()
		userOrganizationalUnitRoleInsertCache[key] = cache
		userOrganizationalUnitRoleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserOrganizationalUnitRole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserOrganizationalUnitRole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userOrganizationalUnitRoleUpdateCacheMut.RLock()
	cache, cached := userOrganizationalUnitRoleUpdateCache[key]
	userOrganizationalUnitRoleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userOrganizationalUnitRoleAllColumns,
			userOrganizationalUnitRolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_organizational_unit_roles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userOrganizationalUnitRolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, append(wl, userOrganizationalUnitRolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_organizational_unit_roles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_organizational_unit_roles")
	}

	if !cached {
		userOrganizationalUnitRoleUpdateCacheMut.Lock()
		userOrganizationalUnitRoleUpdateCache[key] = cache
		userOrganizationalUnitRoleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userOrganizationalUnitRoleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_organizational_unit_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_organizational_unit_roles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOrganizationalUnitRoleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrganizationalUnitRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_organizational_unit_roles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userOrganizationalUnitRolePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userOrganizationalUnitRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userOrganizationalUnitRole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserOrganizationalUnitRole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_organizational_unit_roles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrganizationalUnitRoleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOrganizationalUnitRoleUpsertCacheMut.RLock()
	cache, cached := userOrganizationalUnitRoleUpsertCache[key]
	userOrganizationalUnitRoleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userOrganizationalUnitRoleAllColumns,
			userOrganizationalUnitRoleColumnsWithDefault,
			userOrganizationalUnitRoleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userOrganizationalUnitRoleAllColumns,
			userOrganizationalUnitRolePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_organizational_unit_roles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userOrganizationalUnitRolePrimaryKeyColumns))
			copy(conflict, userOrganizationalUnitRolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_organizational_unit_roles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOrganizationalUnitRoleType, userOrganizationalUnitRoleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_organizational_unit_roles")
	}

	if !cached {
		userOrganizationalUnitRoleUpsertCacheMut.Lock()
		userOrganizationalUnitRoleUpsertCache[key] = cache
		userOrganizationalUnitRoleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserOrganizationalUnitRole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOrganizationalUnitRole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOrganizationalUnitRole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOrganizationalUnitRolePrimaryKeyMapping)
	sql := "DELETE FROM \"user_organizational_unit_roles\" WHERE \"unit_id\"=$1 AND \"user_id\"=$2 AND \"role_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_organizational_unit_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_organizational_unit_roles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userOrganizationalUnitRoleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userOrganizationalUnitRoleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_organizational_unit_roles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_organizational_unit_roles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOrganizationalUnitRoleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userOrganizationalUnitRoleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrganizationalUnitRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_organizational_unit_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrganizationalUnitRolePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userOrganizationalUnitRole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_organizational_unit_roles")
	}

	if len(userOrganizationalUnitRoleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOrganizationalUnitRole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserOrganizationalUnitRole(ctx, exec, o.UnitID, o.UserID, o.RoleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrganizationalUnitRoleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserOrganizationalUnitRoleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrganizationalUnitRolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_organizational_unit_roles\".* FROM \"user_organizational_unit_roles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrganizationalUnitRolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOrganizationalUnitRoleSlice")
	}

	*o = slice

	return nil
}

// UserOrganizationalUnitRoleExists checks if the UserOrganizationalUnitRole row exists.
func UserOrganizationalUnitRoleExists(ctx context.Context, exec boil.ContextExecutor, unitID string, userID string, roleID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_organizational_unit_roles\" where \"unit_id\"=$1 AND \"user_id\"=$2 AND \"role_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, unitID, userID, roleID)
	}
	row := exec.QueryRowContext(ctx, sql, unitID, userID, roleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_organizational_unit_roles exists")
	}

	return exists, nil
}
