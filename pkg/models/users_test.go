// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsers(t *testing.T) {
	t.Parallel()

	query := Users()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Users().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if User exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserExists to return true, but got false.")
	}
}

func testUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userFound, err := FindUser(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Users().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Users().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userOne := &User{}
	userTwo := &User{}
	if err = randomize.Struct(seed, userOne, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}
	if err = randomize.Struct(seed, userTwo, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Users().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userOne := &User{}
	userTwo := &User{}
	if err = randomize.Struct(seed, userOne, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}
	if err = randomize.Struct(seed, userTwo, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func userAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *User) error {
	*o = User{}
	return nil
}

func testUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &User{}
	o := &User{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userDBTypes, false); err != nil {
		t.Errorf("Unable to randomize User object: %s", err)
	}

	AddUserHook(boil.BeforeInsertHook, userBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userBeforeInsertHooks = []UserHook{}

	AddUserHook(boil.AfterInsertHook, userAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAfterInsertHooks = []UserHook{}

	AddUserHook(boil.AfterSelectHook, userAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAfterSelectHooks = []UserHook{}

	AddUserHook(boil.BeforeUpdateHook, userBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userBeforeUpdateHooks = []UserHook{}

	AddUserHook(boil.AfterUpdateHook, userAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAfterUpdateHooks = []UserHook{}

	AddUserHook(boil.BeforeDeleteHook, userBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userBeforeDeleteHooks = []UserHook{}

	AddUserHook(boil.AfterDeleteHook, userAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAfterDeleteHooks = []UserHook{}

	AddUserHook(boil.BeforeUpsertHook, userBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userBeforeUpsertHooks = []UserHook{}

	AddUserHook(boil.AfterUpsertHook, userAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAfterUpsertHooks = []UserHook{}
}

func testUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserToManyResidentDopsEvaluations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResidentID = a.ID
	c.ResidentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResidentDopsEvaluations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResidentID == b.ResidentID {
			bFound = true
		}
		if v.ResidentID == c.ResidentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadResidentDopsEvaluations(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentDopsEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResidentDopsEvaluations = nil
	if err = a.L.LoadResidentDopsEvaluations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentDopsEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorDopsEvaluations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupervisorID = a.ID
	c.SupervisorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorDopsEvaluations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupervisorID == b.SupervisorID {
			bFound = true
		}
		if v.SupervisorID == c.SupervisorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorDopsEvaluations(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorDopsEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorDopsEvaluations = nil
	if err = a.L.LoadSupervisorDopsEvaluations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorDopsEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyResidentUserExaminationActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResidentUserID = a.ID
	c.ResidentUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResidentUserExaminationActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResidentUserID == b.ResidentUserID {
			bFound = true
		}
		if v.ResidentUserID == c.ResidentUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadResidentUserExaminationActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentUserExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResidentUserExaminationActivities = nil
	if err = a.L.LoadResidentUserExaminationActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentUserExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorUserExaminationActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SupervisorUserID, a.ID)
	queries.Assign(&c.SupervisorUserID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorUserExaminationActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SupervisorUserID, b.SupervisorUserID) {
			bFound = true
		}
		if queries.Equal(v.SupervisorUserID, c.SupervisorUserID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorUserExaminationActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorUserExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorUserExaminationActivities = nil
	if err = a.L.LoadSupervisorUserExaminationActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorUserExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyActivityAuthorUserExaminationsActivitiesReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ActivityAuthorUserID = a.ID
	c.ActivityAuthorUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ActivityAuthorUserExaminationsActivitiesReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ActivityAuthorUserID == b.ActivityAuthorUserID {
			bFound = true
		}
		if v.ActivityAuthorUserID == c.ActivityAuthorUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadActivityAuthorUserExaminationsActivitiesReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ActivityAuthorUserExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ActivityAuthorUserExaminationsActivitiesReviews = nil
	if err = a.L.LoadActivityAuthorUserExaminationsActivitiesReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ActivityAuthorUserExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyActivityReviewerUserExaminationsActivitiesReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ActivityReviewerUserID = a.ID
	c.ActivityReviewerUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ActivityReviewerUserExaminationsActivitiesReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ActivityReviewerUserID == b.ActivityReviewerUserID {
			bFound = true
		}
		if v.ActivityReviewerUserID == c.ActivityReviewerUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadActivityReviewerUserExaminationsActivitiesReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ActivityReviewerUserExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ActivityReviewerUserExaminationsActivitiesReviews = nil
	if err = a.L.LoadActivityReviewerUserExaminationsActivitiesReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ActivityReviewerUserExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorUserExaminationsActivityReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c ExaminationsActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationsActivityReviewDBTypes, false, examinationsActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationsActivityReviewDBTypes, false, examinationsActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupervisorUserID = a.ID
	c.SupervisorUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorUserExaminationsActivityReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupervisorUserID == b.SupervisorUserID {
			bFound = true
		}
		if v.SupervisorUserID == c.SupervisorUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorUserExaminationsActivityReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorUserExaminationsActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorUserExaminationsActivityReviews = nil
	if err = a.L.LoadSupervisorUserExaminationsActivityReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorUserExaminationsActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyResidentMiniCexEvaluations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResidentID = a.ID
	c.ResidentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResidentMiniCexEvaluations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResidentID == b.ResidentID {
			bFound = true
		}
		if v.ResidentID == c.ResidentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadResidentMiniCexEvaluations(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentMiniCexEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResidentMiniCexEvaluations = nil
	if err = a.L.LoadResidentMiniCexEvaluations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentMiniCexEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorMiniCexEvaluations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupervisorID = a.ID
	c.SupervisorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorMiniCexEvaluations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupervisorID == b.SupervisorID {
			bFound = true
		}
		if v.SupervisorID == c.SupervisorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorMiniCexEvaluations(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorMiniCexEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorMiniCexEvaluations = nil
	if err = a.L.LoadSupervisorMiniCexEvaluations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorMiniCexEvaluations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyNotifications(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, notificationDBTypes, false, notificationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.ID
	c.UserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Notifications().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadNotifications(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyAssistantOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AssistantID = a.ID
	c.AssistantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssistantOrthopedicSurgeriesActivityReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AssistantID == b.AssistantID {
			bFound = true
		}
		if v.AssistantID == c.AssistantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadAssistantOrthopedicSurgeriesActivityReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssistantOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssistantOrthopedicSurgeriesActivityReviews = nil
	if err = a.L.LoadAssistantOrthopedicSurgeriesActivityReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssistantOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyOperatorOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OperatorID = a.ID
	c.OperatorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OperatorOrthopedicSurgeriesActivityReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OperatorID == b.OperatorID {
			bFound = true
		}
		if v.OperatorID == c.OperatorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadOperatorOrthopedicSurgeriesActivityReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OperatorOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OperatorOrthopedicSurgeriesActivityReviews = nil
	if err = a.L.LoadOperatorOrthopedicSurgeriesActivityReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OperatorOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyResidentOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResidentID = a.ID
	c.ResidentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResidentOrthopedicSurgeriesActivityReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResidentID == b.ResidentID {
			bFound = true
		}
		if v.ResidentID == c.ResidentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadResidentOrthopedicSurgeriesActivityReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResidentOrthopedicSurgeriesActivityReviews = nil
	if err = a.L.LoadResidentOrthopedicSurgeriesActivityReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupervisorID = a.ID
	c.SupervisorID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorOrthopedicSurgeriesActivityReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupervisorID == b.SupervisorID {
			bFound = true
		}
		if v.SupervisorID == c.SupervisorID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorOrthopedicSurgeriesActivityReviews(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorOrthopedicSurgeriesActivityReviews = nil
	if err = a.L.LoadSupervisorOrthopedicSurgeriesActivityReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorOrthopedicSurgeriesActivityReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyAssistantOrthopedicSurgeryActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AssistantID, a.ID)
	queries.Assign(&c.AssistantID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssistantOrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AssistantID, b.AssistantID) {
			bFound = true
		}
		if queries.Equal(v.AssistantID, c.AssistantID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadAssistantOrthopedicSurgeryActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssistantOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssistantOrthopedicSurgeryActivities = nil
	if err = a.L.LoadAssistantOrthopedicSurgeryActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssistantOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyOperatorOrthopedicSurgeryActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OperatorID, a.ID)
	queries.Assign(&c.OperatorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OperatorOrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OperatorID, b.OperatorID) {
			bFound = true
		}
		if queries.Equal(v.OperatorID, c.OperatorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadOperatorOrthopedicSurgeryActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OperatorOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OperatorOrthopedicSurgeryActivities = nil
	if err = a.L.LoadOperatorOrthopedicSurgeryActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OperatorOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyResidentOrthopedicSurgeryActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ResidentID = a.ID
	c.ResidentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ResidentOrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ResidentID == b.ResidentID {
			bFound = true
		}
		if v.ResidentID == c.ResidentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadResidentOrthopedicSurgeryActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ResidentOrthopedicSurgeryActivities = nil
	if err = a.L.LoadResidentOrthopedicSurgeryActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ResidentOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManySupervisorOrthopedicSurgeryActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SupervisorID, a.ID)
	queries.Assign(&c.SupervisorID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupervisorOrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SupervisorID, b.SupervisorID) {
			bFound = true
		}
		if queries.Equal(v.SupervisorID, c.SupervisorID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadSupervisorOrthopedicSurgeryActivities(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupervisorOrthopedicSurgeryActivities = nil
	if err = a.L.LoadSupervisorOrthopedicSurgeryActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupervisorOrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyUserOrganizationalUnitRoles(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c UserOrganizationalUnitRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.ID
	c.UserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserOrganizationalUnitRoles().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserSlice{&a}
	if err = a.L.LoadUserOrganizationalUnitRoles(ctx, tx, false, (*[]*User)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserOrganizationalUnitRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserOrganizationalUnitRoles = nil
	if err = a.L.LoadUserOrganizationalUnitRoles(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserOrganizationalUnitRoles); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserToManyAddOpResidentDopsEvaluations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DopsEvaluation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DopsEvaluation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResidentDopsEvaluations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ResidentID {
			t.Error("foreign key was wrong value", a.ID, first.ResidentID)
		}
		if a.ID != second.ResidentID {
			t.Error("foreign key was wrong value", a.ID, second.ResidentID)
		}

		if first.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResidentDopsEvaluations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResidentDopsEvaluations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResidentDopsEvaluations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorDopsEvaluations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DopsEvaluation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DopsEvaluation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorDopsEvaluations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorID)
		}
		if a.ID != second.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorID)
		}

		if first.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorDopsEvaluations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorDopsEvaluations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorDopsEvaluations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpResidentUserExaminationActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResidentUserExaminationActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ResidentUserID {
			t.Error("foreign key was wrong value", a.ID, first.ResidentUserID)
		}
		if a.ID != second.ResidentUserID {
			t.Error("foreign key was wrong value", a.ID, second.ResidentUserID)
		}

		if first.R.ResidentUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ResidentUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResidentUserExaminationActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResidentUserExaminationActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResidentUserExaminationActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorUserExaminationActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorUserExaminationActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SupervisorUserID) {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorUserID)
		}
		if !queries.Equal(a.ID, second.SupervisorUserID) {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorUserID)
		}

		if first.R.SupervisorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SupervisorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorUserExaminationActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorUserExaminationActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorUserExaminationActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserToManySetOpSupervisorUserExaminationActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSupervisorUserExaminationActivities(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SupervisorUserExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSupervisorUserExaminationActivities(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SupervisorUserExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SupervisorUserID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SupervisorUserID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SupervisorUserID) {
		t.Error("foreign key was wrong value", a.ID, d.SupervisorUserID)
	}
	if !queries.Equal(a.ID, e.SupervisorUserID) {
		t.Error("foreign key was wrong value", a.ID, e.SupervisorUserID)
	}

	if b.R.SupervisorUser != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SupervisorUser != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SupervisorUser != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SupervisorUser != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SupervisorUserExaminationActivities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SupervisorUserExaminationActivities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserToManyRemoveOpSupervisorUserExaminationActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSupervisorUserExaminationActivities(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SupervisorUserExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSupervisorUserExaminationActivities(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SupervisorUserExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SupervisorUserID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SupervisorUserID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SupervisorUser != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SupervisorUser != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SupervisorUser != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SupervisorUser != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SupervisorUserExaminationActivities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SupervisorUserExaminationActivities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SupervisorUserExaminationActivities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserToManyAddOpActivityAuthorUserExaminationsActivitiesReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationsActivitiesReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationsActivitiesReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddActivityAuthorUserExaminationsActivitiesReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ActivityAuthorUserID {
			t.Error("foreign key was wrong value", a.ID, first.ActivityAuthorUserID)
		}
		if a.ID != second.ActivityAuthorUserID {
			t.Error("foreign key was wrong value", a.ID, second.ActivityAuthorUserID)
		}

		if first.R.ActivityAuthorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ActivityAuthorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ActivityAuthorUserExaminationsActivitiesReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ActivityAuthorUserExaminationsActivitiesReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ActivityAuthorUserExaminationsActivitiesReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpActivityReviewerUserExaminationsActivitiesReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationsActivitiesReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationsActivitiesReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddActivityReviewerUserExaminationsActivitiesReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ActivityReviewerUserID {
			t.Error("foreign key was wrong value", a.ID, first.ActivityReviewerUserID)
		}
		if a.ID != second.ActivityReviewerUserID {
			t.Error("foreign key was wrong value", a.ID, second.ActivityReviewerUserID)
		}

		if first.R.ActivityReviewerUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ActivityReviewerUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ActivityReviewerUserExaminationsActivitiesReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ActivityReviewerUserExaminationsActivitiesReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ActivityReviewerUserExaminationsActivitiesReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorUserExaminationsActivityReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e ExaminationsActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationsActivityReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationsActivityReviewDBTypes, false, strmangle.SetComplement(examinationsActivityReviewPrimaryKeyColumns, examinationsActivityReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationsActivityReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorUserExaminationsActivityReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupervisorUserID {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorUserID)
		}
		if a.ID != second.SupervisorUserID {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorUserID)
		}

		if first.R.SupervisorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SupervisorUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorUserExaminationsActivityReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorUserExaminationsActivityReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorUserExaminationsActivityReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpResidentMiniCexEvaluations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MiniCexEvaluation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MiniCexEvaluation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResidentMiniCexEvaluations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ResidentID {
			t.Error("foreign key was wrong value", a.ID, first.ResidentID)
		}
		if a.ID != second.ResidentID {
			t.Error("foreign key was wrong value", a.ID, second.ResidentID)
		}

		if first.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResidentMiniCexEvaluations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResidentMiniCexEvaluations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResidentMiniCexEvaluations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorMiniCexEvaluations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MiniCexEvaluation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MiniCexEvaluation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorMiniCexEvaluations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorID)
		}
		if a.ID != second.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorID)
		}

		if first.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorMiniCexEvaluations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorMiniCexEvaluations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorMiniCexEvaluations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpNotifications(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UserID {
			t.Error("foreign key was wrong value", a.ID, first.UserID)
		}
		if a.ID != second.UserID {
			t.Error("foreign key was wrong value", a.ID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Notifications().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpAssistantOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeriesActivityReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeriesActivityReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssistantOrthopedicSurgeriesActivityReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AssistantID {
			t.Error("foreign key was wrong value", a.ID, first.AssistantID)
		}
		if a.ID != second.AssistantID {
			t.Error("foreign key was wrong value", a.ID, second.AssistantID)
		}

		if first.R.Assistant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assistant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssistantOrthopedicSurgeriesActivityReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssistantOrthopedicSurgeriesActivityReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssistantOrthopedicSurgeriesActivityReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpOperatorOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeriesActivityReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeriesActivityReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOperatorOrthopedicSurgeriesActivityReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OperatorID {
			t.Error("foreign key was wrong value", a.ID, first.OperatorID)
		}
		if a.ID != second.OperatorID {
			t.Error("foreign key was wrong value", a.ID, second.OperatorID)
		}

		if first.R.Operator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Operator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OperatorOrthopedicSurgeriesActivityReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OperatorOrthopedicSurgeriesActivityReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OperatorOrthopedicSurgeriesActivityReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpResidentOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeriesActivityReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeriesActivityReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResidentOrthopedicSurgeriesActivityReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ResidentID {
			t.Error("foreign key was wrong value", a.ID, first.ResidentID)
		}
		if a.ID != second.ResidentID {
			t.Error("foreign key was wrong value", a.ID, second.ResidentID)
		}

		if first.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResidentOrthopedicSurgeriesActivityReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResidentOrthopedicSurgeriesActivityReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResidentOrthopedicSurgeriesActivityReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorOrthopedicSurgeriesActivityReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeriesActivityReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeriesActivityReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorOrthopedicSurgeriesActivityReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorID)
		}
		if a.ID != second.SupervisorID {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorID)
		}

		if first.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorOrthopedicSurgeriesActivityReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorOrthopedicSurgeriesActivityReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorOrthopedicSurgeriesActivityReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpAssistantOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssistantOrthopedicSurgeryActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AssistantID) {
			t.Error("foreign key was wrong value", a.ID, first.AssistantID)
		}
		if !queries.Equal(a.ID, second.AssistantID) {
			t.Error("foreign key was wrong value", a.ID, second.AssistantID)
		}

		if first.R.Assistant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assistant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssistantOrthopedicSurgeryActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssistantOrthopedicSurgeryActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssistantOrthopedicSurgeryActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserToManySetOpAssistantOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssistantOrthopedicSurgeryActivities(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssistantOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssistantOrthopedicSurgeryActivities(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssistantOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssistantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssistantID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AssistantID) {
		t.Error("foreign key was wrong value", a.ID, d.AssistantID)
	}
	if !queries.Equal(a.ID, e.AssistantID) {
		t.Error("foreign key was wrong value", a.ID, e.AssistantID)
	}

	if b.R.Assistant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Assistant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Assistant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Assistant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AssistantOrthopedicSurgeryActivities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AssistantOrthopedicSurgeryActivities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserToManyRemoveOpAssistantOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssistantOrthopedicSurgeryActivities(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssistantOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssistantOrthopedicSurgeryActivities(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssistantOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssistantID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssistantID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Assistant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Assistant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Assistant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Assistant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AssistantOrthopedicSurgeryActivities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AssistantOrthopedicSurgeryActivities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AssistantOrthopedicSurgeryActivities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserToManyAddOpOperatorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOperatorOrthopedicSurgeryActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OperatorID) {
			t.Error("foreign key was wrong value", a.ID, first.OperatorID)
		}
		if !queries.Equal(a.ID, second.OperatorID) {
			t.Error("foreign key was wrong value", a.ID, second.OperatorID)
		}

		if first.R.Operator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Operator != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OperatorOrthopedicSurgeryActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OperatorOrthopedicSurgeryActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OperatorOrthopedicSurgeryActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserToManySetOpOperatorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOperatorOrthopedicSurgeryActivities(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OperatorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOperatorOrthopedicSurgeryActivities(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OperatorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OperatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OperatorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OperatorID) {
		t.Error("foreign key was wrong value", a.ID, d.OperatorID)
	}
	if !queries.Equal(a.ID, e.OperatorID) {
		t.Error("foreign key was wrong value", a.ID, e.OperatorID)
	}

	if b.R.Operator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Operator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Operator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Operator != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OperatorOrthopedicSurgeryActivities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OperatorOrthopedicSurgeryActivities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserToManyRemoveOpOperatorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOperatorOrthopedicSurgeryActivities(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OperatorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOperatorOrthopedicSurgeryActivities(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OperatorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OperatorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OperatorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Operator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Operator != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Operator != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Operator != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OperatorOrthopedicSurgeryActivities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OperatorOrthopedicSurgeryActivities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OperatorOrthopedicSurgeryActivities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserToManyAddOpResidentOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddResidentOrthopedicSurgeryActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ResidentID {
			t.Error("foreign key was wrong value", a.ID, first.ResidentID)
		}
		if a.ID != second.ResidentID {
			t.Error("foreign key was wrong value", a.ID, second.ResidentID)
		}

		if first.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Resident != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ResidentOrthopedicSurgeryActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ResidentOrthopedicSurgeryActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ResidentOrthopedicSurgeryActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserToManyAddOpSupervisorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupervisorOrthopedicSurgeryActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SupervisorID) {
			t.Error("foreign key was wrong value", a.ID, first.SupervisorID)
		}
		if !queries.Equal(a.ID, second.SupervisorID) {
			t.Error("foreign key was wrong value", a.ID, second.SupervisorID)
		}

		if first.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supervisor != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupervisorOrthopedicSurgeryActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupervisorOrthopedicSurgeryActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupervisorOrthopedicSurgeryActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserToManySetOpSupervisorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSupervisorOrthopedicSurgeryActivities(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SupervisorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSupervisorOrthopedicSurgeryActivities(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SupervisorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SupervisorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SupervisorID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SupervisorID) {
		t.Error("foreign key was wrong value", a.ID, d.SupervisorID)
	}
	if !queries.Equal(a.ID, e.SupervisorID) {
		t.Error("foreign key was wrong value", a.ID, e.SupervisorID)
	}

	if b.R.Supervisor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Supervisor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Supervisor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Supervisor != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SupervisorOrthopedicSurgeryActivities[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SupervisorOrthopedicSurgeryActivities[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserToManyRemoveOpSupervisorOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSupervisorOrthopedicSurgeryActivities(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SupervisorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSupervisorOrthopedicSurgeryActivities(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SupervisorOrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SupervisorID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SupervisorID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Supervisor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Supervisor != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Supervisor != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Supervisor != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SupervisorOrthopedicSurgeryActivities) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SupervisorOrthopedicSurgeryActivities[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SupervisorOrthopedicSurgeryActivities[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserToManyAddOpUserOrganizationalUnitRoles(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a User
	var b, c, d, e UserOrganizationalUnitRole

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserOrganizationalUnitRole{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userOrganizationalUnitRoleDBTypes, false, strmangle.SetComplement(userOrganizationalUnitRolePrimaryKeyColumns, userOrganizationalUnitRoleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserOrganizationalUnitRole{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserOrganizationalUnitRoles(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UserID {
			t.Error("foreign key was wrong value", a.ID, first.UserID)
		}
		if a.ID != second.UserID {
			t.Error("foreign key was wrong value", a.ID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserOrganizationalUnitRoles[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserOrganizationalUnitRoles[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserOrganizationalUnitRoles().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Users().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `DisplayName`: `character varying`, `Email`: `character varying`, `UserExternalID`: `character varying`, `Activated`: `boolean`, `Activationcode`: `character varying`}
	_           = bytes.MinRead
)

func testUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAllColumns) == len(userPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDBTypes, true, userPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAllColumns) == len(userPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &User{}
	if err = randomize.Struct(seed, o, userDBTypes, true, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userDBTypes, true, userPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAllColumns, userPrimaryKeyColumns) {
		fields = userAllColumns
	} else {
		fields = strmangle.SetComplement(
			userAllColumns,
			userPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(userAllColumns) == len(userPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := User{}
	if err = randomize.Struct(seed, &o, userDBTypes, true); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert User: %s", err)
	}

	count, err := Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userDBTypes, false, userPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert User: %s", err)
	}

	count, err = Users().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
