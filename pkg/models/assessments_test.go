// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssessments(t *testing.T) {
	t.Parallel()

	query := Assessments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssessmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssessmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Assessments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssessmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssessmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssessmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssessmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Assessment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssessmentExists to return true, but got false.")
	}
}

func testAssessmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assessmentFound, err := FindAssessment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assessmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssessmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Assessments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssessmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Assessments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssessmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assessmentOne := &Assessment{}
	assessmentTwo := &Assessment{}
	if err = randomize.Struct(seed, assessmentOne, assessmentDBTypes, false, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err = randomize.Struct(seed, assessmentTwo, assessmentDBTypes, false, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assessmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assessmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Assessments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssessmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assessmentOne := &Assessment{}
	assessmentTwo := &Assessment{}
	if err = randomize.Struct(seed, assessmentOne, assessmentDBTypes, false, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err = randomize.Struct(seed, assessmentTwo, assessmentDBTypes, false, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assessmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assessmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assessmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func assessmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Assessment) error {
	*o = Assessment{}
	return nil
}

func testAssessmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Assessment{}
	o := &Assessment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assessmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Assessment object: %s", err)
	}

	AddAssessmentHook(boil.BeforeInsertHook, assessmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assessmentBeforeInsertHooks = []AssessmentHook{}

	AddAssessmentHook(boil.AfterInsertHook, assessmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assessmentAfterInsertHooks = []AssessmentHook{}

	AddAssessmentHook(boil.AfterSelectHook, assessmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assessmentAfterSelectHooks = []AssessmentHook{}

	AddAssessmentHook(boil.BeforeUpdateHook, assessmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assessmentBeforeUpdateHooks = []AssessmentHook{}

	AddAssessmentHook(boil.AfterUpdateHook, assessmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assessmentAfterUpdateHooks = []AssessmentHook{}

	AddAssessmentHook(boil.BeforeDeleteHook, assessmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assessmentBeforeDeleteHooks = []AssessmentHook{}

	AddAssessmentHook(boil.AfterDeleteHook, assessmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assessmentAfterDeleteHooks = []AssessmentHook{}

	AddAssessmentHook(boil.BeforeUpsertHook, assessmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assessmentBeforeUpsertHooks = []AssessmentHook{}

	AddAssessmentHook(boil.AfterUpsertHook, assessmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assessmentAfterUpsertHooks = []AssessmentHook{}
}

func testAssessmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssessmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assessmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssessmentOneToOneActivityUsingActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Activity
	var local Assessment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.AssessmentID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Activity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.AssessmentID, foreign.AssessmentID) {
		t.Errorf("want: %v, got %v", foreign.AssessmentID, check.AssessmentID)
	}

	slice := AssessmentSlice{&local}
	if err = local.L.LoadActivity(ctx, tx, false, (*[]*Assessment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Activity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Activity = nil
	if err = local.L.LoadActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Activity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssessmentOneToOneSetOpActivityUsingActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b, c Activity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Activity{&b, &c} {
		err = a.SetActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Activity != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Assessment != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.AssessmentID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.AssessmentID))
		reflect.Indirect(reflect.ValueOf(&x.AssessmentID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.AssessmentID) {
			t.Error("foreign key was wrong value", a.ID, x.AssessmentID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testAssessmentOneToOneRemoveOpActivityUsingActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b Activity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetActivity(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveActivity(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Activity().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Activity != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.AssessmentID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Assessment != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssessmentToOneDopsEvaluationUsingDop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assessment
	var foreign DopsEvaluation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DopsID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Dop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssessmentSlice{&local}
	if err = local.L.LoadDop(ctx, tx, false, (*[]*Assessment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Dop = nil
	if err = local.L.LoadDop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Dop == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssessmentToOneMiniCexEvaluationUsingMiniCex(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assessment
	var foreign MiniCexEvaluation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MiniCexID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MiniCex().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssessmentSlice{&local}
	if err = local.L.LoadMiniCex(ctx, tx, false, (*[]*Assessment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MiniCex == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MiniCex = nil
	if err = local.L.LoadMiniCex(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MiniCex == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssessmentToOneOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Assessment
	var foreign OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orthopedicSurgeriesActivityReviewDBTypes, false, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeriesActivityReview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrthopedicSurgeryReviewID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgeryReview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssessmentSlice{&local}
	if err = local.L.LoadOrthopedicSurgeryReview(ctx, tx, false, (*[]*Assessment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryReview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgeryReview = nil
	if err = local.L.LoadOrthopedicSurgeryReview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryReview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssessmentToOneSetOpDopsEvaluationUsingDop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b, c DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DopsEvaluation{&b, &c} {
		err = a.SetDop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Dop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DopAssessment != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DopsID, x.ID) {
			t.Error("foreign key was wrong value", a.DopsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DopsID))
		reflect.Indirect(reflect.ValueOf(&a.DopsID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DopsID, x.ID) {
			t.Error("foreign key was wrong value", a.DopsID, x.ID)
		}
	}
}

func testAssessmentToOneRemoveOpDopsEvaluationUsingDop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDop(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDop(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Dop().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Dop != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DopsID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.DopAssessment != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testAssessmentToOneSetOpMiniCexEvaluationUsingMiniCex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b, c MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MiniCexEvaluation{&b, &c} {
		err = a.SetMiniCex(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MiniCex != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MiniCexAssessment != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MiniCexID, x.ID) {
			t.Error("foreign key was wrong value", a.MiniCexID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MiniCexID))
		reflect.Indirect(reflect.ValueOf(&a.MiniCexID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MiniCexID, x.ID) {
			t.Error("foreign key was wrong value", a.MiniCexID, x.ID)
		}
	}
}

func testAssessmentToOneRemoveOpMiniCexEvaluationUsingMiniCex(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b MiniCexEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMiniCex(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMiniCex(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MiniCex().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MiniCex != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MiniCexID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.MiniCexAssessment != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testAssessmentToOneSetOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrthopedicSurgeriesActivityReview{&b, &c} {
		err = a.SetOrthopedicSurgeryReview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgeryReview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrthopedicSurgeryReviewAssessment != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrthopedicSurgeryReviewID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryReviewID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrthopedicSurgeryReviewID))
		reflect.Indirect(reflect.ValueOf(&a.OrthopedicSurgeryReviewID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrthopedicSurgeryReviewID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryReviewID, x.ID)
		}
	}
}

func testAssessmentToOneRemoveOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Assessment
	var b OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrthopedicSurgeryReview(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrthopedicSurgeryReview(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrthopedicSurgeryReview().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrthopedicSurgeryReview != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrthopedicSurgeryReviewID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.OrthopedicSurgeryReviewAssessment != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testAssessmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssessmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssessmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssessmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Assessments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assessmentDBTypes = map[string]string{`ID`: `uuid`, `OccurredAt`: `timestamp with time zone`, `OrthopedicSurgeryReviewID`: `uuid`, `DopsID`: `uuid`, `MiniCexID`: `uuid`}
	_                 = bytes.MinRead
)

func testAssessmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assessmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assessmentAllColumns) == len(assessmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssessmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assessmentAllColumns) == len(assessmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Assessment{}
	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assessmentDBTypes, true, assessmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assessmentAllColumns, assessmentPrimaryKeyColumns) {
		fields = assessmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			assessmentAllColumns,
			assessmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssessmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssessmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(assessmentAllColumns) == len(assessmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Assessment{}
	if err = randomize.Struct(seed, &o, assessmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Assessment: %s", err)
	}

	count, err := Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assessmentDBTypes, false, assessmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Assessment: %s", err)
	}

	count, err = Assessments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
