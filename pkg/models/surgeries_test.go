// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSurgeries(t *testing.T) {
	t.Parallel()

	query := Surgeries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSurgeriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSurgeriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Surgeries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSurgeriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SurgerySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSurgeriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SurgeryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Surgery exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SurgeryExists to return true, but got false.")
	}
}

func testSurgeriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	surgeryFound, err := FindSurgery(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if surgeryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSurgeriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Surgeries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSurgeriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Surgeries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSurgeriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	surgeryOne := &Surgery{}
	surgeryTwo := &Surgery{}
	if err = randomize.Struct(seed, surgeryOne, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}
	if err = randomize.Struct(seed, surgeryTwo, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = surgeryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = surgeryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Surgeries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSurgeriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	surgeryOne := &Surgery{}
	surgeryTwo := &Surgery{}
	if err = randomize.Struct(seed, surgeryOne, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}
	if err = randomize.Struct(seed, surgeryTwo, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = surgeryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = surgeryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func surgeryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func surgeryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Surgery) error {
	*o = Surgery{}
	return nil
}

func testSurgeriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Surgery{}
	o := &Surgery{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, surgeryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Surgery object: %s", err)
	}

	AddSurgeryHook(boil.BeforeInsertHook, surgeryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	surgeryBeforeInsertHooks = []SurgeryHook{}

	AddSurgeryHook(boil.AfterInsertHook, surgeryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	surgeryAfterInsertHooks = []SurgeryHook{}

	AddSurgeryHook(boil.AfterSelectHook, surgeryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	surgeryAfterSelectHooks = []SurgeryHook{}

	AddSurgeryHook(boil.BeforeUpdateHook, surgeryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	surgeryBeforeUpdateHooks = []SurgeryHook{}

	AddSurgeryHook(boil.AfterUpdateHook, surgeryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	surgeryAfterUpdateHooks = []SurgeryHook{}

	AddSurgeryHook(boil.BeforeDeleteHook, surgeryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	surgeryBeforeDeleteHooks = []SurgeryHook{}

	AddSurgeryHook(boil.AfterDeleteHook, surgeryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	surgeryAfterDeleteHooks = []SurgeryHook{}

	AddSurgeryHook(boil.BeforeUpsertHook, surgeryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	surgeryBeforeUpsertHooks = []SurgeryHook{}

	AddSurgeryHook(boil.AfterUpsertHook, surgeryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	surgeryAfterUpsertHooks = []SurgeryHook{}
}

func testSurgeriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSurgeriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(surgeryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSurgeryToManyDopsEvaluationsSurgeries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c DopsEvaluationsSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dopsEvaluationsSurgeryDBTypes, false, dopsEvaluationsSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationsSurgeryDBTypes, false, dopsEvaluationsSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SurgeryID = a.ID
	c.SurgeryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DopsEvaluationsSurgeries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SurgeryID == b.SurgeryID {
			bFound = true
		}
		if v.SurgeryID == c.SurgeryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SurgerySlice{&a}
	if err = a.L.LoadDopsEvaluationsSurgeries(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DopsEvaluationsSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DopsEvaluationsSurgeries = nil
	if err = a.L.LoadDopsEvaluationsSurgeries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DopsEvaluationsSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSurgeryToManyOrthopedicSurgeriesActivityReviewSurgeries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c OrthopedicSurgeriesActivityReviewSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewSurgeryDBTypes, false, orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewSurgeryDBTypes, false, orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SurgeryID = a.ID
	c.SurgeryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrthopedicSurgeriesActivityReviewSurgeries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SurgeryID == b.SurgeryID {
			bFound = true
		}
		if v.SurgeryID == c.SurgeryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SurgerySlice{&a}
	if err = a.L.LoadOrthopedicSurgeriesActivityReviewSurgeries(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeriesActivityReviewSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrthopedicSurgeriesActivityReviewSurgeries = nil
	if err = a.L.LoadOrthopedicSurgeriesActivityReviewSurgeries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeriesActivityReviewSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSurgeryToManyOrthopedicSurgeryActivitiesSurgeries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c OrthopedicSurgeryActivitiesSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SurgeryID = a.ID
	c.SurgeryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrthopedicSurgeryActivitiesSurgeries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SurgeryID == b.SurgeryID {
			bFound = true
		}
		if v.SurgeryID == c.SurgeryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SurgerySlice{&a}
	if err = a.L.LoadOrthopedicSurgeryActivitiesSurgeries(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivitiesSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrthopedicSurgeryActivitiesSurgeries = nil
	if err = a.L.LoadOrthopedicSurgeryActivitiesSurgeries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivitiesSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSurgeryToManyAddOpDopsEvaluationsSurgeries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c, d, e DopsEvaluationsSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DopsEvaluationsSurgery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dopsEvaluationsSurgeryDBTypes, false, strmangle.SetComplement(dopsEvaluationsSurgeryPrimaryKeyColumns, dopsEvaluationsSurgeryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DopsEvaluationsSurgery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDopsEvaluationsSurgeries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, first.SurgeryID)
		}
		if a.ID != second.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, second.SurgeryID)
		}

		if first.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DopsEvaluationsSurgeries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DopsEvaluationsSurgeries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DopsEvaluationsSurgeries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSurgeryToManyAddOpOrthopedicSurgeriesActivityReviewSurgeries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c, d, e OrthopedicSurgeriesActivityReviewSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeriesActivityReviewSurgery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeriesActivityReviewSurgeryDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns, orthopedicSurgeriesActivityReviewSurgeryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeriesActivityReviewSurgery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrthopedicSurgeriesActivityReviewSurgeries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, first.SurgeryID)
		}
		if a.ID != second.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, second.SurgeryID)
		}

		if first.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrthopedicSurgeriesActivityReviewSurgeries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrthopedicSurgeriesActivityReviewSurgeries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrthopedicSurgeriesActivityReviewSurgeries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSurgeryToManyAddOpOrthopedicSurgeryActivitiesSurgeries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c, d, e OrthopedicSurgeryActivitiesSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivitiesSurgery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivitiesSurgeryDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns, orthopedicSurgeryActivitiesSurgeryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivitiesSurgery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrthopedicSurgeryActivitiesSurgeries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, first.SurgeryID)
		}
		if a.ID != second.SurgeryID {
			t.Error("foreign key was wrong value", a.ID, second.SurgeryID)
		}

		if first.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Surgery != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrthopedicSurgeryActivitiesSurgeries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrthopedicSurgeryActivitiesSurgeries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSurgeryToOneSurgeryDiagnosisUsingDiagnose(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Surgery
	var foreign SurgeryDiagnosis

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, surgeryDiagnosisDBTypes, false, surgeryDiagnosisColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SurgeryDiagnosis struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DiagnoseID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Diagnose().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SurgerySlice{&local}
	if err = local.L.LoadDiagnose(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Diagnose == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Diagnose = nil
	if err = local.L.LoadDiagnose(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Diagnose == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSurgeryToOneSurgeryMethodUsingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Surgery
	var foreign SurgeryMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, surgeryMethodDBTypes, false, surgeryMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SurgeryMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MethodID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Method().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SurgerySlice{&local}
	if err = local.L.LoadMethod(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Method == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Method = nil
	if err = local.L.LoadMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Method == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSurgeryToOneSpecialtyUsingSurgerySpecialtySpecialty(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Surgery
	var foreign Specialty

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, surgeryDBTypes, false, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, specialtyDBTypes, false, specialtyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Specialty struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SurgerySpecialty = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SurgerySpecialtySpecialty().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SurgerySlice{&local}
	if err = local.L.LoadSurgerySpecialtySpecialty(ctx, tx, false, (*[]*Surgery)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SurgerySpecialtySpecialty == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SurgerySpecialtySpecialty = nil
	if err = local.L.LoadSurgerySpecialtySpecialty(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SurgerySpecialtySpecialty == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSurgeryToOneSetOpSurgeryDiagnosisUsingDiagnose(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c SurgeryDiagnosis

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, surgeryDiagnosisDBTypes, false, strmangle.SetComplement(surgeryDiagnosisPrimaryKeyColumns, surgeryDiagnosisColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, surgeryDiagnosisDBTypes, false, strmangle.SetComplement(surgeryDiagnosisPrimaryKeyColumns, surgeryDiagnosisColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SurgeryDiagnosis{&b, &c} {
		err = a.SetDiagnose(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Diagnose != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiagnoseSurgeries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DiagnoseID != x.ID {
			t.Error("foreign key was wrong value", a.DiagnoseID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiagnoseID))
		reflect.Indirect(reflect.ValueOf(&a.DiagnoseID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DiagnoseID != x.ID {
			t.Error("foreign key was wrong value", a.DiagnoseID, x.ID)
		}
	}
}
func testSurgeryToOneSetOpSurgeryMethodUsingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c SurgeryMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, surgeryMethodDBTypes, false, strmangle.SetComplement(surgeryMethodPrimaryKeyColumns, surgeryMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, surgeryMethodDBTypes, false, strmangle.SetComplement(surgeryMethodPrimaryKeyColumns, surgeryMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SurgeryMethod{&b, &c} {
		err = a.SetMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Method != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MethodSurgeries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MethodID != x.ID {
			t.Error("foreign key was wrong value", a.MethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MethodID))
		reflect.Indirect(reflect.ValueOf(&a.MethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MethodID != x.ID {
			t.Error("foreign key was wrong value", a.MethodID, x.ID)
		}
	}
}
func testSurgeryToOneSetOpSpecialtyUsingSurgerySpecialtySpecialty(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Surgery
	var b, c Specialty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, surgeryDBTypes, false, strmangle.SetComplement(surgeryPrimaryKeyColumns, surgeryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, specialtyDBTypes, false, strmangle.SetComplement(specialtyPrimaryKeyColumns, specialtyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, specialtyDBTypes, false, strmangle.SetComplement(specialtyPrimaryKeyColumns, specialtyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Specialty{&b, &c} {
		err = a.SetSurgerySpecialtySpecialty(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SurgerySpecialtySpecialty != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SurgerySpecialtySurgeries[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SurgerySpecialty != x.ID {
			t.Error("foreign key was wrong value", a.SurgerySpecialty)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SurgerySpecialty))
		reflect.Indirect(reflect.ValueOf(&a.SurgerySpecialty)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SurgerySpecialty != x.ID {
			t.Error("foreign key was wrong value", a.SurgerySpecialty, x.ID)
		}
	}
}

func testSurgeriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSurgeriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SurgerySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSurgeriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Surgeries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	surgeryDBTypes = map[string]string{`ID`: `uuid`, `DiagnoseID`: `uuid`, `MethodID`: `uuid`, `SurgerySpecialty`: `uuid`}
	_              = bytes.MinRead
)

func testSurgeriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(surgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(surgeryAllColumns) == len(surgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSurgeriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(surgeryAllColumns) == len(surgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Surgery{}
	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, surgeryDBTypes, true, surgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(surgeryAllColumns, surgeryPrimaryKeyColumns) {
		fields = surgeryAllColumns
	} else {
		fields = strmangle.SetComplement(
			surgeryAllColumns,
			surgeryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SurgerySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSurgeriesUpsert(t *testing.T) {
	t.Parallel()

	if len(surgeryAllColumns) == len(surgeryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Surgery{}
	if err = randomize.Struct(seed, &o, surgeryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Surgery: %s", err)
	}

	count, err := Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, surgeryDBTypes, false, surgeryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Surgery struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Surgery: %s", err)
	}

	count, err = Surgeries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
