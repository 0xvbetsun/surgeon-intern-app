// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Activities", testActivities)
	t.Run("Assessments", testAssessments)
	t.Run("DopsEvaluations", testDopsEvaluations)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeries)
	t.Run("EvaluationForms", testEvaluationForms)
	t.Run("ExaminationActivities", testExaminationActivities)
	t.Run("Examinations", testExaminations)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviews)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviews)
	t.Run("LogbookEntries", testLogbookEntries)
	t.Run("MiniCexAreas", testMiniCexAreas)
	t.Run("MiniCexEvaluations", testMiniCexEvaluations)
	t.Run("MiniCexFocuses", testMiniCexFocuses)
	t.Run("Notifications", testNotifications)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypes)
	t.Run("OrganizationalUnits", testOrganizationalUnits)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviews)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeries)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivities)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeries)
	t.Run("PracticalActivityTypes", testPracticalActivityTypes)
	t.Run("Procedures", testProcedures)
	t.Run("Roles", testRoles)
	t.Run("Specialties", testSpecialties)
	t.Run("Surgeries", testSurgeries)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnoses)
	t.Run("SurgeryMethods", testSurgeryMethods)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRoles)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Activities", testActivitiesDelete)
	t.Run("Assessments", testAssessmentsDelete)
	t.Run("DopsEvaluations", testDopsEvaluationsDelete)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesDelete)
	t.Run("EvaluationForms", testEvaluationFormsDelete)
	t.Run("ExaminationActivities", testExaminationActivitiesDelete)
	t.Run("Examinations", testExaminationsDelete)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsDelete)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsDelete)
	t.Run("LogbookEntries", testLogbookEntriesDelete)
	t.Run("MiniCexAreas", testMiniCexAreasDelete)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsDelete)
	t.Run("MiniCexFocuses", testMiniCexFocusesDelete)
	t.Run("Notifications", testNotificationsDelete)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesDelete)
	t.Run("OrganizationalUnits", testOrganizationalUnitsDelete)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsDelete)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesDelete)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesDelete)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesDelete)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesDelete)
	t.Run("Procedures", testProceduresDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Specialties", testSpecialtiesDelete)
	t.Run("Surgeries", testSurgeriesDelete)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesDelete)
	t.Run("SurgeryMethods", testSurgeryMethodsDelete)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesQueryDeleteAll)
	t.Run("Assessments", testAssessmentsQueryDeleteAll)
	t.Run("DopsEvaluations", testDopsEvaluationsQueryDeleteAll)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesQueryDeleteAll)
	t.Run("EvaluationForms", testEvaluationFormsQueryDeleteAll)
	t.Run("ExaminationActivities", testExaminationActivitiesQueryDeleteAll)
	t.Run("Examinations", testExaminationsQueryDeleteAll)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsQueryDeleteAll)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsQueryDeleteAll)
	t.Run("LogbookEntries", testLogbookEntriesQueryDeleteAll)
	t.Run("MiniCexAreas", testMiniCexAreasQueryDeleteAll)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsQueryDeleteAll)
	t.Run("MiniCexFocuses", testMiniCexFocusesQueryDeleteAll)
	t.Run("Notifications", testNotificationsQueryDeleteAll)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesQueryDeleteAll)
	t.Run("OrganizationalUnits", testOrganizationalUnitsQueryDeleteAll)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsQueryDeleteAll)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesQueryDeleteAll)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesQueryDeleteAll)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesQueryDeleteAll)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesQueryDeleteAll)
	t.Run("Procedures", testProceduresQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Specialties", testSpecialtiesQueryDeleteAll)
	t.Run("Surgeries", testSurgeriesQueryDeleteAll)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesQueryDeleteAll)
	t.Run("SurgeryMethods", testSurgeryMethodsQueryDeleteAll)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceDeleteAll)
	t.Run("Assessments", testAssessmentsSliceDeleteAll)
	t.Run("DopsEvaluations", testDopsEvaluationsSliceDeleteAll)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesSliceDeleteAll)
	t.Run("EvaluationForms", testEvaluationFormsSliceDeleteAll)
	t.Run("ExaminationActivities", testExaminationActivitiesSliceDeleteAll)
	t.Run("Examinations", testExaminationsSliceDeleteAll)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsSliceDeleteAll)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsSliceDeleteAll)
	t.Run("LogbookEntries", testLogbookEntriesSliceDeleteAll)
	t.Run("MiniCexAreas", testMiniCexAreasSliceDeleteAll)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsSliceDeleteAll)
	t.Run("MiniCexFocuses", testMiniCexFocusesSliceDeleteAll)
	t.Run("Notifications", testNotificationsSliceDeleteAll)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesSliceDeleteAll)
	t.Run("OrganizationalUnits", testOrganizationalUnitsSliceDeleteAll)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsSliceDeleteAll)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesSliceDeleteAll)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesSliceDeleteAll)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesSliceDeleteAll)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesSliceDeleteAll)
	t.Run("Procedures", testProceduresSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Specialties", testSpecialtiesSliceDeleteAll)
	t.Run("Surgeries", testSurgeriesSliceDeleteAll)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesSliceDeleteAll)
	t.Run("SurgeryMethods", testSurgeryMethodsSliceDeleteAll)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Activities", testActivitiesExists)
	t.Run("Assessments", testAssessmentsExists)
	t.Run("DopsEvaluations", testDopsEvaluationsExists)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesExists)
	t.Run("EvaluationForms", testEvaluationFormsExists)
	t.Run("ExaminationActivities", testExaminationActivitiesExists)
	t.Run("Examinations", testExaminationsExists)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsExists)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsExists)
	t.Run("LogbookEntries", testLogbookEntriesExists)
	t.Run("MiniCexAreas", testMiniCexAreasExists)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsExists)
	t.Run("MiniCexFocuses", testMiniCexFocusesExists)
	t.Run("Notifications", testNotificationsExists)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesExists)
	t.Run("OrganizationalUnits", testOrganizationalUnitsExists)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsExists)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesExists)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesExists)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesExists)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesExists)
	t.Run("Procedures", testProceduresExists)
	t.Run("Roles", testRolesExists)
	t.Run("Specialties", testSpecialtiesExists)
	t.Run("Surgeries", testSurgeriesExists)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesExists)
	t.Run("SurgeryMethods", testSurgeryMethodsExists)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Activities", testActivitiesFind)
	t.Run("Assessments", testAssessmentsFind)
	t.Run("DopsEvaluations", testDopsEvaluationsFind)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesFind)
	t.Run("EvaluationForms", testEvaluationFormsFind)
	t.Run("ExaminationActivities", testExaminationActivitiesFind)
	t.Run("Examinations", testExaminationsFind)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsFind)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsFind)
	t.Run("LogbookEntries", testLogbookEntriesFind)
	t.Run("MiniCexAreas", testMiniCexAreasFind)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsFind)
	t.Run("MiniCexFocuses", testMiniCexFocusesFind)
	t.Run("Notifications", testNotificationsFind)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesFind)
	t.Run("OrganizationalUnits", testOrganizationalUnitsFind)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsFind)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesFind)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesFind)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesFind)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesFind)
	t.Run("Procedures", testProceduresFind)
	t.Run("Roles", testRolesFind)
	t.Run("Specialties", testSpecialtiesFind)
	t.Run("Surgeries", testSurgeriesFind)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesFind)
	t.Run("SurgeryMethods", testSurgeryMethodsFind)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Activities", testActivitiesBind)
	t.Run("Assessments", testAssessmentsBind)
	t.Run("DopsEvaluations", testDopsEvaluationsBind)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesBind)
	t.Run("EvaluationForms", testEvaluationFormsBind)
	t.Run("ExaminationActivities", testExaminationActivitiesBind)
	t.Run("Examinations", testExaminationsBind)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsBind)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsBind)
	t.Run("LogbookEntries", testLogbookEntriesBind)
	t.Run("MiniCexAreas", testMiniCexAreasBind)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsBind)
	t.Run("MiniCexFocuses", testMiniCexFocusesBind)
	t.Run("Notifications", testNotificationsBind)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesBind)
	t.Run("OrganizationalUnits", testOrganizationalUnitsBind)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsBind)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesBind)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesBind)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesBind)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesBind)
	t.Run("Procedures", testProceduresBind)
	t.Run("Roles", testRolesBind)
	t.Run("Specialties", testSpecialtiesBind)
	t.Run("Surgeries", testSurgeriesBind)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesBind)
	t.Run("SurgeryMethods", testSurgeryMethodsBind)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Activities", testActivitiesOne)
	t.Run("Assessments", testAssessmentsOne)
	t.Run("DopsEvaluations", testDopsEvaluationsOne)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesOne)
	t.Run("EvaluationForms", testEvaluationFormsOne)
	t.Run("ExaminationActivities", testExaminationActivitiesOne)
	t.Run("Examinations", testExaminationsOne)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsOne)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsOne)
	t.Run("LogbookEntries", testLogbookEntriesOne)
	t.Run("MiniCexAreas", testMiniCexAreasOne)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsOne)
	t.Run("MiniCexFocuses", testMiniCexFocusesOne)
	t.Run("Notifications", testNotificationsOne)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesOne)
	t.Run("OrganizationalUnits", testOrganizationalUnitsOne)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsOne)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesOne)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesOne)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesOne)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesOne)
	t.Run("Procedures", testProceduresOne)
	t.Run("Roles", testRolesOne)
	t.Run("Specialties", testSpecialtiesOne)
	t.Run("Surgeries", testSurgeriesOne)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesOne)
	t.Run("SurgeryMethods", testSurgeryMethodsOne)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Activities", testActivitiesAll)
	t.Run("Assessments", testAssessmentsAll)
	t.Run("DopsEvaluations", testDopsEvaluationsAll)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesAll)
	t.Run("EvaluationForms", testEvaluationFormsAll)
	t.Run("ExaminationActivities", testExaminationActivitiesAll)
	t.Run("Examinations", testExaminationsAll)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsAll)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsAll)
	t.Run("LogbookEntries", testLogbookEntriesAll)
	t.Run("MiniCexAreas", testMiniCexAreasAll)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsAll)
	t.Run("MiniCexFocuses", testMiniCexFocusesAll)
	t.Run("Notifications", testNotificationsAll)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesAll)
	t.Run("OrganizationalUnits", testOrganizationalUnitsAll)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsAll)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesAll)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesAll)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesAll)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesAll)
	t.Run("Procedures", testProceduresAll)
	t.Run("Roles", testRolesAll)
	t.Run("Specialties", testSpecialtiesAll)
	t.Run("Surgeries", testSurgeriesAll)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesAll)
	t.Run("SurgeryMethods", testSurgeryMethodsAll)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Activities", testActivitiesCount)
	t.Run("Assessments", testAssessmentsCount)
	t.Run("DopsEvaluations", testDopsEvaluationsCount)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesCount)
	t.Run("EvaluationForms", testEvaluationFormsCount)
	t.Run("ExaminationActivities", testExaminationActivitiesCount)
	t.Run("Examinations", testExaminationsCount)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsCount)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsCount)
	t.Run("LogbookEntries", testLogbookEntriesCount)
	t.Run("MiniCexAreas", testMiniCexAreasCount)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsCount)
	t.Run("MiniCexFocuses", testMiniCexFocusesCount)
	t.Run("Notifications", testNotificationsCount)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesCount)
	t.Run("OrganizationalUnits", testOrganizationalUnitsCount)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsCount)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesCount)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesCount)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesCount)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesCount)
	t.Run("Procedures", testProceduresCount)
	t.Run("Roles", testRolesCount)
	t.Run("Specialties", testSpecialtiesCount)
	t.Run("Surgeries", testSurgeriesCount)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesCount)
	t.Run("SurgeryMethods", testSurgeryMethodsCount)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Activities", testActivitiesHooks)
	t.Run("Assessments", testAssessmentsHooks)
	t.Run("DopsEvaluations", testDopsEvaluationsHooks)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesHooks)
	t.Run("EvaluationForms", testEvaluationFormsHooks)
	t.Run("ExaminationActivities", testExaminationActivitiesHooks)
	t.Run("Examinations", testExaminationsHooks)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsHooks)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsHooks)
	t.Run("LogbookEntries", testLogbookEntriesHooks)
	t.Run("MiniCexAreas", testMiniCexAreasHooks)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsHooks)
	t.Run("MiniCexFocuses", testMiniCexFocusesHooks)
	t.Run("Notifications", testNotificationsHooks)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesHooks)
	t.Run("OrganizationalUnits", testOrganizationalUnitsHooks)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsHooks)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesHooks)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesHooks)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesHooks)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesHooks)
	t.Run("Procedures", testProceduresHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("Specialties", testSpecialtiesHooks)
	t.Run("Surgeries", testSurgeriesHooks)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesHooks)
	t.Run("SurgeryMethods", testSurgeryMethodsHooks)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Activities", testActivitiesInsert)
	t.Run("Activities", testActivitiesInsertWhitelist)
	t.Run("Assessments", testAssessmentsInsert)
	t.Run("Assessments", testAssessmentsInsertWhitelist)
	t.Run("DopsEvaluations", testDopsEvaluationsInsert)
	t.Run("DopsEvaluations", testDopsEvaluationsInsertWhitelist)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesInsert)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesInsertWhitelist)
	t.Run("EvaluationForms", testEvaluationFormsInsert)
	t.Run("EvaluationForms", testEvaluationFormsInsertWhitelist)
	t.Run("ExaminationActivities", testExaminationActivitiesInsert)
	t.Run("ExaminationActivities", testExaminationActivitiesInsertWhitelist)
	t.Run("Examinations", testExaminationsInsert)
	t.Run("Examinations", testExaminationsInsertWhitelist)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsInsert)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsInsertWhitelist)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsInsert)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsInsertWhitelist)
	t.Run("LogbookEntries", testLogbookEntriesInsert)
	t.Run("LogbookEntries", testLogbookEntriesInsertWhitelist)
	t.Run("MiniCexAreas", testMiniCexAreasInsert)
	t.Run("MiniCexAreas", testMiniCexAreasInsertWhitelist)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsInsert)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsInsertWhitelist)
	t.Run("MiniCexFocuses", testMiniCexFocusesInsert)
	t.Run("MiniCexFocuses", testMiniCexFocusesInsertWhitelist)
	t.Run("Notifications", testNotificationsInsert)
	t.Run("Notifications", testNotificationsInsertWhitelist)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesInsert)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesInsertWhitelist)
	t.Run("OrganizationalUnits", testOrganizationalUnitsInsert)
	t.Run("OrganizationalUnits", testOrganizationalUnitsInsertWhitelist)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsInsert)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsInsertWhitelist)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesInsert)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesInsertWhitelist)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesInsert)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesInsertWhitelist)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesInsert)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesInsertWhitelist)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesInsert)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesInsertWhitelist)
	t.Run("Procedures", testProceduresInsert)
	t.Run("Procedures", testProceduresInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Specialties", testSpecialtiesInsert)
	t.Run("Specialties", testSpecialtiesInsertWhitelist)
	t.Run("Surgeries", testSurgeriesInsert)
	t.Run("Surgeries", testSurgeriesInsertWhitelist)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesInsert)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesInsertWhitelist)
	t.Run("SurgeryMethods", testSurgeryMethodsInsert)
	t.Run("SurgeryMethods", testSurgeryMethodsInsertWhitelist)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesInsert)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ActivityToAssessmentUsingAssessment", testActivityToOneAssessmentUsingAssessment)
	t.Run("ActivityToLogbookEntryUsingLogbookEntry", testActivityToOneLogbookEntryUsingLogbookEntry)
	t.Run("AssessmentToDopsEvaluationUsingDop", testAssessmentToOneDopsEvaluationUsingDop)
	t.Run("AssessmentToMiniCexEvaluationUsingMiniCex", testAssessmentToOneMiniCexEvaluationUsingMiniCex)
	t.Run("AssessmentToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview", testAssessmentToOneOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview)
	t.Run("DopsEvaluationToOrganizationalUnitUsingDepartment", testDopsEvaluationToOneOrganizationalUnitUsingDepartment)
	t.Run("DopsEvaluationToOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity", testDopsEvaluationToOneOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("DopsEvaluationToUserUsingResident", testDopsEvaluationToOneUserUsingResident)
	t.Run("DopsEvaluationToUserUsingSupervisor", testDopsEvaluationToOneUserUsingSupervisor)
	t.Run("DopsEvaluationsSurgeryToDopsEvaluationUsingDopsEvaluation", testDopsEvaluationsSurgeryToOneDopsEvaluationUsingDopsEvaluation)
	t.Run("DopsEvaluationsSurgeryToSurgeryUsingSurgery", testDopsEvaluationsSurgeryToOneSurgeryUsingSurgery)
	t.Run("EvaluationFormToOrganizationalUnitUsingDepartment", testEvaluationFormToOneOrganizationalUnitUsingDepartment)
	t.Run("ExaminationActivityToExaminationUsingExamination", testExaminationActivityToOneExaminationUsingExamination)
	t.Run("ExaminationActivityToUserUsingResidentUser", testExaminationActivityToOneUserUsingResidentUser)
	t.Run("ExaminationActivityToUserUsingSupervisorUser", testExaminationActivityToOneUserUsingSupervisorUser)
	t.Run("ExaminationToOrganizationalUnitUsingDepartment", testExaminationToOneOrganizationalUnitUsingDepartment)
	t.Run("ExaminationToPracticalActivityTypeUsingPracticalActivityType", testExaminationToOnePracticalActivityTypeUsingPracticalActivityType)
	t.Run("ExaminationsActivitiesReviewToExaminationsActivityReviewUsingExaminationsActivityReview", testExaminationsActivitiesReviewToOneExaminationsActivityReviewUsingExaminationsActivityReview)
	t.Run("ExaminationsActivitiesReviewToUserUsingActivityAuthorUser", testExaminationsActivitiesReviewToOneUserUsingActivityAuthorUser)
	t.Run("ExaminationsActivitiesReviewToUserUsingActivityReviewerUser", testExaminationsActivitiesReviewToOneUserUsingActivityReviewerUser)
	t.Run("ExaminationsActivitiesReviewToExaminationActivityUsingExaminationActivity", testExaminationsActivitiesReviewToOneExaminationActivityUsingExaminationActivity)
	t.Run("ExaminationsActivityReviewToUserUsingSupervisorUser", testExaminationsActivityReviewToOneUserUsingSupervisorUser)
	t.Run("LogbookEntryToExaminationUsingExamination", testLogbookEntryToOneExaminationUsingExamination)
	t.Run("LogbookEntryToOrthopedicSurgeryActivityUsingOrthopedicSurgery", testLogbookEntryToOneOrthopedicSurgeryActivityUsingOrthopedicSurgery)
	t.Run("LogbookEntryToProcedureUsingProcedure", testLogbookEntryToOneProcedureUsingProcedure)
	t.Run("MiniCexAreaToOrganizationalUnitUsingDepartment", testMiniCexAreaToOneOrganizationalUnitUsingDepartment)
	t.Run("MiniCexEvaluationToOrganizationalUnitUsingDepartment", testMiniCexEvaluationToOneOrganizationalUnitUsingDepartment)
	t.Run("MiniCexEvaluationToUserUsingResident", testMiniCexEvaluationToOneUserUsingResident)
	t.Run("MiniCexEvaluationToUserUsingSupervisor", testMiniCexEvaluationToOneUserUsingSupervisor)
	t.Run("NotificationToUserUsingUser", testNotificationToOneUserUsingUser)
	t.Run("OrganizationalUnitToOrganizationalUnitUsingParent", testOrganizationalUnitToOneOrganizationalUnitUsingParent)
	t.Run("OrganizationalUnitToOrganizationalUnitTypeUsingType", testOrganizationalUnitToOneOrganizationalUnitTypeUsingType)
	t.Run("OrthopedicSurgeriesActivityReviewToOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity", testOrthopedicSurgeriesActivityReviewToOneOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingAssistant", testOrthopedicSurgeriesActivityReviewToOneUserUsingAssistant)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingOperator", testOrthopedicSurgeriesActivityReviewToOneUserUsingOperator)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingResident", testOrthopedicSurgeriesActivityReviewToOneUserUsingResident)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingSupervisor", testOrthopedicSurgeriesActivityReviewToOneUserUsingSupervisor)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeryToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview", testOrthopedicSurgeriesActivityReviewSurgeryToOneOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeryToSurgeryUsingSurgery", testOrthopedicSurgeriesActivityReviewSurgeryToOneSurgeryUsingSurgery)
	t.Run("OrthopedicSurgeryActivityToUserUsingAssistant", testOrthopedicSurgeryActivityToOneUserUsingAssistant)
	t.Run("OrthopedicSurgeryActivityToUserUsingOperator", testOrthopedicSurgeryActivityToOneUserUsingOperator)
	t.Run("OrthopedicSurgeryActivityToPracticalActivityTypeUsingPracticalActivityType", testOrthopedicSurgeryActivityToOnePracticalActivityTypeUsingPracticalActivityType)
	t.Run("OrthopedicSurgeryActivityToUserUsingResident", testOrthopedicSurgeryActivityToOneUserUsingResident)
	t.Run("OrthopedicSurgeryActivityToUserUsingSupervisor", testOrthopedicSurgeryActivityToOneUserUsingSupervisor)
	t.Run("OrthopedicSurgeryActivitiesSurgeryToOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity", testOrthopedicSurgeryActivitiesSurgeryToOneOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("OrthopedicSurgeryActivitiesSurgeryToSurgeryUsingSurgery", testOrthopedicSurgeryActivitiesSurgeryToOneSurgeryUsingSurgery)
	t.Run("ProcedureToOrganizationalUnitUsingOrganizationalUnit", testProcedureToOneOrganizationalUnitUsingOrganizationalUnit)
	t.Run("SurgeryToSurgeryDiagnosisUsingDiagnose", testSurgeryToOneSurgeryDiagnosisUsingDiagnose)
	t.Run("SurgeryToSurgeryMethodUsingMethod", testSurgeryToOneSurgeryMethodUsingMethod)
	t.Run("SurgeryToSpecialtyUsingSurgerySpecialtySpecialty", testSurgeryToOneSpecialtyUsingSurgerySpecialtySpecialty)
	t.Run("UserOrganizationalUnitRoleToRoleUsingRole", testUserOrganizationalUnitRoleToOneRoleUsingRole)
	t.Run("UserOrganizationalUnitRoleToOrganizationalUnitUsingUnit", testUserOrganizationalUnitRoleToOneOrganizationalUnitUsingUnit)
	t.Run("UserOrganizationalUnitRoleToUserUsingUser", testUserOrganizationalUnitRoleToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("AssessmentToActivityUsingActivity", testAssessmentOneToOneActivityUsingActivity)
	t.Run("DopsEvaluationToAssessmentUsingDopAssessment", testDopsEvaluationOneToOneAssessmentUsingDopAssessment)
	t.Run("ExaminationToLogbookEntryUsingLogbookEntry", testExaminationOneToOneLogbookEntryUsingLogbookEntry)
	t.Run("LogbookEntryToActivityUsingActivity", testLogbookEntryOneToOneActivityUsingActivity)
	t.Run("MiniCexEvaluationToAssessmentUsingMiniCexAssessment", testMiniCexEvaluationOneToOneAssessmentUsingMiniCexAssessment)
	t.Run("OrthopedicSurgeriesActivityReviewToAssessmentUsingOrthopedicSurgeryReviewAssessment", testOrthopedicSurgeriesActivityReviewOneToOneAssessmentUsingOrthopedicSurgeryReviewAssessment)
	t.Run("OrthopedicSurgeryActivityToDopsEvaluationUsingDopsEvaluation", testOrthopedicSurgeryActivityOneToOneDopsEvaluationUsingDopsEvaluation)
	t.Run("OrthopedicSurgeryActivityToLogbookEntryUsingOrthopedicSurgeryLogbookEntry", testOrthopedicSurgeryActivityOneToOneLogbookEntryUsingOrthopedicSurgeryLogbookEntry)
	t.Run("OrthopedicSurgeryActivityToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview", testOrthopedicSurgeryActivityOneToOneOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview)
	t.Run("ProcedureToLogbookEntryUsingLogbookEntry", testProcedureOneToOneLogbookEntryUsingLogbookEntry)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DopsEvaluationToDopsEvaluationsSurgeries", testDopsEvaluationToManyDopsEvaluationsSurgeries)
	t.Run("ExaminationActivityToExaminationsActivitiesReviews", testExaminationActivityToManyExaminationsActivitiesReviews)
	t.Run("ExaminationToExaminationActivities", testExaminationToManyExaminationActivities)
	t.Run("ExaminationsActivityReviewToExaminationsActivitiesReviews", testExaminationsActivityReviewToManyExaminationsActivitiesReviews)
	t.Run("OrganizationalUnitTypeToTypeOrganizationalUnits", testOrganizationalUnitTypeToManyTypeOrganizationalUnits)
	t.Run("OrganizationalUnitToDepartmentDopsEvaluations", testOrganizationalUnitToManyDepartmentDopsEvaluations)
	t.Run("OrganizationalUnitToDepartmentEvaluationForms", testOrganizationalUnitToManyDepartmentEvaluationForms)
	t.Run("OrganizationalUnitToDepartmentExaminations", testOrganizationalUnitToManyDepartmentExaminations)
	t.Run("OrganizationalUnitToDepartmentMiniCexAreas", testOrganizationalUnitToManyDepartmentMiniCexAreas)
	t.Run("OrganizationalUnitToDepartmentMiniCexEvaluations", testOrganizationalUnitToManyDepartmentMiniCexEvaluations)
	t.Run("OrganizationalUnitToSpecialties", testOrganizationalUnitToManySpecialties)
	t.Run("OrganizationalUnitToParentOrganizationalUnits", testOrganizationalUnitToManyParentOrganizationalUnits)
	t.Run("OrganizationalUnitToProcedures", testOrganizationalUnitToManyProcedures)
	t.Run("OrganizationalUnitToUnitUserOrganizationalUnitRoles", testOrganizationalUnitToManyUnitUserOrganizationalUnitRoles)
	t.Run("OrthopedicSurgeriesActivityReviewToOrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewToManyOrthopedicSurgeriesActivityReviewSurgeries)
	t.Run("OrthopedicSurgeryActivityToOrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivityToManyOrthopedicSurgeryActivitiesSurgeries)
	t.Run("PracticalActivityTypeToExaminations", testPracticalActivityTypeToManyExaminations)
	t.Run("PracticalActivityTypeToOrthopedicSurgeryActivities", testPracticalActivityTypeToManyOrthopedicSurgeryActivities)
	t.Run("PracticalActivityTypeToSpecialties", testPracticalActivityTypeToManySpecialties)
	t.Run("RoleToUserOrganizationalUnitRoles", testRoleToManyUserOrganizationalUnitRoles)
	t.Run("SpecialtyToUnitOrganizationalUnits", testSpecialtyToManyUnitOrganizationalUnits)
	t.Run("SpecialtyToActivityTypePracticalActivityTypes", testSpecialtyToManyActivityTypePracticalActivityTypes)
	t.Run("SpecialtyToSurgerySpecialtySurgeries", testSpecialtyToManySurgerySpecialtySurgeries)
	t.Run("SurgeryToDopsEvaluationsSurgeries", testSurgeryToManyDopsEvaluationsSurgeries)
	t.Run("SurgeryToOrthopedicSurgeriesActivityReviewSurgeries", testSurgeryToManyOrthopedicSurgeriesActivityReviewSurgeries)
	t.Run("SurgeryToOrthopedicSurgeryActivitiesSurgeries", testSurgeryToManyOrthopedicSurgeryActivitiesSurgeries)
	t.Run("SurgeryDiagnosisToDiagnoseSurgeries", testSurgeryDiagnosisToManyDiagnoseSurgeries)
	t.Run("SurgeryMethodToMethodSurgeries", testSurgeryMethodToManyMethodSurgeries)
	t.Run("UserToResidentDopsEvaluations", testUserToManyResidentDopsEvaluations)
	t.Run("UserToSupervisorDopsEvaluations", testUserToManySupervisorDopsEvaluations)
	t.Run("UserToResidentUserExaminationActivities", testUserToManyResidentUserExaminationActivities)
	t.Run("UserToSupervisorUserExaminationActivities", testUserToManySupervisorUserExaminationActivities)
	t.Run("UserToActivityAuthorUserExaminationsActivitiesReviews", testUserToManyActivityAuthorUserExaminationsActivitiesReviews)
	t.Run("UserToActivityReviewerUserExaminationsActivitiesReviews", testUserToManyActivityReviewerUserExaminationsActivitiesReviews)
	t.Run("UserToSupervisorUserExaminationsActivityReviews", testUserToManySupervisorUserExaminationsActivityReviews)
	t.Run("UserToResidentMiniCexEvaluations", testUserToManyResidentMiniCexEvaluations)
	t.Run("UserToSupervisorMiniCexEvaluations", testUserToManySupervisorMiniCexEvaluations)
	t.Run("UserToNotifications", testUserToManyNotifications)
	t.Run("UserToAssistantOrthopedicSurgeriesActivityReviews", testUserToManyAssistantOrthopedicSurgeriesActivityReviews)
	t.Run("UserToOperatorOrthopedicSurgeriesActivityReviews", testUserToManyOperatorOrthopedicSurgeriesActivityReviews)
	t.Run("UserToResidentOrthopedicSurgeriesActivityReviews", testUserToManyResidentOrthopedicSurgeriesActivityReviews)
	t.Run("UserToSupervisorOrthopedicSurgeriesActivityReviews", testUserToManySupervisorOrthopedicSurgeriesActivityReviews)
	t.Run("UserToAssistantOrthopedicSurgeryActivities", testUserToManyAssistantOrthopedicSurgeryActivities)
	t.Run("UserToOperatorOrthopedicSurgeryActivities", testUserToManyOperatorOrthopedicSurgeryActivities)
	t.Run("UserToResidentOrthopedicSurgeryActivities", testUserToManyResidentOrthopedicSurgeryActivities)
	t.Run("UserToSupervisorOrthopedicSurgeryActivities", testUserToManySupervisorOrthopedicSurgeryActivities)
	t.Run("UserToUserOrganizationalUnitRoles", testUserToManyUserOrganizationalUnitRoles)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ActivityToAssessmentUsingActivity", testActivityToOneSetOpAssessmentUsingAssessment)
	t.Run("ActivityToLogbookEntryUsingActivity", testActivityToOneSetOpLogbookEntryUsingLogbookEntry)
	t.Run("AssessmentToDopsEvaluationUsingDopAssessment", testAssessmentToOneSetOpDopsEvaluationUsingDop)
	t.Run("AssessmentToMiniCexEvaluationUsingMiniCexAssessment", testAssessmentToOneSetOpMiniCexEvaluationUsingMiniCex)
	t.Run("AssessmentToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReviewAssessment", testAssessmentToOneSetOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview)
	t.Run("DopsEvaluationToOrganizationalUnitUsingDepartmentDopsEvaluations", testDopsEvaluationToOneSetOpOrganizationalUnitUsingDepartment)
	t.Run("DopsEvaluationToOrthopedicSurgeryActivityUsingDopsEvaluation", testDopsEvaluationToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("DopsEvaluationToUserUsingResidentDopsEvaluations", testDopsEvaluationToOneSetOpUserUsingResident)
	t.Run("DopsEvaluationToUserUsingSupervisorDopsEvaluations", testDopsEvaluationToOneSetOpUserUsingSupervisor)
	t.Run("DopsEvaluationsSurgeryToDopsEvaluationUsingDopsEvaluationsSurgeries", testDopsEvaluationsSurgeryToOneSetOpDopsEvaluationUsingDopsEvaluation)
	t.Run("DopsEvaluationsSurgeryToSurgeryUsingDopsEvaluationsSurgeries", testDopsEvaluationsSurgeryToOneSetOpSurgeryUsingSurgery)
	t.Run("EvaluationFormToOrganizationalUnitUsingDepartmentEvaluationForms", testEvaluationFormToOneSetOpOrganizationalUnitUsingDepartment)
	t.Run("ExaminationActivityToExaminationUsingExaminationActivities", testExaminationActivityToOneSetOpExaminationUsingExamination)
	t.Run("ExaminationActivityToUserUsingResidentUserExaminationActivities", testExaminationActivityToOneSetOpUserUsingResidentUser)
	t.Run("ExaminationActivityToUserUsingSupervisorUserExaminationActivities", testExaminationActivityToOneSetOpUserUsingSupervisorUser)
	t.Run("ExaminationToOrganizationalUnitUsingDepartmentExaminations", testExaminationToOneSetOpOrganizationalUnitUsingDepartment)
	t.Run("ExaminationToPracticalActivityTypeUsingExaminations", testExaminationToOneSetOpPracticalActivityTypeUsingPracticalActivityType)
	t.Run("ExaminationsActivitiesReviewToExaminationsActivityReviewUsingExaminationsActivitiesReviews", testExaminationsActivitiesReviewToOneSetOpExaminationsActivityReviewUsingExaminationsActivityReview)
	t.Run("ExaminationsActivitiesReviewToUserUsingActivityAuthorUserExaminationsActivitiesReviews", testExaminationsActivitiesReviewToOneSetOpUserUsingActivityAuthorUser)
	t.Run("ExaminationsActivitiesReviewToUserUsingActivityReviewerUserExaminationsActivitiesReviews", testExaminationsActivitiesReviewToOneSetOpUserUsingActivityReviewerUser)
	t.Run("ExaminationsActivitiesReviewToExaminationActivityUsingExaminationsActivitiesReviews", testExaminationsActivitiesReviewToOneSetOpExaminationActivityUsingExaminationActivity)
	t.Run("ExaminationsActivityReviewToUserUsingSupervisorUserExaminationsActivityReviews", testExaminationsActivityReviewToOneSetOpUserUsingSupervisorUser)
	t.Run("LogbookEntryToExaminationUsingLogbookEntry", testLogbookEntryToOneSetOpExaminationUsingExamination)
	t.Run("LogbookEntryToOrthopedicSurgeryActivityUsingOrthopedicSurgeryLogbookEntry", testLogbookEntryToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgery)
	t.Run("LogbookEntryToProcedureUsingLogbookEntry", testLogbookEntryToOneSetOpProcedureUsingProcedure)
	t.Run("MiniCexAreaToOrganizationalUnitUsingDepartmentMiniCexAreas", testMiniCexAreaToOneSetOpOrganizationalUnitUsingDepartment)
	t.Run("MiniCexEvaluationToOrganizationalUnitUsingDepartmentMiniCexEvaluations", testMiniCexEvaluationToOneSetOpOrganizationalUnitUsingDepartment)
	t.Run("MiniCexEvaluationToUserUsingResidentMiniCexEvaluations", testMiniCexEvaluationToOneSetOpUserUsingResident)
	t.Run("MiniCexEvaluationToUserUsingSupervisorMiniCexEvaluations", testMiniCexEvaluationToOneSetOpUserUsingSupervisor)
	t.Run("NotificationToUserUsingNotifications", testNotificationToOneSetOpUserUsingUser)
	t.Run("OrganizationalUnitToOrganizationalUnitUsingParentOrganizationalUnits", testOrganizationalUnitToOneSetOpOrganizationalUnitUsingParent)
	t.Run("OrganizationalUnitToOrganizationalUnitTypeUsingTypeOrganizationalUnits", testOrganizationalUnitToOneSetOpOrganizationalUnitTypeUsingType)
	t.Run("OrthopedicSurgeriesActivityReviewToOrthopedicSurgeryActivityUsingOrthopedicSurgeriesActivityReview", testOrthopedicSurgeriesActivityReviewToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingAssistantOrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewToOneSetOpUserUsingAssistant)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingOperatorOrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewToOneSetOpUserUsingOperator)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingResidentOrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewToOneSetOpUserUsingResident)
	t.Run("OrthopedicSurgeriesActivityReviewToUserUsingSupervisorOrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewToOneSetOpUserUsingSupervisor)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeryToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeryToOneSetOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeryToSurgeryUsingOrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeryToOneSetOpSurgeryUsingSurgery)
	t.Run("OrthopedicSurgeryActivityToUserUsingAssistantOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneSetOpUserUsingAssistant)
	t.Run("OrthopedicSurgeryActivityToUserUsingOperatorOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneSetOpUserUsingOperator)
	t.Run("OrthopedicSurgeryActivityToPracticalActivityTypeUsingOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneSetOpPracticalActivityTypeUsingPracticalActivityType)
	t.Run("OrthopedicSurgeryActivityToUserUsingResidentOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneSetOpUserUsingResident)
	t.Run("OrthopedicSurgeryActivityToUserUsingSupervisorOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneSetOpUserUsingSupervisor)
	t.Run("OrthopedicSurgeryActivitiesSurgeryToOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeryToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("OrthopedicSurgeryActivitiesSurgeryToSurgeryUsingOrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeryToOneSetOpSurgeryUsingSurgery)
	t.Run("ProcedureToOrganizationalUnitUsingProcedures", testProcedureToOneSetOpOrganizationalUnitUsingOrganizationalUnit)
	t.Run("SurgeryToSurgeryDiagnosisUsingDiagnoseSurgeries", testSurgeryToOneSetOpSurgeryDiagnosisUsingDiagnose)
	t.Run("SurgeryToSurgeryMethodUsingMethodSurgeries", testSurgeryToOneSetOpSurgeryMethodUsingMethod)
	t.Run("SurgeryToSpecialtyUsingSurgerySpecialtySurgeries", testSurgeryToOneSetOpSpecialtyUsingSurgerySpecialtySpecialty)
	t.Run("UserOrganizationalUnitRoleToRoleUsingUserOrganizationalUnitRoles", testUserOrganizationalUnitRoleToOneSetOpRoleUsingRole)
	t.Run("UserOrganizationalUnitRoleToOrganizationalUnitUsingUnitUserOrganizationalUnitRoles", testUserOrganizationalUnitRoleToOneSetOpOrganizationalUnitUsingUnit)
	t.Run("UserOrganizationalUnitRoleToUserUsingUserOrganizationalUnitRoles", testUserOrganizationalUnitRoleToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("ActivityToAssessmentUsingActivity", testActivityToOneRemoveOpAssessmentUsingAssessment)
	t.Run("ActivityToLogbookEntryUsingActivity", testActivityToOneRemoveOpLogbookEntryUsingLogbookEntry)
	t.Run("AssessmentToDopsEvaluationUsingDopAssessment", testAssessmentToOneRemoveOpDopsEvaluationUsingDop)
	t.Run("AssessmentToMiniCexEvaluationUsingMiniCexAssessment", testAssessmentToOneRemoveOpMiniCexEvaluationUsingMiniCex)
	t.Run("AssessmentToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReviewAssessment", testAssessmentToOneRemoveOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeryReview)
	t.Run("DopsEvaluationToOrganizationalUnitUsingDepartmentDopsEvaluations", testDopsEvaluationToOneRemoveOpOrganizationalUnitUsingDepartment)
	t.Run("DopsEvaluationToOrthopedicSurgeryActivityUsingDopsEvaluation", testDopsEvaluationToOneRemoveOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity)
	t.Run("ExaminationActivityToUserUsingSupervisorUserExaminationActivities", testExaminationActivityToOneRemoveOpUserUsingSupervisorUser)
	t.Run("ExaminationsActivitiesReviewToExaminationsActivityReviewUsingExaminationsActivitiesReviews", testExaminationsActivitiesReviewToOneRemoveOpExaminationsActivityReviewUsingExaminationsActivityReview)
	t.Run("LogbookEntryToExaminationUsingLogbookEntry", testLogbookEntryToOneRemoveOpExaminationUsingExamination)
	t.Run("LogbookEntryToOrthopedicSurgeryActivityUsingOrthopedicSurgeryLogbookEntry", testLogbookEntryToOneRemoveOpOrthopedicSurgeryActivityUsingOrthopedicSurgery)
	t.Run("LogbookEntryToProcedureUsingLogbookEntry", testLogbookEntryToOneRemoveOpProcedureUsingProcedure)
	t.Run("MiniCexEvaluationToOrganizationalUnitUsingDepartmentMiniCexEvaluations", testMiniCexEvaluationToOneRemoveOpOrganizationalUnitUsingDepartment)
	t.Run("OrganizationalUnitToOrganizationalUnitUsingParentOrganizationalUnits", testOrganizationalUnitToOneRemoveOpOrganizationalUnitUsingParent)
	t.Run("OrthopedicSurgeryActivityToUserUsingAssistantOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneRemoveOpUserUsingAssistant)
	t.Run("OrthopedicSurgeryActivityToUserUsingOperatorOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneRemoveOpUserUsingOperator)
	t.Run("OrthopedicSurgeryActivityToUserUsingSupervisorOrthopedicSurgeryActivities", testOrthopedicSurgeryActivityToOneRemoveOpUserUsingSupervisor)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("AssessmentToActivityUsingActivity", testAssessmentOneToOneSetOpActivityUsingActivity)
	t.Run("DopsEvaluationToAssessmentUsingDopAssessment", testDopsEvaluationOneToOneSetOpAssessmentUsingDopAssessment)
	t.Run("ExaminationToLogbookEntryUsingLogbookEntry", testExaminationOneToOneSetOpLogbookEntryUsingLogbookEntry)
	t.Run("LogbookEntryToActivityUsingActivity", testLogbookEntryOneToOneSetOpActivityUsingActivity)
	t.Run("MiniCexEvaluationToAssessmentUsingMiniCexAssessment", testMiniCexEvaluationOneToOneSetOpAssessmentUsingMiniCexAssessment)
	t.Run("OrthopedicSurgeriesActivityReviewToAssessmentUsingOrthopedicSurgeryReviewAssessment", testOrthopedicSurgeriesActivityReviewOneToOneSetOpAssessmentUsingOrthopedicSurgeryReviewAssessment)
	t.Run("OrthopedicSurgeryActivityToDopsEvaluationUsingDopsEvaluation", testOrthopedicSurgeryActivityOneToOneSetOpDopsEvaluationUsingDopsEvaluation)
	t.Run("OrthopedicSurgeryActivityToLogbookEntryUsingOrthopedicSurgeryLogbookEntry", testOrthopedicSurgeryActivityOneToOneSetOpLogbookEntryUsingOrthopedicSurgeryLogbookEntry)
	t.Run("OrthopedicSurgeryActivityToOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview", testOrthopedicSurgeryActivityOneToOneSetOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview)
	t.Run("ProcedureToLogbookEntryUsingLogbookEntry", testProcedureOneToOneSetOpLogbookEntryUsingLogbookEntry)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {
	t.Run("AssessmentToActivityUsingActivity", testAssessmentOneToOneRemoveOpActivityUsingActivity)
	t.Run("DopsEvaluationToAssessmentUsingDopAssessment", testDopsEvaluationOneToOneRemoveOpAssessmentUsingDopAssessment)
	t.Run("ExaminationToLogbookEntryUsingLogbookEntry", testExaminationOneToOneRemoveOpLogbookEntryUsingLogbookEntry)
	t.Run("LogbookEntryToActivityUsingActivity", testLogbookEntryOneToOneRemoveOpActivityUsingActivity)
	t.Run("MiniCexEvaluationToAssessmentUsingMiniCexAssessment", testMiniCexEvaluationOneToOneRemoveOpAssessmentUsingMiniCexAssessment)
	t.Run("OrthopedicSurgeriesActivityReviewToAssessmentUsingOrthopedicSurgeryReviewAssessment", testOrthopedicSurgeriesActivityReviewOneToOneRemoveOpAssessmentUsingOrthopedicSurgeryReviewAssessment)
	t.Run("OrthopedicSurgeryActivityToDopsEvaluationUsingDopsEvaluation", testOrthopedicSurgeryActivityOneToOneRemoveOpDopsEvaluationUsingDopsEvaluation)
	t.Run("OrthopedicSurgeryActivityToLogbookEntryUsingOrthopedicSurgeryLogbookEntry", testOrthopedicSurgeryActivityOneToOneRemoveOpLogbookEntryUsingOrthopedicSurgeryLogbookEntry)
	t.Run("ProcedureToLogbookEntryUsingLogbookEntry", testProcedureOneToOneRemoveOpLogbookEntryUsingLogbookEntry)
}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DopsEvaluationToDopsEvaluationsSurgeries", testDopsEvaluationToManyAddOpDopsEvaluationsSurgeries)
	t.Run("ExaminationActivityToExaminationsActivitiesReviews", testExaminationActivityToManyAddOpExaminationsActivitiesReviews)
	t.Run("ExaminationToExaminationActivities", testExaminationToManyAddOpExaminationActivities)
	t.Run("ExaminationsActivityReviewToExaminationsActivitiesReviews", testExaminationsActivityReviewToManyAddOpExaminationsActivitiesReviews)
	t.Run("OrganizationalUnitTypeToTypeOrganizationalUnits", testOrganizationalUnitTypeToManyAddOpTypeOrganizationalUnits)
	t.Run("OrganizationalUnitToDepartmentDopsEvaluations", testOrganizationalUnitToManyAddOpDepartmentDopsEvaluations)
	t.Run("OrganizationalUnitToDepartmentEvaluationForms", testOrganizationalUnitToManyAddOpDepartmentEvaluationForms)
	t.Run("OrganizationalUnitToDepartmentExaminations", testOrganizationalUnitToManyAddOpDepartmentExaminations)
	t.Run("OrganizationalUnitToDepartmentMiniCexAreas", testOrganizationalUnitToManyAddOpDepartmentMiniCexAreas)
	t.Run("OrganizationalUnitToDepartmentMiniCexEvaluations", testOrganizationalUnitToManyAddOpDepartmentMiniCexEvaluations)
	t.Run("OrganizationalUnitToSpecialties", testOrganizationalUnitToManyAddOpSpecialties)
	t.Run("OrganizationalUnitToParentOrganizationalUnits", testOrganizationalUnitToManyAddOpParentOrganizationalUnits)
	t.Run("OrganizationalUnitToProcedures", testOrganizationalUnitToManyAddOpProcedures)
	t.Run("OrganizationalUnitToUnitUserOrganizationalUnitRoles", testOrganizationalUnitToManyAddOpUnitUserOrganizationalUnitRoles)
	t.Run("OrthopedicSurgeriesActivityReviewToOrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewToManyAddOpOrthopedicSurgeriesActivityReviewSurgeries)
	t.Run("OrthopedicSurgeryActivityToOrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivityToManyAddOpOrthopedicSurgeryActivitiesSurgeries)
	t.Run("PracticalActivityTypeToExaminations", testPracticalActivityTypeToManyAddOpExaminations)
	t.Run("PracticalActivityTypeToOrthopedicSurgeryActivities", testPracticalActivityTypeToManyAddOpOrthopedicSurgeryActivities)
	t.Run("PracticalActivityTypeToSpecialties", testPracticalActivityTypeToManyAddOpSpecialties)
	t.Run("RoleToUserOrganizationalUnitRoles", testRoleToManyAddOpUserOrganizationalUnitRoles)
	t.Run("SpecialtyToUnitOrganizationalUnits", testSpecialtyToManyAddOpUnitOrganizationalUnits)
	t.Run("SpecialtyToActivityTypePracticalActivityTypes", testSpecialtyToManyAddOpActivityTypePracticalActivityTypes)
	t.Run("SpecialtyToSurgerySpecialtySurgeries", testSpecialtyToManyAddOpSurgerySpecialtySurgeries)
	t.Run("SurgeryToDopsEvaluationsSurgeries", testSurgeryToManyAddOpDopsEvaluationsSurgeries)
	t.Run("SurgeryToOrthopedicSurgeriesActivityReviewSurgeries", testSurgeryToManyAddOpOrthopedicSurgeriesActivityReviewSurgeries)
	t.Run("SurgeryToOrthopedicSurgeryActivitiesSurgeries", testSurgeryToManyAddOpOrthopedicSurgeryActivitiesSurgeries)
	t.Run("SurgeryDiagnosisToDiagnoseSurgeries", testSurgeryDiagnosisToManyAddOpDiagnoseSurgeries)
	t.Run("SurgeryMethodToMethodSurgeries", testSurgeryMethodToManyAddOpMethodSurgeries)
	t.Run("UserToResidentDopsEvaluations", testUserToManyAddOpResidentDopsEvaluations)
	t.Run("UserToSupervisorDopsEvaluations", testUserToManyAddOpSupervisorDopsEvaluations)
	t.Run("UserToResidentUserExaminationActivities", testUserToManyAddOpResidentUserExaminationActivities)
	t.Run("UserToSupervisorUserExaminationActivities", testUserToManyAddOpSupervisorUserExaminationActivities)
	t.Run("UserToActivityAuthorUserExaminationsActivitiesReviews", testUserToManyAddOpActivityAuthorUserExaminationsActivitiesReviews)
	t.Run("UserToActivityReviewerUserExaminationsActivitiesReviews", testUserToManyAddOpActivityReviewerUserExaminationsActivitiesReviews)
	t.Run("UserToSupervisorUserExaminationsActivityReviews", testUserToManyAddOpSupervisorUserExaminationsActivityReviews)
	t.Run("UserToResidentMiniCexEvaluations", testUserToManyAddOpResidentMiniCexEvaluations)
	t.Run("UserToSupervisorMiniCexEvaluations", testUserToManyAddOpSupervisorMiniCexEvaluations)
	t.Run("UserToNotifications", testUserToManyAddOpNotifications)
	t.Run("UserToAssistantOrthopedicSurgeriesActivityReviews", testUserToManyAddOpAssistantOrthopedicSurgeriesActivityReviews)
	t.Run("UserToOperatorOrthopedicSurgeriesActivityReviews", testUserToManyAddOpOperatorOrthopedicSurgeriesActivityReviews)
	t.Run("UserToResidentOrthopedicSurgeriesActivityReviews", testUserToManyAddOpResidentOrthopedicSurgeriesActivityReviews)
	t.Run("UserToSupervisorOrthopedicSurgeriesActivityReviews", testUserToManyAddOpSupervisorOrthopedicSurgeriesActivityReviews)
	t.Run("UserToAssistantOrthopedicSurgeryActivities", testUserToManyAddOpAssistantOrthopedicSurgeryActivities)
	t.Run("UserToOperatorOrthopedicSurgeryActivities", testUserToManyAddOpOperatorOrthopedicSurgeryActivities)
	t.Run("UserToResidentOrthopedicSurgeryActivities", testUserToManyAddOpResidentOrthopedicSurgeryActivities)
	t.Run("UserToSupervisorOrthopedicSurgeryActivities", testUserToManyAddOpSupervisorOrthopedicSurgeryActivities)
	t.Run("UserToUserOrganizationalUnitRoles", testUserToManyAddOpUserOrganizationalUnitRoles)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ExaminationsActivityReviewToExaminationsActivitiesReviews", testExaminationsActivityReviewToManySetOpExaminationsActivitiesReviews)
	t.Run("OrganizationalUnitToDepartmentDopsEvaluations", testOrganizationalUnitToManySetOpDepartmentDopsEvaluations)
	t.Run("OrganizationalUnitToDepartmentMiniCexEvaluations", testOrganizationalUnitToManySetOpDepartmentMiniCexEvaluations)
	t.Run("OrganizationalUnitToSpecialties", testOrganizationalUnitToManySetOpSpecialties)
	t.Run("OrganizationalUnitToParentOrganizationalUnits", testOrganizationalUnitToManySetOpParentOrganizationalUnits)
	t.Run("PracticalActivityTypeToSpecialties", testPracticalActivityTypeToManySetOpSpecialties)
	t.Run("SpecialtyToUnitOrganizationalUnits", testSpecialtyToManySetOpUnitOrganizationalUnits)
	t.Run("SpecialtyToActivityTypePracticalActivityTypes", testSpecialtyToManySetOpActivityTypePracticalActivityTypes)
	t.Run("UserToSupervisorUserExaminationActivities", testUserToManySetOpSupervisorUserExaminationActivities)
	t.Run("UserToAssistantOrthopedicSurgeryActivities", testUserToManySetOpAssistantOrthopedicSurgeryActivities)
	t.Run("UserToOperatorOrthopedicSurgeryActivities", testUserToManySetOpOperatorOrthopedicSurgeryActivities)
	t.Run("UserToSupervisorOrthopedicSurgeryActivities", testUserToManySetOpSupervisorOrthopedicSurgeryActivities)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ExaminationsActivityReviewToExaminationsActivitiesReviews", testExaminationsActivityReviewToManyRemoveOpExaminationsActivitiesReviews)
	t.Run("OrganizationalUnitToDepartmentDopsEvaluations", testOrganizationalUnitToManyRemoveOpDepartmentDopsEvaluations)
	t.Run("OrganizationalUnitToDepartmentMiniCexEvaluations", testOrganizationalUnitToManyRemoveOpDepartmentMiniCexEvaluations)
	t.Run("OrganizationalUnitToSpecialties", testOrganizationalUnitToManyRemoveOpSpecialties)
	t.Run("OrganizationalUnitToParentOrganizationalUnits", testOrganizationalUnitToManyRemoveOpParentOrganizationalUnits)
	t.Run("PracticalActivityTypeToSpecialties", testPracticalActivityTypeToManyRemoveOpSpecialties)
	t.Run("SpecialtyToUnitOrganizationalUnits", testSpecialtyToManyRemoveOpUnitOrganizationalUnits)
	t.Run("SpecialtyToActivityTypePracticalActivityTypes", testSpecialtyToManyRemoveOpActivityTypePracticalActivityTypes)
	t.Run("UserToSupervisorUserExaminationActivities", testUserToManyRemoveOpSupervisorUserExaminationActivities)
	t.Run("UserToAssistantOrthopedicSurgeryActivities", testUserToManyRemoveOpAssistantOrthopedicSurgeryActivities)
	t.Run("UserToOperatorOrthopedicSurgeryActivities", testUserToManyRemoveOpOperatorOrthopedicSurgeryActivities)
	t.Run("UserToSupervisorOrthopedicSurgeryActivities", testUserToManyRemoveOpSupervisorOrthopedicSurgeryActivities)
}

func TestReload(t *testing.T) {
	t.Run("Activities", testActivitiesReload)
	t.Run("Assessments", testAssessmentsReload)
	t.Run("DopsEvaluations", testDopsEvaluationsReload)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesReload)
	t.Run("EvaluationForms", testEvaluationFormsReload)
	t.Run("ExaminationActivities", testExaminationActivitiesReload)
	t.Run("Examinations", testExaminationsReload)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsReload)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsReload)
	t.Run("LogbookEntries", testLogbookEntriesReload)
	t.Run("MiniCexAreas", testMiniCexAreasReload)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsReload)
	t.Run("MiniCexFocuses", testMiniCexFocusesReload)
	t.Run("Notifications", testNotificationsReload)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesReload)
	t.Run("OrganizationalUnits", testOrganizationalUnitsReload)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsReload)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesReload)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesReload)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesReload)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesReload)
	t.Run("Procedures", testProceduresReload)
	t.Run("Roles", testRolesReload)
	t.Run("Specialties", testSpecialtiesReload)
	t.Run("Surgeries", testSurgeriesReload)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesReload)
	t.Run("SurgeryMethods", testSurgeryMethodsReload)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Activities", testActivitiesReloadAll)
	t.Run("Assessments", testAssessmentsReloadAll)
	t.Run("DopsEvaluations", testDopsEvaluationsReloadAll)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesReloadAll)
	t.Run("EvaluationForms", testEvaluationFormsReloadAll)
	t.Run("ExaminationActivities", testExaminationActivitiesReloadAll)
	t.Run("Examinations", testExaminationsReloadAll)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsReloadAll)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsReloadAll)
	t.Run("LogbookEntries", testLogbookEntriesReloadAll)
	t.Run("MiniCexAreas", testMiniCexAreasReloadAll)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsReloadAll)
	t.Run("MiniCexFocuses", testMiniCexFocusesReloadAll)
	t.Run("Notifications", testNotificationsReloadAll)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesReloadAll)
	t.Run("OrganizationalUnits", testOrganizationalUnitsReloadAll)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsReloadAll)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesReloadAll)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesReloadAll)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesReloadAll)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesReloadAll)
	t.Run("Procedures", testProceduresReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Specialties", testSpecialtiesReloadAll)
	t.Run("Surgeries", testSurgeriesReloadAll)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesReloadAll)
	t.Run("SurgeryMethods", testSurgeryMethodsReloadAll)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Activities", testActivitiesSelect)
	t.Run("Assessments", testAssessmentsSelect)
	t.Run("DopsEvaluations", testDopsEvaluationsSelect)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesSelect)
	t.Run("EvaluationForms", testEvaluationFormsSelect)
	t.Run("ExaminationActivities", testExaminationActivitiesSelect)
	t.Run("Examinations", testExaminationsSelect)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsSelect)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsSelect)
	t.Run("LogbookEntries", testLogbookEntriesSelect)
	t.Run("MiniCexAreas", testMiniCexAreasSelect)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsSelect)
	t.Run("MiniCexFocuses", testMiniCexFocusesSelect)
	t.Run("Notifications", testNotificationsSelect)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesSelect)
	t.Run("OrganizationalUnits", testOrganizationalUnitsSelect)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsSelect)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesSelect)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesSelect)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesSelect)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesSelect)
	t.Run("Procedures", testProceduresSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Specialties", testSpecialtiesSelect)
	t.Run("Surgeries", testSurgeriesSelect)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesSelect)
	t.Run("SurgeryMethods", testSurgeryMethodsSelect)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Activities", testActivitiesUpdate)
	t.Run("Assessments", testAssessmentsUpdate)
	t.Run("DopsEvaluations", testDopsEvaluationsUpdate)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesUpdate)
	t.Run("EvaluationForms", testEvaluationFormsUpdate)
	t.Run("ExaminationActivities", testExaminationActivitiesUpdate)
	t.Run("Examinations", testExaminationsUpdate)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsUpdate)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsUpdate)
	t.Run("LogbookEntries", testLogbookEntriesUpdate)
	t.Run("MiniCexAreas", testMiniCexAreasUpdate)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsUpdate)
	t.Run("MiniCexFocuses", testMiniCexFocusesUpdate)
	t.Run("Notifications", testNotificationsUpdate)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesUpdate)
	t.Run("OrganizationalUnits", testOrganizationalUnitsUpdate)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsUpdate)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesUpdate)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesUpdate)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesUpdate)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesUpdate)
	t.Run("Procedures", testProceduresUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Specialties", testSpecialtiesUpdate)
	t.Run("Surgeries", testSurgeriesUpdate)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesUpdate)
	t.Run("SurgeryMethods", testSurgeryMethodsUpdate)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Activities", testActivitiesSliceUpdateAll)
	t.Run("Assessments", testAssessmentsSliceUpdateAll)
	t.Run("DopsEvaluations", testDopsEvaluationsSliceUpdateAll)
	t.Run("DopsEvaluationsSurgeries", testDopsEvaluationsSurgeriesSliceUpdateAll)
	t.Run("EvaluationForms", testEvaluationFormsSliceUpdateAll)
	t.Run("ExaminationActivities", testExaminationActivitiesSliceUpdateAll)
	t.Run("Examinations", testExaminationsSliceUpdateAll)
	t.Run("ExaminationsActivitiesReviews", testExaminationsActivitiesReviewsSliceUpdateAll)
	t.Run("ExaminationsActivityReviews", testExaminationsActivityReviewsSliceUpdateAll)
	t.Run("LogbookEntries", testLogbookEntriesSliceUpdateAll)
	t.Run("MiniCexAreas", testMiniCexAreasSliceUpdateAll)
	t.Run("MiniCexEvaluations", testMiniCexEvaluationsSliceUpdateAll)
	t.Run("MiniCexFocuses", testMiniCexFocusesSliceUpdateAll)
	t.Run("Notifications", testNotificationsSliceUpdateAll)
	t.Run("OrganizationalUnitTypes", testOrganizationalUnitTypesSliceUpdateAll)
	t.Run("OrganizationalUnits", testOrganizationalUnitsSliceUpdateAll)
	t.Run("OrthopedicSurgeriesActivityReviews", testOrthopedicSurgeriesActivityReviewsSliceUpdateAll)
	t.Run("OrthopedicSurgeriesActivityReviewSurgeries", testOrthopedicSurgeriesActivityReviewSurgeriesSliceUpdateAll)
	t.Run("OrthopedicSurgeryActivities", testOrthopedicSurgeryActivitiesSliceUpdateAll)
	t.Run("OrthopedicSurgeryActivitiesSurgeries", testOrthopedicSurgeryActivitiesSurgeriesSliceUpdateAll)
	t.Run("PracticalActivityTypes", testPracticalActivityTypesSliceUpdateAll)
	t.Run("Procedures", testProceduresSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Specialties", testSpecialtiesSliceUpdateAll)
	t.Run("Surgeries", testSurgeriesSliceUpdateAll)
	t.Run("SurgeryDiagnoses", testSurgeryDiagnosesSliceUpdateAll)
	t.Run("SurgeryMethods", testSurgeryMethodsSliceUpdateAll)
	t.Run("UserOrganizationalUnitRoles", testUserOrganizationalUnitRolesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
