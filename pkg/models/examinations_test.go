// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExaminations(t *testing.T) {
	t.Parallel()

	query := Examinations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExaminationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Examinations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExaminationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Examination exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExaminationExists to return true, but got false.")
	}
}

func testExaminationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	examinationFound, err := FindExamination(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if examinationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExaminationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Examinations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExaminationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Examinations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExaminationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	examinationOne := &Examination{}
	examinationTwo := &Examination{}
	if err = randomize.Struct(seed, examinationOne, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationTwo, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Examinations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExaminationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	examinationOne := &Examination{}
	examinationTwo := &Examination{}
	if err = randomize.Struct(seed, examinationOne, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationTwo, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func examinationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func examinationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Examination) error {
	*o = Examination{}
	return nil
}

func testExaminationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Examination{}
	o := &Examination{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, examinationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Examination object: %s", err)
	}

	AddExaminationHook(boil.BeforeInsertHook, examinationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	examinationBeforeInsertHooks = []ExaminationHook{}

	AddExaminationHook(boil.AfterInsertHook, examinationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	examinationAfterInsertHooks = []ExaminationHook{}

	AddExaminationHook(boil.AfterSelectHook, examinationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	examinationAfterSelectHooks = []ExaminationHook{}

	AddExaminationHook(boil.BeforeUpdateHook, examinationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	examinationBeforeUpdateHooks = []ExaminationHook{}

	AddExaminationHook(boil.AfterUpdateHook, examinationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	examinationAfterUpdateHooks = []ExaminationHook{}

	AddExaminationHook(boil.BeforeDeleteHook, examinationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	examinationBeforeDeleteHooks = []ExaminationHook{}

	AddExaminationHook(boil.AfterDeleteHook, examinationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	examinationAfterDeleteHooks = []ExaminationHook{}

	AddExaminationHook(boil.BeforeUpsertHook, examinationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	examinationBeforeUpsertHooks = []ExaminationHook{}

	AddExaminationHook(boil.AfterUpsertHook, examinationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	examinationAfterUpsertHooks = []ExaminationHook{}
}

func testExaminationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(examinationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationOneToOneLogbookEntryUsingLogbookEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign LogbookEntry
	var local Examination

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.ExaminationID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LogbookEntry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ExaminationID, foreign.ExaminationID) {
		t.Errorf("want: %v, got %v", foreign.ExaminationID, check.ExaminationID)
	}

	slice := ExaminationSlice{&local}
	if err = local.L.LoadLogbookEntry(ctx, tx, false, (*[]*Examination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LogbookEntry = nil
	if err = local.L.LoadLogbookEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationOneToOneSetOpLogbookEntryUsingLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b, c LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LogbookEntry{&b, &c} {
		err = a.SetLogbookEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LogbookEntry != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Examination != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.ExaminationID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.ExaminationID))
		reflect.Indirect(reflect.ValueOf(&x.ExaminationID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.ExaminationID) {
			t.Error("foreign key was wrong value", a.ID, x.ExaminationID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testExaminationOneToOneRemoveOpLogbookEntryUsingLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLogbookEntry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLogbookEntry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LogbookEntry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LogbookEntry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.ExaminationID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Examination != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testExaminationToManyExaminationActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b, c ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ExaminationID = a.ID
	c.ExaminationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ExaminationActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ExaminationID == b.ExaminationID {
			bFound = true
		}
		if v.ExaminationID == c.ExaminationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExaminationSlice{&a}
	if err = a.L.LoadExaminationActivities(ctx, tx, false, (*[]*Examination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ExaminationActivities = nil
	if err = a.L.LoadExaminationActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExaminationActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExaminationToManyAddOpExaminationActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b, c, d, e ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExaminationActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ExaminationID {
			t.Error("foreign key was wrong value", a.ID, first.ExaminationID)
		}
		if a.ID != second.ExaminationID {
			t.Error("foreign key was wrong value", a.ID, second.ExaminationID)
		}

		if first.R.Examination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Examination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ExaminationActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ExaminationActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ExaminationActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testExaminationToOneOrganizationalUnitUsingDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Examination
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DepartmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Department().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationSlice{&local}
	if err = local.L.LoadDepartment(ctx, tx, false, (*[]*Examination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Department = nil
	if err = local.L.LoadDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationToOnePracticalActivityTypeUsingPracticalActivityType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Examination
	var foreign PracticalActivityType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PracticalActivityTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PracticalActivityType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationSlice{&local}
	if err = local.L.LoadPracticalActivityType(ctx, tx, false, (*[]*Examination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PracticalActivityType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PracticalActivityType = nil
	if err = local.L.LoadPracticalActivityType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PracticalActivityType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationToOneSetOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Department != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DepartmentExaminations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DepartmentID))
		reflect.Indirect(reflect.ValueOf(&a.DepartmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID, x.ID)
		}
	}
}
func testExaminationToOneSetOpPracticalActivityTypeUsingPracticalActivityType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Examination
	var b, c PracticalActivityType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PracticalActivityType{&b, &c} {
		err = a.SetPracticalActivityType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PracticalActivityType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Examinations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PracticalActivityTypeID != x.ID {
			t.Error("foreign key was wrong value", a.PracticalActivityTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PracticalActivityTypeID))
		reflect.Indirect(reflect.ValueOf(&a.PracticalActivityTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PracticalActivityTypeID != x.ID {
			t.Error("foreign key was wrong value", a.PracticalActivityTypeID, x.ID)
		}
	}
}

func testExaminationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Examinations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	examinationDBTypes = map[string]string{`ID`: `uuid`, `DisplayName`: `character varying`, `Annotations`: `jsonb`, `CreatedAt`: `timestamp with time zone`, `DepartmentID`: `uuid`, `PracticalActivityTypeID`: `integer`}
	_                  = bytes.MinRead
)

func testExaminationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(examinationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(examinationAllColumns) == len(examinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExaminationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(examinationAllColumns) == len(examinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Examination{}
	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationDBTypes, true, examinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(examinationAllColumns, examinationPrimaryKeyColumns) {
		fields = examinationAllColumns
	} else {
		fields = strmangle.SetComplement(
			examinationAllColumns,
			examinationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExaminationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExaminationsUpsert(t *testing.T) {
	t.Parallel()

	if len(examinationAllColumns) == len(examinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Examination{}
	if err = randomize.Struct(seed, &o, examinationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Examination: %s", err)
	}

	count, err := Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, examinationDBTypes, false, examinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Examination: %s", err)
	}

	count, err = Examinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
