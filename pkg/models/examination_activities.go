// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ExaminationActivity is an object representing the database table.
type ExaminationActivity struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ResidentUserID   string      `boil:"resident_user_id" json:"resident_user_id" toml:"resident_user_id" yaml:"resident_user_id"`
	SupervisorUserID null.String `boil:"supervisor_user_id" json:"supervisor_user_id,omitempty" toml:"supervisor_user_id" yaml:"supervisor_user_id,omitempty"`
	ExaminationID    string      `boil:"examination_id" json:"examination_id" toml:"examination_id" yaml:"examination_id"`
	DisplayName      string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	CreatedAt        time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Annotations      types.JSON  `boil:"annotations" json:"annotations" toml:"annotations" yaml:"annotations"`

	R *examinationActivityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examinationActivityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExaminationActivityColumns = struct {
	ID               string
	ResidentUserID   string
	SupervisorUserID string
	ExaminationID    string
	DisplayName      string
	CreatedAt        string
	Annotations      string
}{
	ID:               "id",
	ResidentUserID:   "resident_user_id",
	SupervisorUserID: "supervisor_user_id",
	ExaminationID:    "examination_id",
	DisplayName:      "display_name",
	CreatedAt:        "created_at",
	Annotations:      "annotations",
}

var ExaminationActivityTableColumns = struct {
	ID               string
	ResidentUserID   string
	SupervisorUserID string
	ExaminationID    string
	DisplayName      string
	CreatedAt        string
	Annotations      string
}{
	ID:               "examination_activities.id",
	ResidentUserID:   "examination_activities.resident_user_id",
	SupervisorUserID: "examination_activities.supervisor_user_id",
	ExaminationID:    "examination_activities.examination_id",
	DisplayName:      "examination_activities.display_name",
	CreatedAt:        "examination_activities.created_at",
	Annotations:      "examination_activities.annotations",
}

// Generated where

var ExaminationActivityWhere = struct {
	ID               whereHelperstring
	ResidentUserID   whereHelperstring
	SupervisorUserID whereHelpernull_String
	ExaminationID    whereHelperstring
	DisplayName      whereHelperstring
	CreatedAt        whereHelpertime_Time
	Annotations      whereHelpertypes_JSON
}{
	ID:               whereHelperstring{field: "\"examination_activities\".\"id\""},
	ResidentUserID:   whereHelperstring{field: "\"examination_activities\".\"resident_user_id\""},
	SupervisorUserID: whereHelpernull_String{field: "\"examination_activities\".\"supervisor_user_id\""},
	ExaminationID:    whereHelperstring{field: "\"examination_activities\".\"examination_id\""},
	DisplayName:      whereHelperstring{field: "\"examination_activities\".\"display_name\""},
	CreatedAt:        whereHelpertime_Time{field: "\"examination_activities\".\"created_at\""},
	Annotations:      whereHelpertypes_JSON{field: "\"examination_activities\".\"annotations\""},
}

// ExaminationActivityRels is where relationship names are stored.
var ExaminationActivityRels = struct {
	Examination                   string
	ResidentUser                  string
	SupervisorUser                string
	ExaminationsActivitiesReviews string
}{
	Examination:                   "Examination",
	ResidentUser:                  "ResidentUser",
	SupervisorUser:                "SupervisorUser",
	ExaminationsActivitiesReviews: "ExaminationsActivitiesReviews",
}

// examinationActivityR is where relationships are stored.
type examinationActivityR struct {
	Examination                   *Examination                      `boil:"Examination" json:"Examination" toml:"Examination" yaml:"Examination"`
	ResidentUser                  *User                             `boil:"ResidentUser" json:"ResidentUser" toml:"ResidentUser" yaml:"ResidentUser"`
	SupervisorUser                *User                             `boil:"SupervisorUser" json:"SupervisorUser" toml:"SupervisorUser" yaml:"SupervisorUser"`
	ExaminationsActivitiesReviews ExaminationsActivitiesReviewSlice `boil:"ExaminationsActivitiesReviews" json:"ExaminationsActivitiesReviews" toml:"ExaminationsActivitiesReviews" yaml:"ExaminationsActivitiesReviews"`
}

// NewStruct creates a new relationship struct
func (*examinationActivityR) NewStruct() *examinationActivityR {
	return &examinationActivityR{}
}

// examinationActivityL is where Load methods for each relationship are stored.
type examinationActivityL struct{}

var (
	examinationActivityAllColumns            = []string{"id", "resident_user_id", "supervisor_user_id", "examination_id", "display_name", "created_at", "annotations"}
	examinationActivityColumnsWithoutDefault = []string{"resident_user_id", "supervisor_user_id", "examination_id", "annotations"}
	examinationActivityColumnsWithDefault    = []string{"id", "display_name", "created_at"}
	examinationActivityPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExaminationActivitySlice is an alias for a slice of pointers to ExaminationActivity.
	// This should almost always be used instead of []ExaminationActivity.
	ExaminationActivitySlice []*ExaminationActivity
	// ExaminationActivityHook is the signature for custom ExaminationActivity hook methods
	ExaminationActivityHook func(context.Context, boil.ContextExecutor, *ExaminationActivity) error

	examinationActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examinationActivityType                 = reflect.TypeOf(&ExaminationActivity{})
	examinationActivityMapping              = queries.MakeStructMapping(examinationActivityType)
	examinationActivityPrimaryKeyMapping, _ = queries.BindMapping(examinationActivityType, examinationActivityMapping, examinationActivityPrimaryKeyColumns)
	examinationActivityInsertCacheMut       sync.RWMutex
	examinationActivityInsertCache          = make(map[string]insertCache)
	examinationActivityUpdateCacheMut       sync.RWMutex
	examinationActivityUpdateCache          = make(map[string]updateCache)
	examinationActivityUpsertCacheMut       sync.RWMutex
	examinationActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examinationActivityBeforeInsertHooks []ExaminationActivityHook
var examinationActivityBeforeUpdateHooks []ExaminationActivityHook
var examinationActivityBeforeDeleteHooks []ExaminationActivityHook
var examinationActivityBeforeUpsertHooks []ExaminationActivityHook

var examinationActivityAfterInsertHooks []ExaminationActivityHook
var examinationActivityAfterSelectHooks []ExaminationActivityHook
var examinationActivityAfterUpdateHooks []ExaminationActivityHook
var examinationActivityAfterDeleteHooks []ExaminationActivityHook
var examinationActivityAfterUpsertHooks []ExaminationActivityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExaminationActivity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExaminationActivity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExaminationActivity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExaminationActivity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExaminationActivity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExaminationActivity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExaminationActivity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExaminationActivity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExaminationActivity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationActivityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExaminationActivityHook registers your hook function for all future operations.
func AddExaminationActivityHook(hookPoint boil.HookPoint, examinationActivityHook ExaminationActivityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		examinationActivityBeforeInsertHooks = append(examinationActivityBeforeInsertHooks, examinationActivityHook)
	case boil.BeforeUpdateHook:
		examinationActivityBeforeUpdateHooks = append(examinationActivityBeforeUpdateHooks, examinationActivityHook)
	case boil.BeforeDeleteHook:
		examinationActivityBeforeDeleteHooks = append(examinationActivityBeforeDeleteHooks, examinationActivityHook)
	case boil.BeforeUpsertHook:
		examinationActivityBeforeUpsertHooks = append(examinationActivityBeforeUpsertHooks, examinationActivityHook)
	case boil.AfterInsertHook:
		examinationActivityAfterInsertHooks = append(examinationActivityAfterInsertHooks, examinationActivityHook)
	case boil.AfterSelectHook:
		examinationActivityAfterSelectHooks = append(examinationActivityAfterSelectHooks, examinationActivityHook)
	case boil.AfterUpdateHook:
		examinationActivityAfterUpdateHooks = append(examinationActivityAfterUpdateHooks, examinationActivityHook)
	case boil.AfterDeleteHook:
		examinationActivityAfterDeleteHooks = append(examinationActivityAfterDeleteHooks, examinationActivityHook)
	case boil.AfterUpsertHook:
		examinationActivityAfterUpsertHooks = append(examinationActivityAfterUpsertHooks, examinationActivityHook)
	}
}

// One returns a single examinationActivity record from the query.
func (q examinationActivityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExaminationActivity, error) {
	o := &ExaminationActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for examination_activities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExaminationActivity records from the query.
func (q examinationActivityQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExaminationActivitySlice, error) {
	var o []*ExaminationActivity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExaminationActivity slice")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExaminationActivity records in the query.
func (q examinationActivityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count examination_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examinationActivityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if examination_activities exists")
	}

	return count > 0, nil
}

// Examination pointed to by the foreign key.
func (o *ExaminationActivity) Examination(mods ...qm.QueryMod) examinationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExaminationID),
	}

	queryMods = append(queryMods, mods...)

	query := Examinations(queryMods...)
	queries.SetFrom(query.Query, "\"examinations\"")

	return query
}

// ResidentUser pointed to by the foreign key.
func (o *ExaminationActivity) ResidentUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ResidentUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// SupervisorUser pointed to by the foreign key.
func (o *ExaminationActivity) SupervisorUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupervisorUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ExaminationsActivitiesReviews retrieves all the examinations_activities_review's ExaminationsActivitiesReviews with an executor.
func (o *ExaminationActivity) ExaminationsActivitiesReviews(mods ...qm.QueryMod) examinationsActivitiesReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examinations_activities_reviews\".\"examination_activities_id\"=?", o.ID),
	)

	query := ExaminationsActivitiesReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activities_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examinations_activities_reviews\".*"})
	}

	return query
}

// LoadExamination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationActivityL) LoadExamination(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationActivity interface{}, mods queries.Applicator) error {
	var slice []*ExaminationActivity
	var object *ExaminationActivity

	if singular {
		object = maybeExaminationActivity.(*ExaminationActivity)
	} else {
		slice = *maybeExaminationActivity.(*[]*ExaminationActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationActivityR{}
		}
		args = append(args, object.ExaminationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationActivityR{}
			}

			for _, a := range args {
				if a == obj.ExaminationID {
					continue Outer
				}
			}

			args = append(args, obj.ExaminationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations`),
		qm.WhereIn(`examinations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Examination")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Examination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for examinations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Examination = foreign
		if foreign.R == nil {
			foreign.R = &examinationR{}
		}
		foreign.R.ExaminationActivities = append(foreign.R.ExaminationActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExaminationID == foreign.ID {
				local.R.Examination = foreign
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.ExaminationActivities = append(foreign.R.ExaminationActivities, local)
				break
			}
		}
	}

	return nil
}

// LoadResidentUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationActivityL) LoadResidentUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationActivity interface{}, mods queries.Applicator) error {
	var slice []*ExaminationActivity
	var object *ExaminationActivity

	if singular {
		object = maybeExaminationActivity.(*ExaminationActivity)
	} else {
		slice = *maybeExaminationActivity.(*[]*ExaminationActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationActivityR{}
		}
		args = append(args, object.ResidentUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationActivityR{}
			}

			for _, a := range args {
				if a == obj.ResidentUserID {
					continue Outer
				}
			}

			args = append(args, obj.ResidentUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ResidentUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ResidentUserExaminationActivities = append(foreign.R.ResidentUserExaminationActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResidentUserID == foreign.ID {
				local.R.ResidentUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ResidentUserExaminationActivities = append(foreign.R.ResidentUserExaminationActivities, local)
				break
			}
		}
	}

	return nil
}

// LoadSupervisorUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationActivityL) LoadSupervisorUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationActivity interface{}, mods queries.Applicator) error {
	var slice []*ExaminationActivity
	var object *ExaminationActivity

	if singular {
		object = maybeExaminationActivity.(*ExaminationActivity)
	} else {
		slice = *maybeExaminationActivity.(*[]*ExaminationActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationActivityR{}
		}
		if !queries.IsNil(object.SupervisorUserID) {
			args = append(args, object.SupervisorUserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationActivityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SupervisorUserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SupervisorUserID) {
				args = append(args, obj.SupervisorUserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SupervisorUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SupervisorUserExaminationActivities = append(foreign.R.SupervisorUserExaminationActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SupervisorUserID, foreign.ID) {
				local.R.SupervisorUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SupervisorUserExaminationActivities = append(foreign.R.SupervisorUserExaminationActivities, local)
				break
			}
		}
	}

	return nil
}

// LoadExaminationsActivitiesReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examinationActivityL) LoadExaminationsActivitiesReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationActivity interface{}, mods queries.Applicator) error {
	var slice []*ExaminationActivity
	var object *ExaminationActivity

	if singular {
		object = maybeExaminationActivity.(*ExaminationActivity)
	} else {
		slice = *maybeExaminationActivity.(*[]*ExaminationActivity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationActivityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationActivityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activities_reviews`),
		qm.WhereIn(`examinations_activities_reviews.examination_activities_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examinations_activities_reviews")
	}

	var resultSlice []*ExaminationsActivitiesReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examinations_activities_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examinations_activities_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activities_reviews")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExaminationsActivitiesReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationsActivitiesReviewR{}
			}
			foreign.R.ExaminationActivity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExaminationActivitiesID {
				local.R.ExaminationsActivitiesReviews = append(local.R.ExaminationsActivitiesReviews, foreign)
				if foreign.R == nil {
					foreign.R = &examinationsActivitiesReviewR{}
				}
				foreign.R.ExaminationActivity = local
				break
			}
		}
	}

	return nil
}

// SetExamination of the examinationActivity to the related item.
// Sets o.R.Examination to related.
// Adds o to related.R.ExaminationActivities.
func (o *ExaminationActivity) SetExamination(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Examination) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examination_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"examination_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExaminationID = related.ID
	if o.R == nil {
		o.R = &examinationActivityR{
			Examination: related,
		}
	} else {
		o.R.Examination = related
	}

	if related.R == nil {
		related.R = &examinationR{
			ExaminationActivities: ExaminationActivitySlice{o},
		}
	} else {
		related.R.ExaminationActivities = append(related.R.ExaminationActivities, o)
	}

	return nil
}

// SetResidentUser of the examinationActivity to the related item.
// Sets o.R.ResidentUser to related.
// Adds o to related.R.ResidentUserExaminationActivities.
func (o *ExaminationActivity) SetResidentUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examination_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"resident_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResidentUserID = related.ID
	if o.R == nil {
		o.R = &examinationActivityR{
			ResidentUser: related,
		}
	} else {
		o.R.ResidentUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ResidentUserExaminationActivities: ExaminationActivitySlice{o},
		}
	} else {
		related.R.ResidentUserExaminationActivities = append(related.R.ResidentUserExaminationActivities, o)
	}

	return nil
}

// SetSupervisorUser of the examinationActivity to the related item.
// Sets o.R.SupervisorUser to related.
// Adds o to related.R.SupervisorUserExaminationActivities.
func (o *ExaminationActivity) SetSupervisorUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examination_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SupervisorUserID, related.ID)
	if o.R == nil {
		o.R = &examinationActivityR{
			SupervisorUser: related,
		}
	} else {
		o.R.SupervisorUser = related
	}

	if related.R == nil {
		related.R = &userR{
			SupervisorUserExaminationActivities: ExaminationActivitySlice{o},
		}
	} else {
		related.R.SupervisorUserExaminationActivities = append(related.R.SupervisorUserExaminationActivities, o)
	}

	return nil
}

// RemoveSupervisorUser relationship.
// Sets o.R.SupervisorUser to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ExaminationActivity) RemoveSupervisorUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.SupervisorUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("supervisor_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SupervisorUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SupervisorUserExaminationActivities {
		if queries.Equal(o.SupervisorUserID, ri.SupervisorUserID) {
			continue
		}

		ln := len(related.R.SupervisorUserExaminationActivities)
		if ln > 1 && i < ln-1 {
			related.R.SupervisorUserExaminationActivities[i] = related.R.SupervisorUserExaminationActivities[ln-1]
		}
		related.R.SupervisorUserExaminationActivities = related.R.SupervisorUserExaminationActivities[:ln-1]
		break
	}
	return nil
}

// AddExaminationsActivitiesReviews adds the given related objects to the existing relationships
// of the examination_activity, optionally inserting them as new records.
// Appends related to o.R.ExaminationsActivitiesReviews.
// Sets related.R.ExaminationActivity appropriately.
func (o *ExaminationActivity) AddExaminationsActivitiesReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationsActivitiesReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExaminationActivitiesID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"examination_activities_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExaminationActivitiesID = o.ID
		}
	}

	if o.R == nil {
		o.R = &examinationActivityR{
			ExaminationsActivitiesReviews: related,
		}
	} else {
		o.R.ExaminationsActivitiesReviews = append(o.R.ExaminationsActivitiesReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationsActivitiesReviewR{
				ExaminationActivity: o,
			}
		} else {
			rel.R.ExaminationActivity = o
		}
	}
	return nil
}

// ExaminationActivities retrieves all the records using an executor.
func ExaminationActivities(mods ...qm.QueryMod) examinationActivityQuery {
	mods = append(mods, qm.From("\"examination_activities\""))
	return examinationActivityQuery{NewQuery(mods...)}
}

// FindExaminationActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExaminationActivity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExaminationActivity, error) {
	examinationActivityObj := &ExaminationActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"examination_activities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examinationActivityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from examination_activities")
	}

	if err = examinationActivityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examinationActivityObj, err
	}

	return examinationActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExaminationActivity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examination_activities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examinationActivityInsertCacheMut.RLock()
	cache, cached := examinationActivityInsertCache[key]
	examinationActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examinationActivityAllColumns,
			examinationActivityColumnsWithDefault,
			examinationActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examinationActivityType, examinationActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examinationActivityType, examinationActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"examination_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"examination_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into examination_activities")
	}

	if !cached {
		examinationActivityInsertCacheMut.Lock()
		examinationActivityInsertCache[key] = cache
		examinationActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExaminationActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExaminationActivity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examinationActivityUpdateCacheMut.RLock()
	cache, cached := examinationActivityUpdateCache[key]
	examinationActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examinationActivityAllColumns,
			examinationActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update examination_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"examination_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examinationActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examinationActivityType, examinationActivityMapping, append(wl, examinationActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update examination_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for examination_activities")
	}

	if !cached {
		examinationActivityUpdateCacheMut.Lock()
		examinationActivityUpdateCache[key] = cache
		examinationActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examinationActivityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for examination_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for examination_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExaminationActivitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"examination_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examinationActivityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examinationActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examinationActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExaminationActivity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examination_activities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examinationActivityUpsertCacheMut.RLock()
	cache, cached := examinationActivityUpsertCache[key]
	examinationActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			examinationActivityAllColumns,
			examinationActivityColumnsWithDefault,
			examinationActivityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			examinationActivityAllColumns,
			examinationActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert examination_activities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(examinationActivityPrimaryKeyColumns))
			copy(conflict, examinationActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"examination_activities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(examinationActivityType, examinationActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examinationActivityType, examinationActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert examination_activities")
	}

	if !cached {
		examinationActivityUpsertCacheMut.Lock()
		examinationActivityUpsertCache[key] = cache
		examinationActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExaminationActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExaminationActivity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExaminationActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examinationActivityPrimaryKeyMapping)
	sql := "DELETE FROM \"examination_activities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from examination_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for examination_activities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examinationActivityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examinationActivityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examination_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examination_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExaminationActivitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examinationActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"examination_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationActivityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinationActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examination_activities")
	}

	if len(examinationActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExaminationActivity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExaminationActivity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExaminationActivitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExaminationActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"examination_activities\".* FROM \"examination_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationActivityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExaminationActivitySlice")
	}

	*o = slice

	return nil
}

// ExaminationActivityExists checks if the ExaminationActivity row exists.
func ExaminationActivityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"examination_activities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if examination_activities exists")
	}

	return exists, nil
}
