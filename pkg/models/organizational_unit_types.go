// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrganizationalUnitType is an object representing the database table.
type OrganizationalUnitType struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *organizationalUnitTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L organizationalUnitTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrganizationalUnitTypeColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var OrganizationalUnitTypeTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "organizational_unit_types.id",
	Name: "organizational_unit_types.name",
}

// Generated where

var OrganizationalUnitTypeWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"organizational_unit_types\".\"id\""},
	Name: whereHelperstring{field: "\"organizational_unit_types\".\"name\""},
}

// OrganizationalUnitTypeRels is where relationship names are stored.
var OrganizationalUnitTypeRels = struct {
	TypeOrganizationalUnits string
}{
	TypeOrganizationalUnits: "TypeOrganizationalUnits",
}

// organizationalUnitTypeR is where relationships are stored.
type organizationalUnitTypeR struct {
	TypeOrganizationalUnits OrganizationalUnitSlice `boil:"TypeOrganizationalUnits" json:"TypeOrganizationalUnits" toml:"TypeOrganizationalUnits" yaml:"TypeOrganizationalUnits"`
}

// NewStruct creates a new relationship struct
func (*organizationalUnitTypeR) NewStruct() *organizationalUnitTypeR {
	return &organizationalUnitTypeR{}
}

// organizationalUnitTypeL is where Load methods for each relationship are stored.
type organizationalUnitTypeL struct{}

var (
	organizationalUnitTypeAllColumns            = []string{"id", "name"}
	organizationalUnitTypeColumnsWithoutDefault = []string{"name"}
	organizationalUnitTypeColumnsWithDefault    = []string{"id"}
	organizationalUnitTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// OrganizationalUnitTypeSlice is an alias for a slice of pointers to OrganizationalUnitType.
	// This should almost always be used instead of []OrganizationalUnitType.
	OrganizationalUnitTypeSlice []*OrganizationalUnitType
	// OrganizationalUnitTypeHook is the signature for custom OrganizationalUnitType hook methods
	OrganizationalUnitTypeHook func(context.Context, boil.ContextExecutor, *OrganizationalUnitType) error

	organizationalUnitTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	organizationalUnitTypeType                 = reflect.TypeOf(&OrganizationalUnitType{})
	organizationalUnitTypeMapping              = queries.MakeStructMapping(organizationalUnitTypeType)
	organizationalUnitTypePrimaryKeyMapping, _ = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, organizationalUnitTypePrimaryKeyColumns)
	organizationalUnitTypeInsertCacheMut       sync.RWMutex
	organizationalUnitTypeInsertCache          = make(map[string]insertCache)
	organizationalUnitTypeUpdateCacheMut       sync.RWMutex
	organizationalUnitTypeUpdateCache          = make(map[string]updateCache)
	organizationalUnitTypeUpsertCacheMut       sync.RWMutex
	organizationalUnitTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var organizationalUnitTypeBeforeInsertHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeBeforeUpdateHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeBeforeDeleteHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeBeforeUpsertHooks []OrganizationalUnitTypeHook

var organizationalUnitTypeAfterInsertHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeAfterSelectHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeAfterUpdateHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeAfterDeleteHooks []OrganizationalUnitTypeHook
var organizationalUnitTypeAfterUpsertHooks []OrganizationalUnitTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrganizationalUnitType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrganizationalUnitType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrganizationalUnitType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrganizationalUnitType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrganizationalUnitType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrganizationalUnitType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrganizationalUnitType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrganizationalUnitType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrganizationalUnitType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range organizationalUnitTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrganizationalUnitTypeHook registers your hook function for all future operations.
func AddOrganizationalUnitTypeHook(hookPoint boil.HookPoint, organizationalUnitTypeHook OrganizationalUnitTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		organizationalUnitTypeBeforeInsertHooks = append(organizationalUnitTypeBeforeInsertHooks, organizationalUnitTypeHook)
	case boil.BeforeUpdateHook:
		organizationalUnitTypeBeforeUpdateHooks = append(organizationalUnitTypeBeforeUpdateHooks, organizationalUnitTypeHook)
	case boil.BeforeDeleteHook:
		organizationalUnitTypeBeforeDeleteHooks = append(organizationalUnitTypeBeforeDeleteHooks, organizationalUnitTypeHook)
	case boil.BeforeUpsertHook:
		organizationalUnitTypeBeforeUpsertHooks = append(organizationalUnitTypeBeforeUpsertHooks, organizationalUnitTypeHook)
	case boil.AfterInsertHook:
		organizationalUnitTypeAfterInsertHooks = append(organizationalUnitTypeAfterInsertHooks, organizationalUnitTypeHook)
	case boil.AfterSelectHook:
		organizationalUnitTypeAfterSelectHooks = append(organizationalUnitTypeAfterSelectHooks, organizationalUnitTypeHook)
	case boil.AfterUpdateHook:
		organizationalUnitTypeAfterUpdateHooks = append(organizationalUnitTypeAfterUpdateHooks, organizationalUnitTypeHook)
	case boil.AfterDeleteHook:
		organizationalUnitTypeAfterDeleteHooks = append(organizationalUnitTypeAfterDeleteHooks, organizationalUnitTypeHook)
	case boil.AfterUpsertHook:
		organizationalUnitTypeAfterUpsertHooks = append(organizationalUnitTypeAfterUpsertHooks, organizationalUnitTypeHook)
	}
}

// One returns a single organizationalUnitType record from the query.
func (q organizationalUnitTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrganizationalUnitType, error) {
	o := &OrganizationalUnitType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for organizational_unit_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrganizationalUnitType records from the query.
func (q organizationalUnitTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrganizationalUnitTypeSlice, error) {
	var o []*OrganizationalUnitType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrganizationalUnitType slice")
	}

	if len(organizationalUnitTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrganizationalUnitType records in the query.
func (q organizationalUnitTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count organizational_unit_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q organizationalUnitTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if organizational_unit_types exists")
	}

	return count > 0, nil
}

// TypeOrganizationalUnits retrieves all the organizational_unit's OrganizationalUnits with an executor via type_id column.
func (o *OrganizationalUnitType) TypeOrganizationalUnits(mods ...qm.QueryMod) organizationalUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"organizational_units\".\"type_id\"=?", o.ID),
	)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizational_units\".*"})
	}

	return query
}

// LoadTypeOrganizationalUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (organizationalUnitTypeL) LoadTypeOrganizationalUnits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrganizationalUnitType interface{}, mods queries.Applicator) error {
	var slice []*OrganizationalUnitType
	var object *OrganizationalUnitType

	if singular {
		object = maybeOrganizationalUnitType.(*OrganizationalUnitType)
	} else {
		slice = *maybeOrganizationalUnitType.(*[]*OrganizationalUnitType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &organizationalUnitTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &organizationalUnitTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizational_units")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice organizational_units")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TypeOrganizationalUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationalUnitR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeOrganizationalUnits = append(local.R.TypeOrganizationalUnits, foreign)
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// AddTypeOrganizationalUnits adds the given related objects to the existing relationships
// of the organizational_unit_type, optionally inserting them as new records.
// Appends related to o.R.TypeOrganizationalUnits.
// Sets related.R.Type appropriately.
func (o *OrganizationalUnitType) AddTypeOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationalUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"organizational_units\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
				strmangle.WhereClause("\"", "\"", 2, organizationalUnitPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &organizationalUnitTypeR{
			TypeOrganizationalUnits: related,
		}
	} else {
		o.R.TypeOrganizationalUnits = append(o.R.TypeOrganizationalUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationalUnitR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// OrganizationalUnitTypes retrieves all the records using an executor.
func OrganizationalUnitTypes(mods ...qm.QueryMod) organizationalUnitTypeQuery {
	mods = append(mods, qm.From("\"organizational_unit_types\""))
	return organizationalUnitTypeQuery{NewQuery(mods...)}
}

// FindOrganizationalUnitType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrganizationalUnitType(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrganizationalUnitType, error) {
	organizationalUnitTypeObj := &OrganizationalUnitType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"organizational_unit_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, organizationalUnitTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from organizational_unit_types")
	}

	if err = organizationalUnitTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return organizationalUnitTypeObj, err
	}

	return organizationalUnitTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrganizationalUnitType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizational_unit_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationalUnitTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	organizationalUnitTypeInsertCacheMut.RLock()
	cache, cached := organizationalUnitTypeInsertCache[key]
	organizationalUnitTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			organizationalUnitTypeAllColumns,
			organizationalUnitTypeColumnsWithDefault,
			organizationalUnitTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"organizational_unit_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"organizational_unit_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into organizational_unit_types")
	}

	if !cached {
		organizationalUnitTypeInsertCacheMut.Lock()
		organizationalUnitTypeInsertCache[key] = cache
		organizationalUnitTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrganizationalUnitType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrganizationalUnitType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	organizationalUnitTypeUpdateCacheMut.RLock()
	cache, cached := organizationalUnitTypeUpdateCache[key]
	organizationalUnitTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			organizationalUnitTypeAllColumns,
			organizationalUnitTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update organizational_unit_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"organizational_unit_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, organizationalUnitTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, append(wl, organizationalUnitTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update organizational_unit_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for organizational_unit_types")
	}

	if !cached {
		organizationalUnitTypeUpdateCacheMut.Lock()
		organizationalUnitTypeUpdateCache[key] = cache
		organizationalUnitTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q organizationalUnitTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for organizational_unit_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for organizational_unit_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrganizationalUnitTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"organizational_unit_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, organizationalUnitTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in organizationalUnitType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all organizationalUnitType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrganizationalUnitType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no organizational_unit_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(organizationalUnitTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	organizationalUnitTypeUpsertCacheMut.RLock()
	cache, cached := organizationalUnitTypeUpsertCache[key]
	organizationalUnitTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			organizationalUnitTypeAllColumns,
			organizationalUnitTypeColumnsWithDefault,
			organizationalUnitTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			organizationalUnitTypeAllColumns,
			organizationalUnitTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert organizational_unit_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(organizationalUnitTypePrimaryKeyColumns))
			copy(conflict, organizationalUnitTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"organizational_unit_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(organizationalUnitTypeType, organizationalUnitTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert organizational_unit_types")
	}

	if !cached {
		organizationalUnitTypeUpsertCacheMut.Lock()
		organizationalUnitTypeUpsertCache[key] = cache
		organizationalUnitTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrganizationalUnitType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrganizationalUnitType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrganizationalUnitType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), organizationalUnitTypePrimaryKeyMapping)
	sql := "DELETE FROM \"organizational_unit_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from organizational_unit_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for organizational_unit_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q organizationalUnitTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no organizationalUnitTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizational_unit_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizational_unit_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrganizationalUnitTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(organizationalUnitTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"organizational_unit_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationalUnitTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from organizationalUnitType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for organizational_unit_types")
	}

	if len(organizationalUnitTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrganizationalUnitType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrganizationalUnitType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrganizationalUnitTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrganizationalUnitTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), organizationalUnitTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"organizational_unit_types\".* FROM \"organizational_unit_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, organizationalUnitTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrganizationalUnitTypeSlice")
	}

	*o = slice

	return nil
}

// OrganizationalUnitTypeExists checks if the OrganizationalUnitType row exists.
func OrganizationalUnitTypeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"organizational_unit_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if organizational_unit_types exists")
	}

	return exists, nil
}
