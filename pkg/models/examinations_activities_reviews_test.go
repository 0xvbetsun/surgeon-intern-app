// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExaminationsActivitiesReviews(t *testing.T) {
	t.Parallel()

	query := ExaminationsActivitiesReviews()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExaminationsActivitiesReviewsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsActivitiesReviewsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExaminationsActivitiesReviews().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsActivitiesReviewsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationsActivitiesReviewSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationsActivitiesReviewsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExaminationsActivitiesReviewExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ExaminationsActivitiesReview exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExaminationsActivitiesReviewExists to return true, but got false.")
	}
}

func testExaminationsActivitiesReviewsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	examinationsActivitiesReviewFound, err := FindExaminationsActivitiesReview(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if examinationsActivitiesReviewFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExaminationsActivitiesReviewsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExaminationsActivitiesReviews().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExaminationsActivitiesReviewsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExaminationsActivitiesReviews().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExaminationsActivitiesReviewsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	examinationsActivitiesReviewOne := &ExaminationsActivitiesReview{}
	examinationsActivitiesReviewTwo := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, examinationsActivitiesReviewOne, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationsActivitiesReviewTwo, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationsActivitiesReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationsActivitiesReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExaminationsActivitiesReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExaminationsActivitiesReviewsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	examinationsActivitiesReviewOne := &ExaminationsActivitiesReview{}
	examinationsActivitiesReviewTwo := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, examinationsActivitiesReviewOne, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationsActivitiesReviewTwo, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationsActivitiesReviewOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationsActivitiesReviewTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func examinationsActivitiesReviewBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func examinationsActivitiesReviewAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationsActivitiesReview) error {
	*o = ExaminationsActivitiesReview{}
	return nil
}

func testExaminationsActivitiesReviewsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExaminationsActivitiesReview{}
	o := &ExaminationsActivitiesReview{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview object: %s", err)
	}

	AddExaminationsActivitiesReviewHook(boil.BeforeInsertHook, examinationsActivitiesReviewBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewBeforeInsertHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.AfterInsertHook, examinationsActivitiesReviewAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewAfterInsertHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.AfterSelectHook, examinationsActivitiesReviewAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewAfterSelectHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.BeforeUpdateHook, examinationsActivitiesReviewBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewBeforeUpdateHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.AfterUpdateHook, examinationsActivitiesReviewAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewAfterUpdateHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.BeforeDeleteHook, examinationsActivitiesReviewBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewBeforeDeleteHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.AfterDeleteHook, examinationsActivitiesReviewAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewAfterDeleteHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.BeforeUpsertHook, examinationsActivitiesReviewBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewBeforeUpsertHooks = []ExaminationsActivitiesReviewHook{}

	AddExaminationsActivitiesReviewHook(boil.AfterUpsertHook, examinationsActivitiesReviewAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	examinationsActivitiesReviewAfterUpsertHooks = []ExaminationsActivitiesReviewHook{}
}

func testExaminationsActivitiesReviewsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationsActivitiesReviewsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(examinationsActivitiesReviewColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationsActivitiesReviewToOneExaminationsActivityReviewUsingExaminationsActivityReview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationsActivitiesReview
	var foreign ExaminationsActivityReview

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examinationsActivityReviewDBTypes, false, examinationsActivityReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivityReview struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ExaminationsActivityReviewsID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ExaminationsActivityReview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationsActivitiesReviewSlice{&local}
	if err = local.L.LoadExaminationsActivityReview(ctx, tx, false, (*[]*ExaminationsActivitiesReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ExaminationsActivityReview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ExaminationsActivityReview = nil
	if err = local.L.LoadExaminationsActivityReview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ExaminationsActivityReview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationsActivitiesReviewToOneUserUsingActivityAuthorUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationsActivitiesReview
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ActivityAuthorUserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ActivityAuthorUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationsActivitiesReviewSlice{&local}
	if err = local.L.LoadActivityAuthorUser(ctx, tx, false, (*[]*ExaminationsActivitiesReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ActivityAuthorUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ActivityAuthorUser = nil
	if err = local.L.LoadActivityAuthorUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ActivityAuthorUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationsActivitiesReviewToOneUserUsingActivityReviewerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationsActivitiesReview
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ActivityReviewerUserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ActivityReviewerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationsActivitiesReviewSlice{&local}
	if err = local.L.LoadActivityReviewerUser(ctx, tx, false, (*[]*ExaminationsActivitiesReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ActivityReviewerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ActivityReviewerUser = nil
	if err = local.L.LoadActivityReviewerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ActivityReviewerUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationsActivitiesReviewToOneExaminationActivityUsingExaminationActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationsActivitiesReview
	var foreign ExaminationActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ExaminationActivitiesID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ExaminationActivity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationsActivitiesReviewSlice{&local}
	if err = local.L.LoadExaminationActivity(ctx, tx, false, (*[]*ExaminationsActivitiesReview)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ExaminationActivity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ExaminationActivity = nil
	if err = local.L.LoadExaminationActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ExaminationActivity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationsActivitiesReviewToOneSetOpExaminationsActivityReviewUsingExaminationsActivityReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationsActivitiesReview
	var b, c ExaminationsActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationsActivityReviewDBTypes, false, strmangle.SetComplement(examinationsActivityReviewPrimaryKeyColumns, examinationsActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationsActivityReviewDBTypes, false, strmangle.SetComplement(examinationsActivityReviewPrimaryKeyColumns, examinationsActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ExaminationsActivityReview{&b, &c} {
		err = a.SetExaminationsActivityReview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ExaminationsActivityReview != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ExaminationsActivitiesReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ExaminationsActivityReviewsID, x.ID) {
			t.Error("foreign key was wrong value", a.ExaminationsActivityReviewsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExaminationsActivityReviewsID))
		reflect.Indirect(reflect.ValueOf(&a.ExaminationsActivityReviewsID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ExaminationsActivityReviewsID, x.ID) {
			t.Error("foreign key was wrong value", a.ExaminationsActivityReviewsID, x.ID)
		}
	}
}

func testExaminationsActivitiesReviewToOneRemoveOpExaminationsActivityReviewUsingExaminationsActivityReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationsActivitiesReview
	var b ExaminationsActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationsActivityReviewDBTypes, false, strmangle.SetComplement(examinationsActivityReviewPrimaryKeyColumns, examinationsActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetExaminationsActivityReview(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveExaminationsActivityReview(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ExaminationsActivityReview().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ExaminationsActivityReview != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ExaminationsActivityReviewsID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ExaminationsActivitiesReviews) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testExaminationsActivitiesReviewToOneSetOpUserUsingActivityAuthorUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationsActivitiesReview
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetActivityAuthorUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ActivityAuthorUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ActivityAuthorUserExaminationsActivitiesReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ActivityAuthorUserID != x.ID {
			t.Error("foreign key was wrong value", a.ActivityAuthorUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ActivityAuthorUserID))
		reflect.Indirect(reflect.ValueOf(&a.ActivityAuthorUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ActivityAuthorUserID != x.ID {
			t.Error("foreign key was wrong value", a.ActivityAuthorUserID, x.ID)
		}
	}
}
func testExaminationsActivitiesReviewToOneSetOpUserUsingActivityReviewerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationsActivitiesReview
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetActivityReviewerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ActivityReviewerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ActivityReviewerUserExaminationsActivitiesReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ActivityReviewerUserID != x.ID {
			t.Error("foreign key was wrong value", a.ActivityReviewerUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ActivityReviewerUserID))
		reflect.Indirect(reflect.ValueOf(&a.ActivityReviewerUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ActivityReviewerUserID != x.ID {
			t.Error("foreign key was wrong value", a.ActivityReviewerUserID, x.ID)
		}
	}
}
func testExaminationsActivitiesReviewToOneSetOpExaminationActivityUsingExaminationActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationsActivitiesReview
	var b, c ExaminationActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ExaminationActivity{&b, &c} {
		err = a.SetExaminationActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ExaminationActivity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ExaminationsActivitiesReviews[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ExaminationActivitiesID != x.ID {
			t.Error("foreign key was wrong value", a.ExaminationActivitiesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExaminationActivitiesID))
		reflect.Indirect(reflect.ValueOf(&a.ExaminationActivitiesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ExaminationActivitiesID != x.ID {
			t.Error("foreign key was wrong value", a.ExaminationActivitiesID, x.ID)
		}
	}
}

func testExaminationsActivitiesReviewsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationsActivitiesReviewsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationsActivitiesReviewSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationsActivitiesReviewsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExaminationsActivitiesReviews().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	examinationsActivitiesReviewDBTypes = map[string]string{`ID`: `uuid`, `ActivityAuthorUserID`: `uuid`, `ActivityReviewerUserID`: `uuid`, `ExaminationActivitiesID`: `uuid`, `ExaminationsActivityReviewsID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `ResidentUpdatedAt`: `timestamp with time zone`, `SupervisorUpdatedAt`: `timestamp with time zone`, `IsReviewed`: `boolean`}
	_                                   = bytes.MinRead
)

func testExaminationsActivitiesReviewsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(examinationsActivitiesReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(examinationsActivitiesReviewAllColumns) == len(examinationsActivitiesReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExaminationsActivitiesReviewsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(examinationsActivitiesReviewAllColumns) == len(examinationsActivitiesReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationsActivitiesReviewDBTypes, true, examinationsActivitiesReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(examinationsActivitiesReviewAllColumns, examinationsActivitiesReviewPrimaryKeyColumns) {
		fields = examinationsActivitiesReviewAllColumns
	} else {
		fields = strmangle.SetComplement(
			examinationsActivitiesReviewAllColumns,
			examinationsActivitiesReviewPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExaminationsActivitiesReviewSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExaminationsActivitiesReviewsUpsert(t *testing.T) {
	t.Parallel()

	if len(examinationsActivitiesReviewAllColumns) == len(examinationsActivitiesReviewPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExaminationsActivitiesReview{}
	if err = randomize.Struct(seed, &o, examinationsActivitiesReviewDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExaminationsActivitiesReview: %s", err)
	}

	count, err := ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationsActivitiesReview struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExaminationsActivitiesReview: %s", err)
	}

	count, err = ExaminationsActivitiesReviews().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
