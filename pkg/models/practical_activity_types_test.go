// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPracticalActivityTypes(t *testing.T) {
	t.Parallel()

	query := PracticalActivityTypes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPracticalActivityTypesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPracticalActivityTypesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PracticalActivityTypes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPracticalActivityTypesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PracticalActivityTypeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPracticalActivityTypesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PracticalActivityTypeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PracticalActivityType exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PracticalActivityTypeExists to return true, but got false.")
	}
}

func testPracticalActivityTypesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	practicalActivityTypeFound, err := FindPracticalActivityType(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if practicalActivityTypeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPracticalActivityTypesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PracticalActivityTypes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPracticalActivityTypesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PracticalActivityTypes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPracticalActivityTypesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	practicalActivityTypeOne := &PracticalActivityType{}
	practicalActivityTypeTwo := &PracticalActivityType{}
	if err = randomize.Struct(seed, practicalActivityTypeOne, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}
	if err = randomize.Struct(seed, practicalActivityTypeTwo, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = practicalActivityTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = practicalActivityTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PracticalActivityTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPracticalActivityTypesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	practicalActivityTypeOne := &PracticalActivityType{}
	practicalActivityTypeTwo := &PracticalActivityType{}
	if err = randomize.Struct(seed, practicalActivityTypeOne, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}
	if err = randomize.Struct(seed, practicalActivityTypeTwo, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = practicalActivityTypeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = practicalActivityTypeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func practicalActivityTypeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func practicalActivityTypeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PracticalActivityType) error {
	*o = PracticalActivityType{}
	return nil
}

func testPracticalActivityTypesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PracticalActivityType{}
	o := &PracticalActivityType{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType object: %s", err)
	}

	AddPracticalActivityTypeHook(boil.BeforeInsertHook, practicalActivityTypeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeBeforeInsertHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.AfterInsertHook, practicalActivityTypeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeAfterInsertHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.AfterSelectHook, practicalActivityTypeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeAfterSelectHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.BeforeUpdateHook, practicalActivityTypeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeBeforeUpdateHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.AfterUpdateHook, practicalActivityTypeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeAfterUpdateHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.BeforeDeleteHook, practicalActivityTypeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeBeforeDeleteHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.AfterDeleteHook, practicalActivityTypeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeAfterDeleteHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.BeforeUpsertHook, practicalActivityTypeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeBeforeUpsertHooks = []PracticalActivityTypeHook{}

	AddPracticalActivityTypeHook(boil.AfterUpsertHook, practicalActivityTypeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	practicalActivityTypeAfterUpsertHooks = []PracticalActivityTypeHook{}
}

func testPracticalActivityTypesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPracticalActivityTypesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(practicalActivityTypeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPracticalActivityTypeToManyExaminations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c Examination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PracticalActivityTypeID = a.ID
	c.PracticalActivityTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Examinations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PracticalActivityTypeID == b.PracticalActivityTypeID {
			bFound = true
		}
		if v.PracticalActivityTypeID == c.PracticalActivityTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PracticalActivityTypeSlice{&a}
	if err = a.L.LoadExaminations(ctx, tx, false, (*[]*PracticalActivityType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Examinations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Examinations = nil
	if err = a.L.LoadExaminations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Examinations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPracticalActivityTypeToManyOrthopedicSurgeryActivities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PracticalActivityTypeID = a.ID
	c.PracticalActivityTypeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PracticalActivityTypeID == b.PracticalActivityTypeID {
			bFound = true
		}
		if v.PracticalActivityTypeID == c.PracticalActivityTypeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PracticalActivityTypeSlice{&a}
	if err = a.L.LoadOrthopedicSurgeryActivities(ctx, tx, false, (*[]*PracticalActivityType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrthopedicSurgeryActivities = nil
	if err = a.L.LoadOrthopedicSurgeryActivities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPracticalActivityTypeToManySpecialties(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c Specialty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, specialtyDBTypes, false, specialtyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, specialtyDBTypes, false, specialtyColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"specialties_activity_types\" (\"activity_type_id\", \"specialty_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"specialties_activity_types\" (\"activity_type_id\", \"specialty_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Specialties().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PracticalActivityTypeSlice{&a}
	if err = a.L.LoadSpecialties(ctx, tx, false, (*[]*PracticalActivityType)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Specialties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Specialties = nil
	if err = a.L.LoadSpecialties(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Specialties); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPracticalActivityTypeToManyAddOpExaminations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c, d, e Examination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Examination{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Examination{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExaminations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PracticalActivityTypeID {
			t.Error("foreign key was wrong value", a.ID, first.PracticalActivityTypeID)
		}
		if a.ID != second.PracticalActivityTypeID {
			t.Error("foreign key was wrong value", a.ID, second.PracticalActivityTypeID)
		}

		if first.R.PracticalActivityType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PracticalActivityType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Examinations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Examinations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Examinations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPracticalActivityTypeToManyAddOpOrthopedicSurgeryActivities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c, d, e OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrthopedicSurgeryActivities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PracticalActivityTypeID {
			t.Error("foreign key was wrong value", a.ID, first.PracticalActivityTypeID)
		}
		if a.ID != second.PracticalActivityTypeID {
			t.Error("foreign key was wrong value", a.ID, second.PracticalActivityTypeID)
		}

		if first.R.PracticalActivityType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PracticalActivityType != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrthopedicSurgeryActivities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrthopedicSurgeryActivities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrthopedicSurgeryActivities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPracticalActivityTypeToManyAddOpSpecialties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c, d, e Specialty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Specialty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, specialtyDBTypes, false, strmangle.SetComplement(specialtyPrimaryKeyColumns, specialtyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Specialty{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSpecialties(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.ActivityTypePracticalActivityTypes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.ActivityTypePracticalActivityTypes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Specialties[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Specialties[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Specialties().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPracticalActivityTypeToManySetOpSpecialties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c, d, e Specialty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Specialty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, specialtyDBTypes, false, strmangle.SetComplement(specialtyPrimaryKeyColumns, specialtyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSpecialties(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Specialties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSpecialties(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Specialties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.ActivityTypePracticalActivityTypes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.ActivityTypePracticalActivityTypes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.ActivityTypePracticalActivityTypes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.ActivityTypePracticalActivityTypes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Specialties[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Specialties[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPracticalActivityTypeToManyRemoveOpSpecialties(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PracticalActivityType
	var b, c, d, e Specialty

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Specialty{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, specialtyDBTypes, false, strmangle.SetComplement(specialtyPrimaryKeyColumns, specialtyColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSpecialties(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Specialties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSpecialties(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Specialties().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.ActivityTypePracticalActivityTypes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.ActivityTypePracticalActivityTypes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.ActivityTypePracticalActivityTypes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ActivityTypePracticalActivityTypes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Specialties) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Specialties[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Specialties[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPracticalActivityTypesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPracticalActivityTypesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PracticalActivityTypeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPracticalActivityTypesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PracticalActivityTypes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	practicalActivityTypeDBTypes = map[string]string{`ID`: `integer`, `DisplayName`: `character varying`, `Name`: `character varying`, `CreatedAt`: `timestamp with time zone`}
	_                            = bytes.MinRead
)

func testPracticalActivityTypesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(practicalActivityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(practicalActivityTypeAllColumns) == len(practicalActivityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPracticalActivityTypesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(practicalActivityTypeAllColumns) == len(practicalActivityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PracticalActivityType{}
	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, practicalActivityTypeDBTypes, true, practicalActivityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(practicalActivityTypeAllColumns, practicalActivityTypePrimaryKeyColumns) {
		fields = practicalActivityTypeAllColumns
	} else {
		fields = strmangle.SetComplement(
			practicalActivityTypeAllColumns,
			practicalActivityTypePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PracticalActivityTypeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPracticalActivityTypesUpsert(t *testing.T) {
	t.Parallel()

	if len(practicalActivityTypeAllColumns) == len(practicalActivityTypePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PracticalActivityType{}
	if err = randomize.Struct(seed, &o, practicalActivityTypeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PracticalActivityType: %s", err)
	}

	count, err := PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, practicalActivityTypeDBTypes, false, practicalActivityTypePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PracticalActivityType: %s", err)
	}

	count, err = PracticalActivityTypes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
