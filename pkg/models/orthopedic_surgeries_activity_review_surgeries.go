// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrthopedicSurgeriesActivityReviewSurgery is an object representing the database table.
type OrthopedicSurgeriesActivityReviewSurgery struct {
	ID                                  string `boil:"id" json:"id" toml:"id" yaml:"id"`
	SurgeryID                           string `boil:"surgery_id" json:"surgery_id" toml:"surgery_id" yaml:"surgery_id"`
	OrthopedicSurgeriesActivityReviewID string `boil:"orthopedic_surgeries_activity_review_id" json:"orthopedic_surgeries_activity_review_id" toml:"orthopedic_surgeries_activity_review_id" yaml:"orthopedic_surgeries_activity_review_id"`

	R *orthopedicSurgeriesActivityReviewSurgeryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orthopedicSurgeriesActivityReviewSurgeryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrthopedicSurgeriesActivityReviewSurgeryColumns = struct {
	ID                                  string
	SurgeryID                           string
	OrthopedicSurgeriesActivityReviewID string
}{
	ID:                                  "id",
	SurgeryID:                           "surgery_id",
	OrthopedicSurgeriesActivityReviewID: "orthopedic_surgeries_activity_review_id",
}

var OrthopedicSurgeriesActivityReviewSurgeryTableColumns = struct {
	ID                                  string
	SurgeryID                           string
	OrthopedicSurgeriesActivityReviewID string
}{
	ID:                                  "orthopedic_surgeries_activity_review_surgeries.id",
	SurgeryID:                           "orthopedic_surgeries_activity_review_surgeries.surgery_id",
	OrthopedicSurgeriesActivityReviewID: "orthopedic_surgeries_activity_review_surgeries.orthopedic_surgeries_activity_review_id",
}

// Generated where

var OrthopedicSurgeriesActivityReviewSurgeryWhere = struct {
	ID                                  whereHelperstring
	SurgeryID                           whereHelperstring
	OrthopedicSurgeriesActivityReviewID whereHelperstring
}{
	ID:                                  whereHelperstring{field: "\"orthopedic_surgeries_activity_review_surgeries\".\"id\""},
	SurgeryID:                           whereHelperstring{field: "\"orthopedic_surgeries_activity_review_surgeries\".\"surgery_id\""},
	OrthopedicSurgeriesActivityReviewID: whereHelperstring{field: "\"orthopedic_surgeries_activity_review_surgeries\".\"orthopedic_surgeries_activity_review_id\""},
}

// OrthopedicSurgeriesActivityReviewSurgeryRels is where relationship names are stored.
var OrthopedicSurgeriesActivityReviewSurgeryRels = struct {
	OrthopedicSurgeriesActivityReview string
	Surgery                           string
}{
	OrthopedicSurgeriesActivityReview: "OrthopedicSurgeriesActivityReview",
	Surgery:                           "Surgery",
}

// orthopedicSurgeriesActivityReviewSurgeryR is where relationships are stored.
type orthopedicSurgeriesActivityReviewSurgeryR struct {
	OrthopedicSurgeriesActivityReview *OrthopedicSurgeriesActivityReview `boil:"OrthopedicSurgeriesActivityReview" json:"OrthopedicSurgeriesActivityReview" toml:"OrthopedicSurgeriesActivityReview" yaml:"OrthopedicSurgeriesActivityReview"`
	Surgery                           *Surgery                           `boil:"Surgery" json:"Surgery" toml:"Surgery" yaml:"Surgery"`
}

// NewStruct creates a new relationship struct
func (*orthopedicSurgeriesActivityReviewSurgeryR) NewStruct() *orthopedicSurgeriesActivityReviewSurgeryR {
	return &orthopedicSurgeriesActivityReviewSurgeryR{}
}

// orthopedicSurgeriesActivityReviewSurgeryL is where Load methods for each relationship are stored.
type orthopedicSurgeriesActivityReviewSurgeryL struct{}

var (
	orthopedicSurgeriesActivityReviewSurgeryAllColumns            = []string{"id", "surgery_id", "orthopedic_surgeries_activity_review_id"}
	orthopedicSurgeriesActivityReviewSurgeryColumnsWithoutDefault = []string{"surgery_id", "orthopedic_surgeries_activity_review_id"}
	orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault    = []string{"id"}
	orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrthopedicSurgeriesActivityReviewSurgerySlice is an alias for a slice of pointers to OrthopedicSurgeriesActivityReviewSurgery.
	// This should almost always be used instead of []OrthopedicSurgeriesActivityReviewSurgery.
	OrthopedicSurgeriesActivityReviewSurgerySlice []*OrthopedicSurgeriesActivityReviewSurgery
	// OrthopedicSurgeriesActivityReviewSurgeryHook is the signature for custom OrthopedicSurgeriesActivityReviewSurgery hook methods
	OrthopedicSurgeriesActivityReviewSurgeryHook func(context.Context, boil.ContextExecutor, *OrthopedicSurgeriesActivityReviewSurgery) error

	orthopedicSurgeriesActivityReviewSurgeryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orthopedicSurgeriesActivityReviewSurgeryType                 = reflect.TypeOf(&OrthopedicSurgeriesActivityReviewSurgery{})
	orthopedicSurgeriesActivityReviewSurgeryMapping              = queries.MakeStructMapping(orthopedicSurgeriesActivityReviewSurgeryType)
	orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyMapping, _ = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns)
	orthopedicSurgeriesActivityReviewSurgeryInsertCacheMut       sync.RWMutex
	orthopedicSurgeriesActivityReviewSurgeryInsertCache          = make(map[string]insertCache)
	orthopedicSurgeriesActivityReviewSurgeryUpdateCacheMut       sync.RWMutex
	orthopedicSurgeriesActivityReviewSurgeryUpdateCache          = make(map[string]updateCache)
	orthopedicSurgeriesActivityReviewSurgeryUpsertCacheMut       sync.RWMutex
	orthopedicSurgeriesActivityReviewSurgeryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orthopedicSurgeriesActivityReviewSurgeryBeforeInsertHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryBeforeUpdateHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryBeforeDeleteHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryBeforeUpsertHooks []OrthopedicSurgeriesActivityReviewSurgeryHook

var orthopedicSurgeriesActivityReviewSurgeryAfterInsertHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryAfterUpdateHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryAfterDeleteHooks []OrthopedicSurgeriesActivityReviewSurgeryHook
var orthopedicSurgeriesActivityReviewSurgeryAfterUpsertHooks []OrthopedicSurgeriesActivityReviewSurgeryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrthopedicSurgeriesActivityReviewSurgery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orthopedicSurgeriesActivityReviewSurgeryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrthopedicSurgeriesActivityReviewSurgeryHook registers your hook function for all future operations.
func AddOrthopedicSurgeriesActivityReviewSurgeryHook(hookPoint boil.HookPoint, orthopedicSurgeriesActivityReviewSurgeryHook OrthopedicSurgeriesActivityReviewSurgeryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		orthopedicSurgeriesActivityReviewSurgeryBeforeInsertHooks = append(orthopedicSurgeriesActivityReviewSurgeryBeforeInsertHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.BeforeUpdateHook:
		orthopedicSurgeriesActivityReviewSurgeryBeforeUpdateHooks = append(orthopedicSurgeriesActivityReviewSurgeryBeforeUpdateHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.BeforeDeleteHook:
		orthopedicSurgeriesActivityReviewSurgeryBeforeDeleteHooks = append(orthopedicSurgeriesActivityReviewSurgeryBeforeDeleteHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.BeforeUpsertHook:
		orthopedicSurgeriesActivityReviewSurgeryBeforeUpsertHooks = append(orthopedicSurgeriesActivityReviewSurgeryBeforeUpsertHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.AfterInsertHook:
		orthopedicSurgeriesActivityReviewSurgeryAfterInsertHooks = append(orthopedicSurgeriesActivityReviewSurgeryAfterInsertHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.AfterSelectHook:
		orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks = append(orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.AfterUpdateHook:
		orthopedicSurgeriesActivityReviewSurgeryAfterUpdateHooks = append(orthopedicSurgeriesActivityReviewSurgeryAfterUpdateHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.AfterDeleteHook:
		orthopedicSurgeriesActivityReviewSurgeryAfterDeleteHooks = append(orthopedicSurgeriesActivityReviewSurgeryAfterDeleteHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	case boil.AfterUpsertHook:
		orthopedicSurgeriesActivityReviewSurgeryAfterUpsertHooks = append(orthopedicSurgeriesActivityReviewSurgeryAfterUpsertHooks, orthopedicSurgeriesActivityReviewSurgeryHook)
	}
}

// One returns a single orthopedicSurgeriesActivityReviewSurgery record from the query.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrthopedicSurgeriesActivityReviewSurgery, error) {
	o := &OrthopedicSurgeriesActivityReviewSurgery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for orthopedic_surgeries_activity_review_surgeries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrthopedicSurgeriesActivityReviewSurgery records from the query.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrthopedicSurgeriesActivityReviewSurgerySlice, error) {
	var o []*OrthopedicSurgeriesActivityReviewSurgery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrthopedicSurgeriesActivityReviewSurgery slice")
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrthopedicSurgeriesActivityReviewSurgery records in the query.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count orthopedic_surgeries_activity_review_surgeries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if orthopedic_surgeries_activity_review_surgeries exists")
	}

	return count > 0, nil
}

// OrthopedicSurgeriesActivityReview pointed to by the foreign key.
func (o *OrthopedicSurgeriesActivityReviewSurgery) OrthopedicSurgeriesActivityReview(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrthopedicSurgeriesActivityReviewID),
	}

	queryMods = append(queryMods, mods...)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	return query
}

// Surgery pointed to by the foreign key.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Surgery(mods ...qm.QueryMod) surgeryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SurgeryID),
	}

	queryMods = append(queryMods, mods...)

	query := Surgeries(queryMods...)
	queries.SetFrom(query.Query, "\"surgeries\"")

	return query
}

// LoadOrthopedicSurgeriesActivityReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orthopedicSurgeriesActivityReviewSurgeryL) LoadOrthopedicSurgeriesActivityReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrthopedicSurgeriesActivityReviewSurgery interface{}, mods queries.Applicator) error {
	var slice []*OrthopedicSurgeriesActivityReviewSurgery
	var object *OrthopedicSurgeriesActivityReviewSurgery

	if singular {
		object = maybeOrthopedicSurgeriesActivityReviewSurgery.(*OrthopedicSurgeriesActivityReviewSurgery)
	} else {
		slice = *maybeOrthopedicSurgeriesActivityReviewSurgery.(*[]*OrthopedicSurgeriesActivityReviewSurgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
		}
		args = append(args, object.OrthopedicSurgeriesActivityReviewID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
			}

			for _, a := range args {
				if a == obj.OrthopedicSurgeriesActivityReviewID {
					continue Outer
				}
			}

			args = append(args, obj.OrthopedicSurgeriesActivityReviewID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrthopedicSurgeriesActivityReview")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrthopedicSurgeriesActivityReview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrthopedicSurgeriesActivityReview = foreign
		if foreign.R == nil {
			foreign.R = &orthopedicSurgeriesActivityReviewR{}
		}
		foreign.R.OrthopedicSurgeriesActivityReviewSurgeries = append(foreign.R.OrthopedicSurgeriesActivityReviewSurgeries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrthopedicSurgeriesActivityReviewID == foreign.ID {
				local.R.OrthopedicSurgeriesActivityReview = foreign
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.OrthopedicSurgeriesActivityReviewSurgeries = append(foreign.R.OrthopedicSurgeriesActivityReviewSurgeries, local)
				break
			}
		}
	}

	return nil
}

// LoadSurgery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orthopedicSurgeriesActivityReviewSurgeryL) LoadSurgery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrthopedicSurgeriesActivityReviewSurgery interface{}, mods queries.Applicator) error {
	var slice []*OrthopedicSurgeriesActivityReviewSurgery
	var object *OrthopedicSurgeriesActivityReviewSurgery

	if singular {
		object = maybeOrthopedicSurgeriesActivityReviewSurgery.(*OrthopedicSurgeriesActivityReviewSurgery)
	} else {
		slice = *maybeOrthopedicSurgeriesActivityReviewSurgery.(*[]*OrthopedicSurgeriesActivityReviewSurgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
		}
		args = append(args, object.SurgeryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
			}

			for _, a := range args {
				if a == obj.SurgeryID {
					continue Outer
				}
			}

			args = append(args, obj.SurgeryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgeries`),
		qm.WhereIn(`surgeries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Surgery")
	}

	var resultSlice []*Surgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Surgery")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgeries")
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Surgery = foreign
		if foreign.R == nil {
			foreign.R = &surgeryR{}
		}
		foreign.R.OrthopedicSurgeriesActivityReviewSurgeries = append(foreign.R.OrthopedicSurgeriesActivityReviewSurgeries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SurgeryID == foreign.ID {
				local.R.Surgery = foreign
				if foreign.R == nil {
					foreign.R = &surgeryR{}
				}
				foreign.R.OrthopedicSurgeriesActivityReviewSurgeries = append(foreign.R.OrthopedicSurgeriesActivityReviewSurgeries, local)
				break
			}
		}
	}

	return nil
}

// SetOrthopedicSurgeriesActivityReview of the orthopedicSurgeriesActivityReviewSurgery to the related item.
// Sets o.R.OrthopedicSurgeriesActivityReview to related.
// Adds o to related.R.OrthopedicSurgeriesActivityReviewSurgeries.
func (o *OrthopedicSurgeriesActivityReviewSurgery) SetOrthopedicSurgeriesActivityReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrthopedicSurgeriesActivityReview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orthopedic_surgeries_activity_review_surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orthopedic_surgeries_activity_review_id"}),
		strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrthopedicSurgeriesActivityReviewID = related.ID
	if o.R == nil {
		o.R = &orthopedicSurgeriesActivityReviewSurgeryR{
			OrthopedicSurgeriesActivityReview: related,
		}
	} else {
		o.R.OrthopedicSurgeriesActivityReview = related
	}

	if related.R == nil {
		related.R = &orthopedicSurgeriesActivityReviewR{
			OrthopedicSurgeriesActivityReviewSurgeries: OrthopedicSurgeriesActivityReviewSurgerySlice{o},
		}
	} else {
		related.R.OrthopedicSurgeriesActivityReviewSurgeries = append(related.R.OrthopedicSurgeriesActivityReviewSurgeries, o)
	}

	return nil
}

// SetSurgery of the orthopedicSurgeriesActivityReviewSurgery to the related item.
// Sets o.R.Surgery to related.
// Adds o to related.R.OrthopedicSurgeriesActivityReviewSurgeries.
func (o *OrthopedicSurgeriesActivityReviewSurgery) SetSurgery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Surgery) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orthopedic_surgeries_activity_review_surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_id"}),
		strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SurgeryID = related.ID
	if o.R == nil {
		o.R = &orthopedicSurgeriesActivityReviewSurgeryR{
			Surgery: related,
		}
	} else {
		o.R.Surgery = related
	}

	if related.R == nil {
		related.R = &surgeryR{
			OrthopedicSurgeriesActivityReviewSurgeries: OrthopedicSurgeriesActivityReviewSurgerySlice{o},
		}
	} else {
		related.R.OrthopedicSurgeriesActivityReviewSurgeries = append(related.R.OrthopedicSurgeriesActivityReviewSurgeries, o)
	}

	return nil
}

// OrthopedicSurgeriesActivityReviewSurgeries retrieves all the records using an executor.
func OrthopedicSurgeriesActivityReviewSurgeries(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewSurgeryQuery {
	mods = append(mods, qm.From("\"orthopedic_surgeries_activity_review_surgeries\""))
	return orthopedicSurgeriesActivityReviewSurgeryQuery{NewQuery(mods...)}
}

// FindOrthopedicSurgeriesActivityReviewSurgery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrthopedicSurgeriesActivityReviewSurgery(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrthopedicSurgeriesActivityReviewSurgery, error) {
	orthopedicSurgeriesActivityReviewSurgeryObj := &OrthopedicSurgeriesActivityReviewSurgery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orthopedic_surgeries_activity_review_surgeries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orthopedicSurgeriesActivityReviewSurgeryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from orthopedic_surgeries_activity_review_surgeries")
	}

	if err = orthopedicSurgeriesActivityReviewSurgeryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orthopedicSurgeriesActivityReviewSurgeryObj, err
	}

	return orthopedicSurgeriesActivityReviewSurgeryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orthopedic_surgeries_activity_review_surgeries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orthopedicSurgeriesActivityReviewSurgeryInsertCacheMut.RLock()
	cache, cached := orthopedicSurgeriesActivityReviewSurgeryInsertCache[key]
	orthopedicSurgeriesActivityReviewSurgeryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orthopedicSurgeriesActivityReviewSurgeryAllColumns,
			orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault,
			orthopedicSurgeriesActivityReviewSurgeryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orthopedic_surgeries_activity_review_surgeries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orthopedic_surgeries_activity_review_surgeries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into orthopedic_surgeries_activity_review_surgeries")
	}

	if !cached {
		orthopedicSurgeriesActivityReviewSurgeryInsertCacheMut.Lock()
		orthopedicSurgeriesActivityReviewSurgeryInsertCache[key] = cache
		orthopedicSurgeriesActivityReviewSurgeryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrthopedicSurgeriesActivityReviewSurgery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orthopedicSurgeriesActivityReviewSurgeryUpdateCacheMut.RLock()
	cache, cached := orthopedicSurgeriesActivityReviewSurgeryUpdateCache[key]
	orthopedicSurgeriesActivityReviewSurgeryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orthopedicSurgeriesActivityReviewSurgeryAllColumns,
			orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update orthopedic_surgeries_activity_review_surgeries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orthopedic_surgeries_activity_review_surgeries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, append(wl, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update orthopedic_surgeries_activity_review_surgeries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for orthopedic_surgeries_activity_review_surgeries")
	}

	if !cached {
		orthopedicSurgeriesActivityReviewSurgeryUpdateCacheMut.Lock()
		orthopedicSurgeriesActivityReviewSurgeryUpdateCache[key] = cache
		orthopedicSurgeriesActivityReviewSurgeryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for orthopedic_surgeries_activity_review_surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for orthopedic_surgeries_activity_review_surgeries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrthopedicSurgeriesActivityReviewSurgerySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orthopedic_surgeries_activity_review_surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orthopedicSurgeriesActivityReviewSurgery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orthopedicSurgeriesActivityReviewSurgery")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orthopedic_surgeries_activity_review_surgeries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orthopedicSurgeriesActivityReviewSurgeryUpsertCacheMut.RLock()
	cache, cached := orthopedicSurgeriesActivityReviewSurgeryUpsertCache[key]
	orthopedicSurgeriesActivityReviewSurgeryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orthopedicSurgeriesActivityReviewSurgeryAllColumns,
			orthopedicSurgeriesActivityReviewSurgeryColumnsWithDefault,
			orthopedicSurgeriesActivityReviewSurgeryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orthopedicSurgeriesActivityReviewSurgeryAllColumns,
			orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert orthopedic_surgeries_activity_review_surgeries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns))
			copy(conflict, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orthopedic_surgeries_activity_review_surgeries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orthopedicSurgeriesActivityReviewSurgeryType, orthopedicSurgeriesActivityReviewSurgeryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert orthopedic_surgeries_activity_review_surgeries")
	}

	if !cached {
		orthopedicSurgeriesActivityReviewSurgeryUpsertCacheMut.Lock()
		orthopedicSurgeriesActivityReviewSurgeryUpsertCache[key] = cache
		orthopedicSurgeriesActivityReviewSurgeryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrthopedicSurgeriesActivityReviewSurgery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrthopedicSurgeriesActivityReviewSurgery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyMapping)
	sql := "DELETE FROM \"orthopedic_surgeries_activity_review_surgeries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from orthopedic_surgeries_activity_review_surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for orthopedic_surgeries_activity_review_surgeries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orthopedicSurgeriesActivityReviewSurgeryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orthopedicSurgeriesActivityReviewSurgeryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orthopedic_surgeries_activity_review_surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orthopedic_surgeries_activity_review_surgeries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrthopedicSurgeriesActivityReviewSurgerySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orthopedic_surgeries_activity_review_surgeries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orthopedicSurgeriesActivityReviewSurgery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orthopedic_surgeries_activity_review_surgeries")
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrthopedicSurgeriesActivityReviewSurgery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrthopedicSurgeriesActivityReviewSurgery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrthopedicSurgeriesActivityReviewSurgerySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrthopedicSurgeriesActivityReviewSurgerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orthopedic_surgeries_activity_review_surgeries\".* FROM \"orthopedic_surgeries_activity_review_surgeries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrthopedicSurgeriesActivityReviewSurgerySlice")
	}

	*o = slice

	return nil
}

// OrthopedicSurgeriesActivityReviewSurgeryExists checks if the OrthopedicSurgeriesActivityReviewSurgery row exists.
func OrthopedicSurgeriesActivityReviewSurgeryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orthopedic_surgeries_activity_review_surgeries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if orthopedic_surgeries_activity_review_surgeries exists")
	}

	return exists, nil
}
