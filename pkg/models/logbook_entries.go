// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LogbookEntry is an object representing the database table.
type LogbookEntry struct {
	ID                  string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OccurredAt          time.Time   `boil:"occurred_at" json:"occurred_at" toml:"occurred_at" yaml:"occurred_at"`
	OrthopedicSurgeryID null.String `boil:"orthopedic_surgery_id" json:"orthopedic_surgery_id,omitempty" toml:"orthopedic_surgery_id" yaml:"orthopedic_surgery_id,omitempty"`
	ExaminationID       null.String `boil:"examination_id" json:"examination_id,omitempty" toml:"examination_id" yaml:"examination_id,omitempty"`
	ProcedureID         null.String `boil:"procedure_id" json:"procedure_id,omitempty" toml:"procedure_id" yaml:"procedure_id,omitempty"`

	R *logbookEntryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L logbookEntryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LogbookEntryColumns = struct {
	ID                  string
	OccurredAt          string
	OrthopedicSurgeryID string
	ExaminationID       string
	ProcedureID         string
}{
	ID:                  "id",
	OccurredAt:          "occurred_at",
	OrthopedicSurgeryID: "orthopedic_surgery_id",
	ExaminationID:       "examination_id",
	ProcedureID:         "procedure_id",
}

var LogbookEntryTableColumns = struct {
	ID                  string
	OccurredAt          string
	OrthopedicSurgeryID string
	ExaminationID       string
	ProcedureID         string
}{
	ID:                  "logbook_entries.id",
	OccurredAt:          "logbook_entries.occurred_at",
	OrthopedicSurgeryID: "logbook_entries.orthopedic_surgery_id",
	ExaminationID:       "logbook_entries.examination_id",
	ProcedureID:         "logbook_entries.procedure_id",
}

// Generated where

var LogbookEntryWhere = struct {
	ID                  whereHelperstring
	OccurredAt          whereHelpertime_Time
	OrthopedicSurgeryID whereHelpernull_String
	ExaminationID       whereHelpernull_String
	ProcedureID         whereHelpernull_String
}{
	ID:                  whereHelperstring{field: "\"logbook_entries\".\"id\""},
	OccurredAt:          whereHelpertime_Time{field: "\"logbook_entries\".\"occurred_at\""},
	OrthopedicSurgeryID: whereHelpernull_String{field: "\"logbook_entries\".\"orthopedic_surgery_id\""},
	ExaminationID:       whereHelpernull_String{field: "\"logbook_entries\".\"examination_id\""},
	ProcedureID:         whereHelpernull_String{field: "\"logbook_entries\".\"procedure_id\""},
}

// LogbookEntryRels is where relationship names are stored.
var LogbookEntryRels = struct {
	Examination       string
	OrthopedicSurgery string
	Procedure         string
	Activity          string
}{
	Examination:       "Examination",
	OrthopedicSurgery: "OrthopedicSurgery",
	Procedure:         "Procedure",
	Activity:          "Activity",
}

// logbookEntryR is where relationships are stored.
type logbookEntryR struct {
	Examination       *Examination               `boil:"Examination" json:"Examination" toml:"Examination" yaml:"Examination"`
	OrthopedicSurgery *OrthopedicSurgeryActivity `boil:"OrthopedicSurgery" json:"OrthopedicSurgery" toml:"OrthopedicSurgery" yaml:"OrthopedicSurgery"`
	Procedure         *Procedure                 `boil:"Procedure" json:"Procedure" toml:"Procedure" yaml:"Procedure"`
	Activity          *Activity                  `boil:"Activity" json:"Activity" toml:"Activity" yaml:"Activity"`
}

// NewStruct creates a new relationship struct
func (*logbookEntryR) NewStruct() *logbookEntryR {
	return &logbookEntryR{}
}

// logbookEntryL is where Load methods for each relationship are stored.
type logbookEntryL struct{}

var (
	logbookEntryAllColumns            = []string{"id", "occurred_at", "orthopedic_surgery_id", "examination_id", "procedure_id"}
	logbookEntryColumnsWithoutDefault = []string{"occurred_at", "orthopedic_surgery_id", "examination_id", "procedure_id"}
	logbookEntryColumnsWithDefault    = []string{"id"}
	logbookEntryPrimaryKeyColumns     = []string{"id"}
)

type (
	// LogbookEntrySlice is an alias for a slice of pointers to LogbookEntry.
	// This should almost always be used instead of []LogbookEntry.
	LogbookEntrySlice []*LogbookEntry
	// LogbookEntryHook is the signature for custom LogbookEntry hook methods
	LogbookEntryHook func(context.Context, boil.ContextExecutor, *LogbookEntry) error

	logbookEntryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	logbookEntryType                 = reflect.TypeOf(&LogbookEntry{})
	logbookEntryMapping              = queries.MakeStructMapping(logbookEntryType)
	logbookEntryPrimaryKeyMapping, _ = queries.BindMapping(logbookEntryType, logbookEntryMapping, logbookEntryPrimaryKeyColumns)
	logbookEntryInsertCacheMut       sync.RWMutex
	logbookEntryInsertCache          = make(map[string]insertCache)
	logbookEntryUpdateCacheMut       sync.RWMutex
	logbookEntryUpdateCache          = make(map[string]updateCache)
	logbookEntryUpsertCacheMut       sync.RWMutex
	logbookEntryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var logbookEntryBeforeInsertHooks []LogbookEntryHook
var logbookEntryBeforeUpdateHooks []LogbookEntryHook
var logbookEntryBeforeDeleteHooks []LogbookEntryHook
var logbookEntryBeforeUpsertHooks []LogbookEntryHook

var logbookEntryAfterInsertHooks []LogbookEntryHook
var logbookEntryAfterSelectHooks []LogbookEntryHook
var logbookEntryAfterUpdateHooks []LogbookEntryHook
var logbookEntryAfterDeleteHooks []LogbookEntryHook
var logbookEntryAfterUpsertHooks []LogbookEntryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LogbookEntry) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LogbookEntry) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LogbookEntry) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LogbookEntry) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LogbookEntry) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LogbookEntry) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LogbookEntry) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LogbookEntry) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LogbookEntry) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range logbookEntryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLogbookEntryHook registers your hook function for all future operations.
func AddLogbookEntryHook(hookPoint boil.HookPoint, logbookEntryHook LogbookEntryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		logbookEntryBeforeInsertHooks = append(logbookEntryBeforeInsertHooks, logbookEntryHook)
	case boil.BeforeUpdateHook:
		logbookEntryBeforeUpdateHooks = append(logbookEntryBeforeUpdateHooks, logbookEntryHook)
	case boil.BeforeDeleteHook:
		logbookEntryBeforeDeleteHooks = append(logbookEntryBeforeDeleteHooks, logbookEntryHook)
	case boil.BeforeUpsertHook:
		logbookEntryBeforeUpsertHooks = append(logbookEntryBeforeUpsertHooks, logbookEntryHook)
	case boil.AfterInsertHook:
		logbookEntryAfterInsertHooks = append(logbookEntryAfterInsertHooks, logbookEntryHook)
	case boil.AfterSelectHook:
		logbookEntryAfterSelectHooks = append(logbookEntryAfterSelectHooks, logbookEntryHook)
	case boil.AfterUpdateHook:
		logbookEntryAfterUpdateHooks = append(logbookEntryAfterUpdateHooks, logbookEntryHook)
	case boil.AfterDeleteHook:
		logbookEntryAfterDeleteHooks = append(logbookEntryAfterDeleteHooks, logbookEntryHook)
	case boil.AfterUpsertHook:
		logbookEntryAfterUpsertHooks = append(logbookEntryAfterUpsertHooks, logbookEntryHook)
	}
}

// One returns a single logbookEntry record from the query.
func (q logbookEntryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LogbookEntry, error) {
	o := &LogbookEntry{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for logbook_entries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LogbookEntry records from the query.
func (q logbookEntryQuery) All(ctx context.Context, exec boil.ContextExecutor) (LogbookEntrySlice, error) {
	var o []*LogbookEntry

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LogbookEntry slice")
	}

	if len(logbookEntryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LogbookEntry records in the query.
func (q logbookEntryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count logbook_entries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q logbookEntryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if logbook_entries exists")
	}

	return count > 0, nil
}

// Examination pointed to by the foreign key.
func (o *LogbookEntry) Examination(mods ...qm.QueryMod) examinationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExaminationID),
	}

	queryMods = append(queryMods, mods...)

	query := Examinations(queryMods...)
	queries.SetFrom(query.Query, "\"examinations\"")

	return query
}

// OrthopedicSurgery pointed to by the foreign key.
func (o *LogbookEntry) OrthopedicSurgery(mods ...qm.QueryMod) orthopedicSurgeryActivityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrthopedicSurgeryID),
	}

	queryMods = append(queryMods, mods...)

	query := OrthopedicSurgeryActivities(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities\"")

	return query
}

// Procedure pointed to by the foreign key.
func (o *LogbookEntry) Procedure(mods ...qm.QueryMod) procedureQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProcedureID),
	}

	queryMods = append(queryMods, mods...)

	query := Procedures(queryMods...)
	queries.SetFrom(query.Query, "\"procedures\"")

	return query
}

// Activity pointed to by the foreign key.
func (o *LogbookEntry) Activity(mods ...qm.QueryMod) activityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"logbook_entry_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Activities(queryMods...)
	queries.SetFrom(query.Query, "\"activities\"")

	return query
}

// LoadExamination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (logbookEntryL) LoadExamination(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLogbookEntry interface{}, mods queries.Applicator) error {
	var slice []*LogbookEntry
	var object *LogbookEntry

	if singular {
		object = maybeLogbookEntry.(*LogbookEntry)
	} else {
		slice = *maybeLogbookEntry.(*[]*LogbookEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &logbookEntryR{}
		}
		if !queries.IsNil(object.ExaminationID) {
			args = append(args, object.ExaminationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &logbookEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ExaminationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ExaminationID) {
				args = append(args, obj.ExaminationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations`),
		qm.WhereIn(`examinations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Examination")
	}

	var resultSlice []*Examination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Examination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for examinations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations")
	}

	if len(logbookEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Examination = foreign
		if foreign.R == nil {
			foreign.R = &examinationR{}
		}
		foreign.R.LogbookEntry = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ExaminationID, foreign.ID) {
				local.R.Examination = foreign
				if foreign.R == nil {
					foreign.R = &examinationR{}
				}
				foreign.R.LogbookEntry = local
				break
			}
		}
	}

	return nil
}

// LoadOrthopedicSurgery allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (logbookEntryL) LoadOrthopedicSurgery(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLogbookEntry interface{}, mods queries.Applicator) error {
	var slice []*LogbookEntry
	var object *LogbookEntry

	if singular {
		object = maybeLogbookEntry.(*LogbookEntry)
	} else {
		slice = *maybeLogbookEntry.(*[]*LogbookEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &logbookEntryR{}
		}
		if !queries.IsNil(object.OrthopedicSurgeryID) {
			args = append(args, object.OrthopedicSurgeryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &logbookEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrthopedicSurgeryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrthopedicSurgeryID) {
				args = append(args, obj.OrthopedicSurgeryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities`),
		qm.WhereIn(`orthopedic_surgery_activities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrthopedicSurgeryActivity")
	}

	var resultSlice []*OrthopedicSurgeryActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrthopedicSurgeryActivity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orthopedic_surgery_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities")
	}

	if len(logbookEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrthopedicSurgery = foreign
		if foreign.R == nil {
			foreign.R = &orthopedicSurgeryActivityR{}
		}
		foreign.R.OrthopedicSurgeryLogbookEntry = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrthopedicSurgeryID, foreign.ID) {
				local.R.OrthopedicSurgery = foreign
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivityR{}
				}
				foreign.R.OrthopedicSurgeryLogbookEntry = local
				break
			}
		}
	}

	return nil
}

// LoadProcedure allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (logbookEntryL) LoadProcedure(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLogbookEntry interface{}, mods queries.Applicator) error {
	var slice []*LogbookEntry
	var object *LogbookEntry

	if singular {
		object = maybeLogbookEntry.(*LogbookEntry)
	} else {
		slice = *maybeLogbookEntry.(*[]*LogbookEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &logbookEntryR{}
		}
		if !queries.IsNil(object.ProcedureID) {
			args = append(args, object.ProcedureID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &logbookEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProcedureID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProcedureID) {
				args = append(args, obj.ProcedureID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`procedures`),
		qm.WhereIn(`procedures.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Procedure")
	}

	var resultSlice []*Procedure
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Procedure")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for procedures")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for procedures")
	}

	if len(logbookEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Procedure = foreign
		if foreign.R == nil {
			foreign.R = &procedureR{}
		}
		foreign.R.LogbookEntry = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProcedureID, foreign.ID) {
				local.R.Procedure = foreign
				if foreign.R == nil {
					foreign.R = &procedureR{}
				}
				foreign.R.LogbookEntry = local
				break
			}
		}
	}

	return nil
}

// LoadActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (logbookEntryL) LoadActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLogbookEntry interface{}, mods queries.Applicator) error {
	var slice []*LogbookEntry
	var object *LogbookEntry

	if singular {
		object = maybeLogbookEntry.(*LogbookEntry)
	} else {
		slice = *maybeLogbookEntry.(*[]*LogbookEntry)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &logbookEntryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &logbookEntryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.logbook_entry_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Activity")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Activity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(logbookEntryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Activity = foreign
		if foreign.R == nil {
			foreign.R = &activityR{}
		}
		foreign.R.LogbookEntry = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.LogbookEntryID) {
				local.R.Activity = foreign
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.LogbookEntry = local
				break
			}
		}
	}

	return nil
}

// SetExamination of the logbookEntry to the related item.
// Sets o.R.Examination to related.
// Adds o to related.R.LogbookEntry.
func (o *LogbookEntry) SetExamination(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Examination) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"logbook_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"examination_id"}),
		strmangle.WhereClause("\"", "\"", 2, logbookEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ExaminationID, related.ID)
	if o.R == nil {
		o.R = &logbookEntryR{
			Examination: related,
		}
	} else {
		o.R.Examination = related
	}

	if related.R == nil {
		related.R = &examinationR{
			LogbookEntry: o,
		}
	} else {
		related.R.LogbookEntry = o
	}

	return nil
}

// RemoveExamination relationship.
// Sets o.R.Examination to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *LogbookEntry) RemoveExamination(ctx context.Context, exec boil.ContextExecutor, related *Examination) error {
	var err error

	queries.SetScanner(&o.ExaminationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("examination_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Examination = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.LogbookEntry = nil
	return nil
}

// SetOrthopedicSurgery of the logbookEntry to the related item.
// Sets o.R.OrthopedicSurgery to related.
// Adds o to related.R.OrthopedicSurgeryLogbookEntry.
func (o *LogbookEntry) SetOrthopedicSurgery(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrthopedicSurgeryActivity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"logbook_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orthopedic_surgery_id"}),
		strmangle.WhereClause("\"", "\"", 2, logbookEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrthopedicSurgeryID, related.ID)
	if o.R == nil {
		o.R = &logbookEntryR{
			OrthopedicSurgery: related,
		}
	} else {
		o.R.OrthopedicSurgery = related
	}

	if related.R == nil {
		related.R = &orthopedicSurgeryActivityR{
			OrthopedicSurgeryLogbookEntry: o,
		}
	} else {
		related.R.OrthopedicSurgeryLogbookEntry = o
	}

	return nil
}

// RemoveOrthopedicSurgery relationship.
// Sets o.R.OrthopedicSurgery to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *LogbookEntry) RemoveOrthopedicSurgery(ctx context.Context, exec boil.ContextExecutor, related *OrthopedicSurgeryActivity) error {
	var err error

	queries.SetScanner(&o.OrthopedicSurgeryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orthopedic_surgery_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrthopedicSurgery = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.OrthopedicSurgeryLogbookEntry = nil
	return nil
}

// SetProcedure of the logbookEntry to the related item.
// Sets o.R.Procedure to related.
// Adds o to related.R.LogbookEntry.
func (o *LogbookEntry) SetProcedure(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Procedure) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"logbook_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"procedure_id"}),
		strmangle.WhereClause("\"", "\"", 2, logbookEntryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProcedureID, related.ID)
	if o.R == nil {
		o.R = &logbookEntryR{
			Procedure: related,
		}
	} else {
		o.R.Procedure = related
	}

	if related.R == nil {
		related.R = &procedureR{
			LogbookEntry: o,
		}
	} else {
		related.R.LogbookEntry = o
	}

	return nil
}

// RemoveProcedure relationship.
// Sets o.R.Procedure to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *LogbookEntry) RemoveProcedure(ctx context.Context, exec boil.ContextExecutor, related *Procedure) error {
	var err error

	queries.SetScanner(&o.ProcedureID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("procedure_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Procedure = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.LogbookEntry = nil
	return nil
}

// SetActivity of the logbookEntry to the related item.
// Sets o.R.Activity to related.
// Adds o to related.R.LogbookEntry.
func (o *LogbookEntry) SetActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Activity) error {
	var err error

	if insert {
		queries.Assign(&related.LogbookEntryID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"logbook_entry_id"}),
			strmangle.WhereClause("\"", "\"", 2, activityPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.LogbookEntryID, o.ID)
	}

	if o.R == nil {
		o.R = &logbookEntryR{
			Activity: related,
		}
	} else {
		o.R.Activity = related
	}

	if related.R == nil {
		related.R = &activityR{
			LogbookEntry: o,
		}
	} else {
		related.R.LogbookEntry = o
	}
	return nil
}

// RemoveActivity relationship.
// Sets o.R.Activity to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *LogbookEntry) RemoveActivity(ctx context.Context, exec boil.ContextExecutor, related *Activity) error {
	var err error

	queries.SetScanner(&related.LogbookEntryID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("logbook_entry_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Activity = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.LogbookEntry = nil
	return nil
}

// LogbookEntries retrieves all the records using an executor.
func LogbookEntries(mods ...qm.QueryMod) logbookEntryQuery {
	mods = append(mods, qm.From("\"logbook_entries\""))
	return logbookEntryQuery{NewQuery(mods...)}
}

// FindLogbookEntry retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLogbookEntry(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LogbookEntry, error) {
	logbookEntryObj := &LogbookEntry{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"logbook_entries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, logbookEntryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from logbook_entries")
	}

	if err = logbookEntryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return logbookEntryObj, err
	}

	return logbookEntryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LogbookEntry) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no logbook_entries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(logbookEntryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	logbookEntryInsertCacheMut.RLock()
	cache, cached := logbookEntryInsertCache[key]
	logbookEntryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			logbookEntryAllColumns,
			logbookEntryColumnsWithDefault,
			logbookEntryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(logbookEntryType, logbookEntryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(logbookEntryType, logbookEntryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"logbook_entries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"logbook_entries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into logbook_entries")
	}

	if !cached {
		logbookEntryInsertCacheMut.Lock()
		logbookEntryInsertCache[key] = cache
		logbookEntryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LogbookEntry.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LogbookEntry) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	logbookEntryUpdateCacheMut.RLock()
	cache, cached := logbookEntryUpdateCache[key]
	logbookEntryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			logbookEntryAllColumns,
			logbookEntryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update logbook_entries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"logbook_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, logbookEntryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(logbookEntryType, logbookEntryMapping, append(wl, logbookEntryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update logbook_entries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for logbook_entries")
	}

	if !cached {
		logbookEntryUpdateCacheMut.Lock()
		logbookEntryUpdateCache[key] = cache
		logbookEntryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q logbookEntryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for logbook_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for logbook_entries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LogbookEntrySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logbookEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"logbook_entries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, logbookEntryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in logbookEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all logbookEntry")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LogbookEntry) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no logbook_entries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(logbookEntryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	logbookEntryUpsertCacheMut.RLock()
	cache, cached := logbookEntryUpsertCache[key]
	logbookEntryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			logbookEntryAllColumns,
			logbookEntryColumnsWithDefault,
			logbookEntryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			logbookEntryAllColumns,
			logbookEntryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert logbook_entries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(logbookEntryPrimaryKeyColumns))
			copy(conflict, logbookEntryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"logbook_entries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(logbookEntryType, logbookEntryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(logbookEntryType, logbookEntryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert logbook_entries")
	}

	if !cached {
		logbookEntryUpsertCacheMut.Lock()
		logbookEntryUpsertCache[key] = cache
		logbookEntryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LogbookEntry record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LogbookEntry) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LogbookEntry provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), logbookEntryPrimaryKeyMapping)
	sql := "DELETE FROM \"logbook_entries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from logbook_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for logbook_entries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q logbookEntryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no logbookEntryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from logbook_entries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for logbook_entries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LogbookEntrySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(logbookEntryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logbookEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"logbook_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, logbookEntryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from logbookEntry slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for logbook_entries")
	}

	if len(logbookEntryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LogbookEntry) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLogbookEntry(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LogbookEntrySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LogbookEntrySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), logbookEntryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"logbook_entries\".* FROM \"logbook_entries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, logbookEntryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LogbookEntrySlice")
	}

	*o = slice

	return nil
}

// LogbookEntryExists checks if the LogbookEntry row exists.
func LogbookEntryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"logbook_entries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if logbook_entries exists")
	}

	return exists, nil
}
