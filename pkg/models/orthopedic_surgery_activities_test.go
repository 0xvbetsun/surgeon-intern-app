// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrthopedicSurgeryActivities(t *testing.T) {
	t.Parallel()

	query := OrthopedicSurgeryActivities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrthopedicSurgeryActivitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrthopedicSurgeryActivities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrthopedicSurgeryActivitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrthopedicSurgeryActivityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrthopedicSurgeryActivity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrthopedicSurgeryActivityExists to return true, but got false.")
	}
}

func testOrthopedicSurgeryActivitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orthopedicSurgeryActivityFound, err := FindOrthopedicSurgeryActivity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orthopedicSurgeryActivityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrthopedicSurgeryActivitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrthopedicSurgeryActivities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrthopedicSurgeryActivities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrthopedicSurgeryActivitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orthopedicSurgeryActivityOne := &OrthopedicSurgeryActivity{}
	orthopedicSurgeryActivityTwo := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, orthopedicSurgeryActivityOne, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, orthopedicSurgeryActivityTwo, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orthopedicSurgeryActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orthopedicSurgeryActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrthopedicSurgeryActivitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orthopedicSurgeryActivityOne := &OrthopedicSurgeryActivity{}
	orthopedicSurgeryActivityTwo := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, orthopedicSurgeryActivityOne, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, orthopedicSurgeryActivityTwo, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orthopedicSurgeryActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orthopedicSurgeryActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orthopedicSurgeryActivityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func orthopedicSurgeryActivityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrthopedicSurgeryActivity) error {
	*o = OrthopedicSurgeryActivity{}
	return nil
}

func testOrthopedicSurgeryActivitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrthopedicSurgeryActivity{}
	o := &OrthopedicSurgeryActivity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity object: %s", err)
	}

	AddOrthopedicSurgeryActivityHook(boil.BeforeInsertHook, orthopedicSurgeryActivityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityBeforeInsertHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.AfterInsertHook, orthopedicSurgeryActivityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityAfterInsertHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.AfterSelectHook, orthopedicSurgeryActivityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityAfterSelectHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.BeforeUpdateHook, orthopedicSurgeryActivityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityBeforeUpdateHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.AfterUpdateHook, orthopedicSurgeryActivityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityAfterUpdateHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.BeforeDeleteHook, orthopedicSurgeryActivityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityBeforeDeleteHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.AfterDeleteHook, orthopedicSurgeryActivityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityAfterDeleteHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.BeforeUpsertHook, orthopedicSurgeryActivityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityBeforeUpsertHooks = []OrthopedicSurgeryActivityHook{}

	AddOrthopedicSurgeryActivityHook(boil.AfterUpsertHook, orthopedicSurgeryActivityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orthopedicSurgeryActivityAfterUpsertHooks = []OrthopedicSurgeryActivityHook{}
}

func testOrthopedicSurgeryActivitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrthopedicSurgeryActivitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orthopedicSurgeryActivityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrthopedicSurgeryActivityOneToOneDopsEvaluationUsingDopsEvaluation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign DopsEvaluation
	var local OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.OrthopedicSurgeryActivityID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DopsEvaluation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OrthopedicSurgeryActivityID, foreign.OrthopedicSurgeryActivityID) {
		t.Errorf("want: %v, got %v", foreign.OrthopedicSurgeryActivityID, check.OrthopedicSurgeryActivityID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadDopsEvaluation(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DopsEvaluation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DopsEvaluation = nil
	if err = local.L.LoadDopsEvaluation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DopsEvaluation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityOneToOneLogbookEntryUsingOrthopedicSurgeryLogbookEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign LogbookEntry
	var local OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.OrthopedicSurgeryID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgeryLogbookEntry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.OrthopedicSurgeryID, foreign.OrthopedicSurgeryID) {
		t.Errorf("want: %v, got %v", foreign.OrthopedicSurgeryID, check.OrthopedicSurgeryID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadOrthopedicSurgeryLogbookEntry(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryLogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgeryLogbookEntry = nil
	if err = local.L.LoadOrthopedicSurgeryLogbookEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryLogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityOneToOneOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign OrthopedicSurgeriesActivityReview
	var local OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, orthopedicSurgeriesActivityReviewDBTypes, true, orthopedicSurgeriesActivityReviewColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeriesActivityReview struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.OrthopedicSurgeryActivityID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgeriesActivityReview().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.OrthopedicSurgeryActivityID != foreign.OrthopedicSurgeryActivityID {
		t.Errorf("want: %v, got %v", foreign.OrthopedicSurgeryActivityID, check.OrthopedicSurgeryActivityID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadOrthopedicSurgeriesActivityReview(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeriesActivityReview == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgeriesActivityReview = nil
	if err = local.L.LoadOrthopedicSurgeriesActivityReview(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeriesActivityReview == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityOneToOneSetOpDopsEvaluationUsingDopsEvaluation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DopsEvaluation{&b, &c} {
		err = a.SetDopsEvaluation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DopsEvaluation != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.OrthopedicSurgeryActivity != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.OrthopedicSurgeryActivityID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.OrthopedicSurgeryActivityID))
		reflect.Indirect(reflect.ValueOf(&x.OrthopedicSurgeryActivityID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.OrthopedicSurgeryActivityID) {
			t.Error("foreign key was wrong value", a.ID, x.OrthopedicSurgeryActivityID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testOrthopedicSurgeryActivityOneToOneRemoveOpDopsEvaluationUsingDopsEvaluation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b DopsEvaluation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDopsEvaluation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDopsEvaluation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DopsEvaluation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DopsEvaluation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.OrthopedicSurgeryActivityID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.OrthopedicSurgeryActivity != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrthopedicSurgeryActivityOneToOneSetOpLogbookEntryUsingOrthopedicSurgeryLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LogbookEntry{&b, &c} {
		err = a.SetOrthopedicSurgeryLogbookEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgeryLogbookEntry != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.OrthopedicSurgery != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.OrthopedicSurgeryID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.OrthopedicSurgeryID))
		reflect.Indirect(reflect.ValueOf(&x.OrthopedicSurgeryID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.OrthopedicSurgeryID) {
			t.Error("foreign key was wrong value", a.ID, x.OrthopedicSurgeryID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testOrthopedicSurgeryActivityOneToOneRemoveOpLogbookEntryUsingOrthopedicSurgeryLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrthopedicSurgeryLogbookEntry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrthopedicSurgeryLogbookEntry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrthopedicSurgeryLogbookEntry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrthopedicSurgeryLogbookEntry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.OrthopedicSurgeryID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.OrthopedicSurgery != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrthopedicSurgeryActivityOneToOneSetOpOrthopedicSurgeriesActivityReviewUsingOrthopedicSurgeriesActivityReview(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c OrthopedicSurgeriesActivityReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeriesActivityReviewDBTypes, false, strmangle.SetComplement(orthopedicSurgeriesActivityReviewPrimaryKeyColumns, orthopedicSurgeriesActivityReviewColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrthopedicSurgeriesActivityReview{&b, &c} {
		err = a.SetOrthopedicSurgeriesActivityReview(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgeriesActivityReview != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.OrthopedicSurgeryActivity != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.OrthopedicSurgeryActivityID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.OrthopedicSurgeryActivityID))
		reflect.Indirect(reflect.ValueOf(&x.OrthopedicSurgeryActivityID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.OrthopedicSurgeryActivityID {
			t.Error("foreign key was wrong value", a.ID, x.OrthopedicSurgeryActivityID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testOrthopedicSurgeryActivityToManyOrthopedicSurgeryActivitiesSurgeries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c OrthopedicSurgeryActivitiesSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivitiesSurgeryDBTypes, false, orthopedicSurgeryActivitiesSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrthopedicSurgeryActivityID = a.ID
	c.OrthopedicSurgeryActivityID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrthopedicSurgeryActivitiesSurgeries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrthopedicSurgeryActivityID == b.OrthopedicSurgeryActivityID {
			bFound = true
		}
		if v.OrthopedicSurgeryActivityID == c.OrthopedicSurgeryActivityID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrthopedicSurgeryActivitySlice{&a}
	if err = a.L.LoadOrthopedicSurgeryActivitiesSurgeries(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivitiesSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrthopedicSurgeryActivitiesSurgeries = nil
	if err = a.L.LoadOrthopedicSurgeryActivitiesSurgeries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrthopedicSurgeryActivitiesSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrthopedicSurgeryActivityToManyAddOpOrthopedicSurgeryActivitiesSurgeries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c, d, e OrthopedicSurgeryActivitiesSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrthopedicSurgeryActivitiesSurgery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orthopedicSurgeryActivitiesSurgeryDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns, orthopedicSurgeryActivitiesSurgeryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrthopedicSurgeryActivitiesSurgery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrthopedicSurgeryActivitiesSurgeries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrthopedicSurgeryActivityID {
			t.Error("foreign key was wrong value", a.ID, first.OrthopedicSurgeryActivityID)
		}
		if a.ID != second.OrthopedicSurgeryActivityID {
			t.Error("foreign key was wrong value", a.ID, second.OrthopedicSurgeryActivityID)
		}

		if first.R.OrthopedicSurgeryActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrthopedicSurgeryActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrthopedicSurgeryActivitiesSurgeries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrthopedicSurgeryActivitiesSurgeries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrthopedicSurgeryActivitiesSurgeries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrthopedicSurgeryActivityToOneUserUsingAssistant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AssistantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assistant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadAssistant(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assistant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assistant = nil
	if err = local.L.LoadAssistant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assistant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityToOneUserUsingOperator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OperatorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Operator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadOperator(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Operator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Operator = nil
	if err = local.L.LoadOperator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Operator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityToOnePracticalActivityTypeUsingPracticalActivityType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivity
	var foreign PracticalActivityType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, practicalActivityTypeDBTypes, false, practicalActivityTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PracticalActivityType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PracticalActivityTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PracticalActivityType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadPracticalActivityType(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PracticalActivityType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PracticalActivityType = nil
	if err = local.L.LoadPracticalActivityType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PracticalActivityType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityToOneUserUsingResident(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResidentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resident().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadResident(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resident = nil
	if err = local.L.LoadResident(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityToOneUserUsingSupervisor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrthopedicSurgeryActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SupervisorID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supervisor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrthopedicSurgeryActivitySlice{&local}
	if err = local.L.LoadSupervisor(ctx, tx, false, (*[]*OrthopedicSurgeryActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supervisor = nil
	if err = local.L.LoadSupervisor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrthopedicSurgeryActivityToOneSetOpUserUsingAssistant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAssistant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assistant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssistantOrthopedicSurgeryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AssistantID, x.ID) {
			t.Error("foreign key was wrong value", a.AssistantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssistantID))
		reflect.Indirect(reflect.ValueOf(&a.AssistantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AssistantID, x.ID) {
			t.Error("foreign key was wrong value", a.AssistantID, x.ID)
		}
	}
}

func testOrthopedicSurgeryActivityToOneRemoveOpUserUsingAssistant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAssistant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAssistant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Assistant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Assistant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AssistantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AssistantOrthopedicSurgeryActivities) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrthopedicSurgeryActivityToOneSetOpUserUsingOperator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOperator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Operator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OperatorOrthopedicSurgeryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OperatorID, x.ID) {
			t.Error("foreign key was wrong value", a.OperatorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OperatorID))
		reflect.Indirect(reflect.ValueOf(&a.OperatorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OperatorID, x.ID) {
			t.Error("foreign key was wrong value", a.OperatorID, x.ID)
		}
	}
}

func testOrthopedicSurgeryActivityToOneRemoveOpUserUsingOperator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOperator(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOperator(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Operator().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Operator != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OperatorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OperatorOrthopedicSurgeryActivities) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrthopedicSurgeryActivityToOneSetOpPracticalActivityTypeUsingPracticalActivityType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c PracticalActivityType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, practicalActivityTypeDBTypes, false, strmangle.SetComplement(practicalActivityTypePrimaryKeyColumns, practicalActivityTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PracticalActivityType{&b, &c} {
		err = a.SetPracticalActivityType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PracticalActivityType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrthopedicSurgeryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PracticalActivityTypeID != x.ID {
			t.Error("foreign key was wrong value", a.PracticalActivityTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PracticalActivityTypeID))
		reflect.Indirect(reflect.ValueOf(&a.PracticalActivityTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PracticalActivityTypeID != x.ID {
			t.Error("foreign key was wrong value", a.PracticalActivityTypeID, x.ID)
		}
	}
}
func testOrthopedicSurgeryActivityToOneSetOpUserUsingResident(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetResident(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resident != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResidentOrthopedicSurgeryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResidentID))
		reflect.Indirect(reflect.ValueOf(&a.ResidentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID, x.ID)
		}
	}
}
func testOrthopedicSurgeryActivityToOneSetOpUserUsingSupervisor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetSupervisor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supervisor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupervisorOrthopedicSurgeryActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SupervisorID, x.ID) {
			t.Error("foreign key was wrong value", a.SupervisorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupervisorID))
		reflect.Indirect(reflect.ValueOf(&a.SupervisorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SupervisorID, x.ID) {
			t.Error("foreign key was wrong value", a.SupervisorID, x.ID)
		}
	}
}

func testOrthopedicSurgeryActivityToOneRemoveOpUserUsingSupervisor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrthopedicSurgeryActivity
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSupervisor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSupervisor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Supervisor().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Supervisor != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SupervisorID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SupervisorOrthopedicSurgeryActivities) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrthopedicSurgeryActivitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrthopedicSurgeryActivitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrthopedicSurgeryActivitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrthopedicSurgeryActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orthopedicSurgeryActivityDBTypes = map[string]string{`ID`: `uuid`, `OccurredAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`, `CaseNotes`: `character varying`, `PatientAge`: `integer`, `PatientGender`: `character varying`, `ResidentID`: `uuid`, `SupervisorID`: `uuid`, `OperatorID`: `uuid`, `AssistantID`: `uuid`, `Comments`: `character varying`, `Complications`: `character varying`, `Annotations`: `jsonb`, `DopsRequested`: `boolean`, `ReviewRequested`: `boolean`, `HasDopsConnection`: `boolean`, `PracticalActivityTypeID`: `integer`, `InProgress`: `boolean`, `ActiveStep`: `integer`, `CompletedStep`: `integer`}
	_                                = bytes.MinRead
)

func testOrthopedicSurgeryActivitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orthopedicSurgeryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orthopedicSurgeryActivityAllColumns) == len(orthopedicSurgeryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrthopedicSurgeryActivitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orthopedicSurgeryActivityAllColumns) == len(orthopedicSurgeryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orthopedicSurgeryActivityDBTypes, true, orthopedicSurgeryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orthopedicSurgeryActivityAllColumns, orthopedicSurgeryActivityPrimaryKeyColumns) {
		fields = orthopedicSurgeryActivityAllColumns
	} else {
		fields = strmangle.SetComplement(
			orthopedicSurgeryActivityAllColumns,
			orthopedicSurgeryActivityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrthopedicSurgeryActivitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrthopedicSurgeryActivitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(orthopedicSurgeryActivityAllColumns) == len(orthopedicSurgeryActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrthopedicSurgeryActivity{}
	if err = randomize.Struct(seed, &o, orthopedicSurgeryActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrthopedicSurgeryActivity: %s", err)
	}

	count, err := OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrthopedicSurgeryActivity: %s", err)
	}

	count, err = OrthopedicSurgeryActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
