// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Procedure is an object representing the database table.
type Procedure struct {
	ID                   string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName          string     `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	CreatedAt            time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Annotations          types.JSON `boil:"annotations" json:"annotations" toml:"annotations" yaml:"annotations"`
	OrganizationalUnitID string     `boil:"organizational_unit_id" json:"organizational_unit_id" toml:"organizational_unit_id" yaml:"organizational_unit_id"`

	R *procedureR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L procedureL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProcedureColumns = struct {
	ID                   string
	DisplayName          string
	CreatedAt            string
	Annotations          string
	OrganizationalUnitID string
}{
	ID:                   "id",
	DisplayName:          "display_name",
	CreatedAt:            "created_at",
	Annotations:          "annotations",
	OrganizationalUnitID: "organizational_unit_id",
}

var ProcedureTableColumns = struct {
	ID                   string
	DisplayName          string
	CreatedAt            string
	Annotations          string
	OrganizationalUnitID string
}{
	ID:                   "procedures.id",
	DisplayName:          "procedures.display_name",
	CreatedAt:            "procedures.created_at",
	Annotations:          "procedures.annotations",
	OrganizationalUnitID: "procedures.organizational_unit_id",
}

// Generated where

var ProcedureWhere = struct {
	ID                   whereHelperstring
	DisplayName          whereHelperstring
	CreatedAt            whereHelpertime_Time
	Annotations          whereHelpertypes_JSON
	OrganizationalUnitID whereHelperstring
}{
	ID:                   whereHelperstring{field: "\"procedures\".\"id\""},
	DisplayName:          whereHelperstring{field: "\"procedures\".\"display_name\""},
	CreatedAt:            whereHelpertime_Time{field: "\"procedures\".\"created_at\""},
	Annotations:          whereHelpertypes_JSON{field: "\"procedures\".\"annotations\""},
	OrganizationalUnitID: whereHelperstring{field: "\"procedures\".\"organizational_unit_id\""},
}

// ProcedureRels is where relationship names are stored.
var ProcedureRels = struct {
	OrganizationalUnit string
	LogbookEntry       string
}{
	OrganizationalUnit: "OrganizationalUnit",
	LogbookEntry:       "LogbookEntry",
}

// procedureR is where relationships are stored.
type procedureR struct {
	OrganizationalUnit *OrganizationalUnit `boil:"OrganizationalUnit" json:"OrganizationalUnit" toml:"OrganizationalUnit" yaml:"OrganizationalUnit"`
	LogbookEntry       *LogbookEntry       `boil:"LogbookEntry" json:"LogbookEntry" toml:"LogbookEntry" yaml:"LogbookEntry"`
}

// NewStruct creates a new relationship struct
func (*procedureR) NewStruct() *procedureR {
	return &procedureR{}
}

// procedureL is where Load methods for each relationship are stored.
type procedureL struct{}

var (
	procedureAllColumns            = []string{"id", "display_name", "created_at", "annotations", "organizational_unit_id"}
	procedureColumnsWithoutDefault = []string{"display_name", "annotations", "organizational_unit_id"}
	procedureColumnsWithDefault    = []string{"id", "created_at"}
	procedurePrimaryKeyColumns     = []string{"id"}
)

type (
	// ProcedureSlice is an alias for a slice of pointers to Procedure.
	// This should almost always be used instead of []Procedure.
	ProcedureSlice []*Procedure
	// ProcedureHook is the signature for custom Procedure hook methods
	ProcedureHook func(context.Context, boil.ContextExecutor, *Procedure) error

	procedureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	procedureType                 = reflect.TypeOf(&Procedure{})
	procedureMapping              = queries.MakeStructMapping(procedureType)
	procedurePrimaryKeyMapping, _ = queries.BindMapping(procedureType, procedureMapping, procedurePrimaryKeyColumns)
	procedureInsertCacheMut       sync.RWMutex
	procedureInsertCache          = make(map[string]insertCache)
	procedureUpdateCacheMut       sync.RWMutex
	procedureUpdateCache          = make(map[string]updateCache)
	procedureUpsertCacheMut       sync.RWMutex
	procedureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var procedureBeforeInsertHooks []ProcedureHook
var procedureBeforeUpdateHooks []ProcedureHook
var procedureBeforeDeleteHooks []ProcedureHook
var procedureBeforeUpsertHooks []ProcedureHook

var procedureAfterInsertHooks []ProcedureHook
var procedureAfterSelectHooks []ProcedureHook
var procedureAfterUpdateHooks []ProcedureHook
var procedureAfterDeleteHooks []ProcedureHook
var procedureAfterUpsertHooks []ProcedureHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Procedure) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Procedure) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Procedure) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Procedure) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Procedure) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Procedure) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Procedure) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Procedure) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Procedure) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range procedureAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProcedureHook registers your hook function for all future operations.
func AddProcedureHook(hookPoint boil.HookPoint, procedureHook ProcedureHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		procedureBeforeInsertHooks = append(procedureBeforeInsertHooks, procedureHook)
	case boil.BeforeUpdateHook:
		procedureBeforeUpdateHooks = append(procedureBeforeUpdateHooks, procedureHook)
	case boil.BeforeDeleteHook:
		procedureBeforeDeleteHooks = append(procedureBeforeDeleteHooks, procedureHook)
	case boil.BeforeUpsertHook:
		procedureBeforeUpsertHooks = append(procedureBeforeUpsertHooks, procedureHook)
	case boil.AfterInsertHook:
		procedureAfterInsertHooks = append(procedureAfterInsertHooks, procedureHook)
	case boil.AfterSelectHook:
		procedureAfterSelectHooks = append(procedureAfterSelectHooks, procedureHook)
	case boil.AfterUpdateHook:
		procedureAfterUpdateHooks = append(procedureAfterUpdateHooks, procedureHook)
	case boil.AfterDeleteHook:
		procedureAfterDeleteHooks = append(procedureAfterDeleteHooks, procedureHook)
	case boil.AfterUpsertHook:
		procedureAfterUpsertHooks = append(procedureAfterUpsertHooks, procedureHook)
	}
}

// One returns a single procedure record from the query.
func (q procedureQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Procedure, error) {
	o := &Procedure{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for procedures")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Procedure records from the query.
func (q procedureQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProcedureSlice, error) {
	var o []*Procedure

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Procedure slice")
	}

	if len(procedureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Procedure records in the query.
func (q procedureQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count procedures rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q procedureQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if procedures exists")
	}

	return count > 0, nil
}

// OrganizationalUnit pointed to by the foreign key.
func (o *Procedure) OrganizationalUnit(mods ...qm.QueryMod) organizationalUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrganizationalUnitID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	return query
}

// LogbookEntry pointed to by the foreign key.
func (o *Procedure) LogbookEntry(mods ...qm.QueryMod) logbookEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"procedure_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := LogbookEntries(queryMods...)
	queries.SetFrom(query.Query, "\"logbook_entries\"")

	return query
}

// LoadOrganizationalUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (procedureL) LoadOrganizationalUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcedure interface{}, mods queries.Applicator) error {
	var slice []*Procedure
	var object *Procedure

	if singular {
		object = maybeProcedure.(*Procedure)
	} else {
		slice = *maybeProcedure.(*[]*Procedure)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &procedureR{}
		}
		args = append(args, object.OrganizationalUnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &procedureR{}
			}

			for _, a := range args {
				if a == obj.OrganizationalUnitID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationalUnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnit")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(procedureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrganizationalUnit = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitR{}
		}
		foreign.R.Procedures = append(foreign.R.Procedures, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationalUnitID == foreign.ID {
				local.R.OrganizationalUnit = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.Procedures = append(foreign.R.Procedures, local)
				break
			}
		}
	}

	return nil
}

// LoadLogbookEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (procedureL) LoadLogbookEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProcedure interface{}, mods queries.Applicator) error {
	var slice []*Procedure
	var object *Procedure

	if singular {
		object = maybeProcedure.(*Procedure)
	} else {
		slice = *maybeProcedure.(*[]*Procedure)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &procedureR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &procedureR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`logbook_entries`),
		qm.WhereIn(`logbook_entries.procedure_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LogbookEntry")
	}

	var resultSlice []*LogbookEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LogbookEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for logbook_entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for logbook_entries")
	}

	if len(procedureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LogbookEntry = foreign
		if foreign.R == nil {
			foreign.R = &logbookEntryR{}
		}
		foreign.R.Procedure = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ProcedureID) {
				local.R.LogbookEntry = foreign
				if foreign.R == nil {
					foreign.R = &logbookEntryR{}
				}
				foreign.R.Procedure = local
				break
			}
		}
	}

	return nil
}

// SetOrganizationalUnit of the procedure to the related item.
// Sets o.R.OrganizationalUnit to related.
// Adds o to related.R.Procedures.
func (o *Procedure) SetOrganizationalUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"procedures\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organizational_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, procedurePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationalUnitID = related.ID
	if o.R == nil {
		o.R = &procedureR{
			OrganizationalUnit: related,
		}
	} else {
		o.R.OrganizationalUnit = related
	}

	if related.R == nil {
		related.R = &organizationalUnitR{
			Procedures: ProcedureSlice{o},
		}
	} else {
		related.R.Procedures = append(related.R.Procedures, o)
	}

	return nil
}

// SetLogbookEntry of the procedure to the related item.
// Sets o.R.LogbookEntry to related.
// Adds o to related.R.Procedure.
func (o *Procedure) SetLogbookEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LogbookEntry) error {
	var err error

	if insert {
		queries.Assign(&related.ProcedureID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"logbook_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"procedure_id"}),
			strmangle.WhereClause("\"", "\"", 2, logbookEntryPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ProcedureID, o.ID)
	}

	if o.R == nil {
		o.R = &procedureR{
			LogbookEntry: related,
		}
	} else {
		o.R.LogbookEntry = related
	}

	if related.R == nil {
		related.R = &logbookEntryR{
			Procedure: o,
		}
	} else {
		related.R.Procedure = o
	}
	return nil
}

// RemoveLogbookEntry relationship.
// Sets o.R.LogbookEntry to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Procedure) RemoveLogbookEntry(ctx context.Context, exec boil.ContextExecutor, related *LogbookEntry) error {
	var err error

	queries.SetScanner(&related.ProcedureID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("procedure_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LogbookEntry = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Procedure = nil
	return nil
}

// Procedures retrieves all the records using an executor.
func Procedures(mods ...qm.QueryMod) procedureQuery {
	mods = append(mods, qm.From("\"procedures\""))
	return procedureQuery{NewQuery(mods...)}
}

// FindProcedure retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProcedure(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Procedure, error) {
	procedureObj := &Procedure{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"procedures\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, procedureObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from procedures")
	}

	if err = procedureObj.doAfterSelectHooks(ctx, exec); err != nil {
		return procedureObj, err
	}

	return procedureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Procedure) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no procedures provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(procedureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	procedureInsertCacheMut.RLock()
	cache, cached := procedureInsertCache[key]
	procedureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			procedureAllColumns,
			procedureColumnsWithDefault,
			procedureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(procedureType, procedureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(procedureType, procedureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"procedures\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"procedures\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into procedures")
	}

	if !cached {
		procedureInsertCacheMut.Lock()
		procedureInsertCache[key] = cache
		procedureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Procedure.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Procedure) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	procedureUpdateCacheMut.RLock()
	cache, cached := procedureUpdateCache[key]
	procedureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			procedureAllColumns,
			procedurePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update procedures, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"procedures\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, procedurePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(procedureType, procedureMapping, append(wl, procedurePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update procedures row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for procedures")
	}

	if !cached {
		procedureUpdateCacheMut.Lock()
		procedureUpdateCache[key] = cache
		procedureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q procedureQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for procedures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for procedures")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProcedureSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), procedurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"procedures\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, procedurePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in procedure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all procedure")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Procedure) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no procedures provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(procedureColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	procedureUpsertCacheMut.RLock()
	cache, cached := procedureUpsertCache[key]
	procedureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			procedureAllColumns,
			procedureColumnsWithDefault,
			procedureColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			procedureAllColumns,
			procedurePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert procedures, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(procedurePrimaryKeyColumns))
			copy(conflict, procedurePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"procedures\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(procedureType, procedureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(procedureType, procedureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert procedures")
	}

	if !cached {
		procedureUpsertCacheMut.Lock()
		procedureUpsertCache[key] = cache
		procedureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Procedure record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Procedure) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Procedure provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), procedurePrimaryKeyMapping)
	sql := "DELETE FROM \"procedures\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from procedures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for procedures")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q procedureQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no procedureQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from procedures")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for procedures")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProcedureSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(procedureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), procedurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"procedures\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, procedurePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from procedure slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for procedures")
	}

	if len(procedureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Procedure) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProcedure(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProcedureSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProcedureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), procedurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"procedures\".* FROM \"procedures\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, procedurePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProcedureSlice")
	}

	*o = slice

	return nil
}

// ProcedureExists checks if the Procedure row exists.
func ProcedureExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"procedures\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if procedures exists")
	}

	return exists, nil
}
