// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMiniCexAreas(t *testing.T) {
	t.Parallel()

	query := MiniCexAreas()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMiniCexAreasDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexAreasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MiniCexAreas().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexAreasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MiniCexAreaSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexAreasExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MiniCexAreaExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MiniCexArea exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MiniCexAreaExists to return true, but got false.")
	}
}

func testMiniCexAreasFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	miniCexAreaFound, err := FindMiniCexArea(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if miniCexAreaFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMiniCexAreasBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MiniCexAreas().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMiniCexAreasOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MiniCexAreas().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMiniCexAreasAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	miniCexAreaOne := &MiniCexArea{}
	miniCexAreaTwo := &MiniCexArea{}
	if err = randomize.Struct(seed, miniCexAreaOne, miniCexAreaDBTypes, false, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}
	if err = randomize.Struct(seed, miniCexAreaTwo, miniCexAreaDBTypes, false, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = miniCexAreaOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = miniCexAreaTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MiniCexAreas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMiniCexAreasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	miniCexAreaOne := &MiniCexArea{}
	miniCexAreaTwo := &MiniCexArea{}
	if err = randomize.Struct(seed, miniCexAreaOne, miniCexAreaDBTypes, false, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}
	if err = randomize.Struct(seed, miniCexAreaTwo, miniCexAreaDBTypes, false, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = miniCexAreaOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = miniCexAreaTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func miniCexAreaBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func miniCexAreaAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexArea) error {
	*o = MiniCexArea{}
	return nil
}

func testMiniCexAreasHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MiniCexArea{}
	o := &MiniCexArea{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MiniCexArea object: %s", err)
	}

	AddMiniCexAreaHook(boil.BeforeInsertHook, miniCexAreaBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	miniCexAreaBeforeInsertHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.AfterInsertHook, miniCexAreaAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	miniCexAreaAfterInsertHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.AfterSelectHook, miniCexAreaAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	miniCexAreaAfterSelectHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.BeforeUpdateHook, miniCexAreaBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	miniCexAreaBeforeUpdateHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.AfterUpdateHook, miniCexAreaAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	miniCexAreaAfterUpdateHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.BeforeDeleteHook, miniCexAreaBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	miniCexAreaBeforeDeleteHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.AfterDeleteHook, miniCexAreaAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	miniCexAreaAfterDeleteHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.BeforeUpsertHook, miniCexAreaBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	miniCexAreaBeforeUpsertHooks = []MiniCexAreaHook{}

	AddMiniCexAreaHook(boil.AfterUpsertHook, miniCexAreaAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	miniCexAreaAfterUpsertHooks = []MiniCexAreaHook{}
}

func testMiniCexAreasInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMiniCexAreasInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(miniCexAreaColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMiniCexAreaToOneOrganizationalUnitUsingDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MiniCexArea
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, miniCexAreaDBTypes, false, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DepartmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Department().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MiniCexAreaSlice{&local}
	if err = local.L.LoadDepartment(ctx, tx, false, (*[]*MiniCexArea)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Department = nil
	if err = local.L.LoadDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMiniCexAreaToOneSetOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexArea
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexAreaDBTypes, false, strmangle.SetComplement(miniCexAreaPrimaryKeyColumns, miniCexAreaColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Department != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DepartmentMiniCexAreas[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DepartmentID))
		reflect.Indirect(reflect.ValueOf(&a.DepartmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID, x.ID)
		}
	}
}

func testMiniCexAreasReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMiniCexAreasReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MiniCexAreaSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMiniCexAreasSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MiniCexAreas().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	miniCexAreaDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `DepartmentID`: `uuid`}
	_                  = bytes.MinRead
)

func testMiniCexAreasUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(miniCexAreaPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(miniCexAreaAllColumns) == len(miniCexAreaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMiniCexAreasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(miniCexAreaAllColumns) == len(miniCexAreaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexArea{}
	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, miniCexAreaDBTypes, true, miniCexAreaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(miniCexAreaAllColumns, miniCexAreaPrimaryKeyColumns) {
		fields = miniCexAreaAllColumns
	} else {
		fields = strmangle.SetComplement(
			miniCexAreaAllColumns,
			miniCexAreaPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MiniCexAreaSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMiniCexAreasUpsert(t *testing.T) {
	t.Parallel()

	if len(miniCexAreaAllColumns) == len(miniCexAreaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MiniCexArea{}
	if err = randomize.Struct(seed, &o, miniCexAreaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MiniCexArea: %s", err)
	}

	count, err := MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, miniCexAreaDBTypes, false, miniCexAreaPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexArea struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MiniCexArea: %s", err)
	}

	count, err = MiniCexAreas().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
