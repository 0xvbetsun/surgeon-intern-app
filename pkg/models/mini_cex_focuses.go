// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MiniCexFocuse is an object representing the database table.
type MiniCexFocuse struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *miniCexFocuseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L miniCexFocuseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MiniCexFocuseColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var MiniCexFocuseTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "mini_cex_focuses.id",
	Name: "mini_cex_focuses.name",
}

// Generated where

var MiniCexFocuseWhere = struct {
	ID   whereHelperint
	Name whereHelperstring
}{
	ID:   whereHelperint{field: "\"mini_cex_focuses\".\"id\""},
	Name: whereHelperstring{field: "\"mini_cex_focuses\".\"name\""},
}

// MiniCexFocuseRels is where relationship names are stored.
var MiniCexFocuseRels = struct {
}{}

// miniCexFocuseR is where relationships are stored.
type miniCexFocuseR struct {
}

// NewStruct creates a new relationship struct
func (*miniCexFocuseR) NewStruct() *miniCexFocuseR {
	return &miniCexFocuseR{}
}

// miniCexFocuseL is where Load methods for each relationship are stored.
type miniCexFocuseL struct{}

var (
	miniCexFocuseAllColumns            = []string{"id", "name"}
	miniCexFocuseColumnsWithoutDefault = []string{"name"}
	miniCexFocuseColumnsWithDefault    = []string{"id"}
	miniCexFocusePrimaryKeyColumns     = []string{"id"}
)

type (
	// MiniCexFocuseSlice is an alias for a slice of pointers to MiniCexFocuse.
	// This should almost always be used instead of []MiniCexFocuse.
	MiniCexFocuseSlice []*MiniCexFocuse
	// MiniCexFocuseHook is the signature for custom MiniCexFocuse hook methods
	MiniCexFocuseHook func(context.Context, boil.ContextExecutor, *MiniCexFocuse) error

	miniCexFocuseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	miniCexFocuseType                 = reflect.TypeOf(&MiniCexFocuse{})
	miniCexFocuseMapping              = queries.MakeStructMapping(miniCexFocuseType)
	miniCexFocusePrimaryKeyMapping, _ = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, miniCexFocusePrimaryKeyColumns)
	miniCexFocuseInsertCacheMut       sync.RWMutex
	miniCexFocuseInsertCache          = make(map[string]insertCache)
	miniCexFocuseUpdateCacheMut       sync.RWMutex
	miniCexFocuseUpdateCache          = make(map[string]updateCache)
	miniCexFocuseUpsertCacheMut       sync.RWMutex
	miniCexFocuseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var miniCexFocuseBeforeInsertHooks []MiniCexFocuseHook
var miniCexFocuseBeforeUpdateHooks []MiniCexFocuseHook
var miniCexFocuseBeforeDeleteHooks []MiniCexFocuseHook
var miniCexFocuseBeforeUpsertHooks []MiniCexFocuseHook

var miniCexFocuseAfterInsertHooks []MiniCexFocuseHook
var miniCexFocuseAfterSelectHooks []MiniCexFocuseHook
var miniCexFocuseAfterUpdateHooks []MiniCexFocuseHook
var miniCexFocuseAfterDeleteHooks []MiniCexFocuseHook
var miniCexFocuseAfterUpsertHooks []MiniCexFocuseHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MiniCexFocuse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MiniCexFocuse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MiniCexFocuse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MiniCexFocuse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MiniCexFocuse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MiniCexFocuse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MiniCexFocuse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MiniCexFocuse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MiniCexFocuse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexFocuseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMiniCexFocuseHook registers your hook function for all future operations.
func AddMiniCexFocuseHook(hookPoint boil.HookPoint, miniCexFocuseHook MiniCexFocuseHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		miniCexFocuseBeforeInsertHooks = append(miniCexFocuseBeforeInsertHooks, miniCexFocuseHook)
	case boil.BeforeUpdateHook:
		miniCexFocuseBeforeUpdateHooks = append(miniCexFocuseBeforeUpdateHooks, miniCexFocuseHook)
	case boil.BeforeDeleteHook:
		miniCexFocuseBeforeDeleteHooks = append(miniCexFocuseBeforeDeleteHooks, miniCexFocuseHook)
	case boil.BeforeUpsertHook:
		miniCexFocuseBeforeUpsertHooks = append(miniCexFocuseBeforeUpsertHooks, miniCexFocuseHook)
	case boil.AfterInsertHook:
		miniCexFocuseAfterInsertHooks = append(miniCexFocuseAfterInsertHooks, miniCexFocuseHook)
	case boil.AfterSelectHook:
		miniCexFocuseAfterSelectHooks = append(miniCexFocuseAfterSelectHooks, miniCexFocuseHook)
	case boil.AfterUpdateHook:
		miniCexFocuseAfterUpdateHooks = append(miniCexFocuseAfterUpdateHooks, miniCexFocuseHook)
	case boil.AfterDeleteHook:
		miniCexFocuseAfterDeleteHooks = append(miniCexFocuseAfterDeleteHooks, miniCexFocuseHook)
	case boil.AfterUpsertHook:
		miniCexFocuseAfterUpsertHooks = append(miniCexFocuseAfterUpsertHooks, miniCexFocuseHook)
	}
}

// One returns a single miniCexFocuse record from the query.
func (q miniCexFocuseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MiniCexFocuse, error) {
	o := &MiniCexFocuse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mini_cex_focuses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MiniCexFocuse records from the query.
func (q miniCexFocuseQuery) All(ctx context.Context, exec boil.ContextExecutor) (MiniCexFocuseSlice, error) {
	var o []*MiniCexFocuse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MiniCexFocuse slice")
	}

	if len(miniCexFocuseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MiniCexFocuse records in the query.
func (q miniCexFocuseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mini_cex_focuses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q miniCexFocuseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mini_cex_focuses exists")
	}

	return count > 0, nil
}

// MiniCexFocuses retrieves all the records using an executor.
func MiniCexFocuses(mods ...qm.QueryMod) miniCexFocuseQuery {
	mods = append(mods, qm.From("\"mini_cex_focuses\""))
	return miniCexFocuseQuery{NewQuery(mods...)}
}

// FindMiniCexFocuse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMiniCexFocuse(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MiniCexFocuse, error) {
	miniCexFocuseObj := &MiniCexFocuse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mini_cex_focuses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, miniCexFocuseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mini_cex_focuses")
	}

	if err = miniCexFocuseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return miniCexFocuseObj, err
	}

	return miniCexFocuseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MiniCexFocuse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mini_cex_focuses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(miniCexFocuseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	miniCexFocuseInsertCacheMut.RLock()
	cache, cached := miniCexFocuseInsertCache[key]
	miniCexFocuseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			miniCexFocuseAllColumns,
			miniCexFocuseColumnsWithDefault,
			miniCexFocuseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mini_cex_focuses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mini_cex_focuses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mini_cex_focuses")
	}

	if !cached {
		miniCexFocuseInsertCacheMut.Lock()
		miniCexFocuseInsertCache[key] = cache
		miniCexFocuseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MiniCexFocuse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MiniCexFocuse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	miniCexFocuseUpdateCacheMut.RLock()
	cache, cached := miniCexFocuseUpdateCache[key]
	miniCexFocuseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			miniCexFocuseAllColumns,
			miniCexFocusePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mini_cex_focuses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mini_cex_focuses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, miniCexFocusePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, append(wl, miniCexFocusePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mini_cex_focuses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mini_cex_focuses")
	}

	if !cached {
		miniCexFocuseUpdateCacheMut.Lock()
		miniCexFocuseUpdateCache[key] = cache
		miniCexFocuseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q miniCexFocuseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mini_cex_focuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mini_cex_focuses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MiniCexFocuseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexFocusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mini_cex_focuses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, miniCexFocusePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in miniCexFocuse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all miniCexFocuse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MiniCexFocuse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mini_cex_focuses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(miniCexFocuseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	miniCexFocuseUpsertCacheMut.RLock()
	cache, cached := miniCexFocuseUpsertCache[key]
	miniCexFocuseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			miniCexFocuseAllColumns,
			miniCexFocuseColumnsWithDefault,
			miniCexFocuseColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			miniCexFocuseAllColumns,
			miniCexFocusePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mini_cex_focuses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(miniCexFocusePrimaryKeyColumns))
			copy(conflict, miniCexFocusePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mini_cex_focuses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(miniCexFocuseType, miniCexFocuseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mini_cex_focuses")
	}

	if !cached {
		miniCexFocuseUpsertCacheMut.Lock()
		miniCexFocuseUpsertCache[key] = cache
		miniCexFocuseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MiniCexFocuse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MiniCexFocuse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MiniCexFocuse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), miniCexFocusePrimaryKeyMapping)
	sql := "DELETE FROM \"mini_cex_focuses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mini_cex_focuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mini_cex_focuses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q miniCexFocuseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no miniCexFocuseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mini_cex_focuses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mini_cex_focuses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MiniCexFocuseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(miniCexFocuseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexFocusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mini_cex_focuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, miniCexFocusePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from miniCexFocuse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mini_cex_focuses")
	}

	if len(miniCexFocuseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MiniCexFocuse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMiniCexFocuse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MiniCexFocuseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MiniCexFocuseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexFocusePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mini_cex_focuses\".* FROM \"mini_cex_focuses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, miniCexFocusePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MiniCexFocuseSlice")
	}

	*o = slice

	return nil
}

// MiniCexFocuseExists checks if the MiniCexFocuse row exists.
func MiniCexFocuseExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mini_cex_focuses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mini_cex_focuses exists")
	}

	return exists, nil
}
