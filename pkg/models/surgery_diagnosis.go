// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SurgeryDiagnosis is an object representing the database table.
type SurgeryDiagnosis struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Bodypart     string `boil:"bodypart" json:"bodypart" toml:"bodypart" yaml:"bodypart"`
	DiagnoseName string `boil:"diagnose_name" json:"diagnose_name" toml:"diagnose_name" yaml:"diagnose_name"`
	DiagnoseCode string `boil:"diagnose_code" json:"diagnose_code" toml:"diagnose_code" yaml:"diagnose_code"`
	ExtraCode    string `boil:"extra_code" json:"extra_code" toml:"extra_code" yaml:"extra_code"`

	R *surgeryDiagnosisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L surgeryDiagnosisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SurgeryDiagnosisColumns = struct {
	ID           string
	Bodypart     string
	DiagnoseName string
	DiagnoseCode string
	ExtraCode    string
}{
	ID:           "id",
	Bodypart:     "bodypart",
	DiagnoseName: "diagnose_name",
	DiagnoseCode: "diagnose_code",
	ExtraCode:    "extra_code",
}

var SurgeryDiagnosisTableColumns = struct {
	ID           string
	Bodypart     string
	DiagnoseName string
	DiagnoseCode string
	ExtraCode    string
}{
	ID:           "surgery_diagnosis.id",
	Bodypart:     "surgery_diagnosis.bodypart",
	DiagnoseName: "surgery_diagnosis.diagnose_name",
	DiagnoseCode: "surgery_diagnosis.diagnose_code",
	ExtraCode:    "surgery_diagnosis.extra_code",
}

// Generated where

var SurgeryDiagnosisWhere = struct {
	ID           whereHelperstring
	Bodypart     whereHelperstring
	DiagnoseName whereHelperstring
	DiagnoseCode whereHelperstring
	ExtraCode    whereHelperstring
}{
	ID:           whereHelperstring{field: "\"surgery_diagnosis\".\"id\""},
	Bodypart:     whereHelperstring{field: "\"surgery_diagnosis\".\"bodypart\""},
	DiagnoseName: whereHelperstring{field: "\"surgery_diagnosis\".\"diagnose_name\""},
	DiagnoseCode: whereHelperstring{field: "\"surgery_diagnosis\".\"diagnose_code\""},
	ExtraCode:    whereHelperstring{field: "\"surgery_diagnosis\".\"extra_code\""},
}

// SurgeryDiagnosisRels is where relationship names are stored.
var SurgeryDiagnosisRels = struct {
	DiagnoseSurgeries string
}{
	DiagnoseSurgeries: "DiagnoseSurgeries",
}

// surgeryDiagnosisR is where relationships are stored.
type surgeryDiagnosisR struct {
	DiagnoseSurgeries SurgerySlice `boil:"DiagnoseSurgeries" json:"DiagnoseSurgeries" toml:"DiagnoseSurgeries" yaml:"DiagnoseSurgeries"`
}

// NewStruct creates a new relationship struct
func (*surgeryDiagnosisR) NewStruct() *surgeryDiagnosisR {
	return &surgeryDiagnosisR{}
}

// surgeryDiagnosisL is where Load methods for each relationship are stored.
type surgeryDiagnosisL struct{}

var (
	surgeryDiagnosisAllColumns            = []string{"id", "bodypart", "diagnose_name", "diagnose_code", "extra_code"}
	surgeryDiagnosisColumnsWithoutDefault = []string{"bodypart"}
	surgeryDiagnosisColumnsWithDefault    = []string{"id", "diagnose_name", "diagnose_code", "extra_code"}
	surgeryDiagnosisPrimaryKeyColumns     = []string{"id"}
)

type (
	// SurgeryDiagnosisSlice is an alias for a slice of pointers to SurgeryDiagnosis.
	// This should almost always be used instead of []SurgeryDiagnosis.
	SurgeryDiagnosisSlice []*SurgeryDiagnosis
	// SurgeryDiagnosisHook is the signature for custom SurgeryDiagnosis hook methods
	SurgeryDiagnosisHook func(context.Context, boil.ContextExecutor, *SurgeryDiagnosis) error

	surgeryDiagnosisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	surgeryDiagnosisType                 = reflect.TypeOf(&SurgeryDiagnosis{})
	surgeryDiagnosisMapping              = queries.MakeStructMapping(surgeryDiagnosisType)
	surgeryDiagnosisPrimaryKeyMapping, _ = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, surgeryDiagnosisPrimaryKeyColumns)
	surgeryDiagnosisInsertCacheMut       sync.RWMutex
	surgeryDiagnosisInsertCache          = make(map[string]insertCache)
	surgeryDiagnosisUpdateCacheMut       sync.RWMutex
	surgeryDiagnosisUpdateCache          = make(map[string]updateCache)
	surgeryDiagnosisUpsertCacheMut       sync.RWMutex
	surgeryDiagnosisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var surgeryDiagnosisBeforeInsertHooks []SurgeryDiagnosisHook
var surgeryDiagnosisBeforeUpdateHooks []SurgeryDiagnosisHook
var surgeryDiagnosisBeforeDeleteHooks []SurgeryDiagnosisHook
var surgeryDiagnosisBeforeUpsertHooks []SurgeryDiagnosisHook

var surgeryDiagnosisAfterInsertHooks []SurgeryDiagnosisHook
var surgeryDiagnosisAfterSelectHooks []SurgeryDiagnosisHook
var surgeryDiagnosisAfterUpdateHooks []SurgeryDiagnosisHook
var surgeryDiagnosisAfterDeleteHooks []SurgeryDiagnosisHook
var surgeryDiagnosisAfterUpsertHooks []SurgeryDiagnosisHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SurgeryDiagnosis) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SurgeryDiagnosis) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SurgeryDiagnosis) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SurgeryDiagnosis) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SurgeryDiagnosis) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SurgeryDiagnosis) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SurgeryDiagnosis) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SurgeryDiagnosis) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SurgeryDiagnosis) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryDiagnosisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSurgeryDiagnosisHook registers your hook function for all future operations.
func AddSurgeryDiagnosisHook(hookPoint boil.HookPoint, surgeryDiagnosisHook SurgeryDiagnosisHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		surgeryDiagnosisBeforeInsertHooks = append(surgeryDiagnosisBeforeInsertHooks, surgeryDiagnosisHook)
	case boil.BeforeUpdateHook:
		surgeryDiagnosisBeforeUpdateHooks = append(surgeryDiagnosisBeforeUpdateHooks, surgeryDiagnosisHook)
	case boil.BeforeDeleteHook:
		surgeryDiagnosisBeforeDeleteHooks = append(surgeryDiagnosisBeforeDeleteHooks, surgeryDiagnosisHook)
	case boil.BeforeUpsertHook:
		surgeryDiagnosisBeforeUpsertHooks = append(surgeryDiagnosisBeforeUpsertHooks, surgeryDiagnosisHook)
	case boil.AfterInsertHook:
		surgeryDiagnosisAfterInsertHooks = append(surgeryDiagnosisAfterInsertHooks, surgeryDiagnosisHook)
	case boil.AfterSelectHook:
		surgeryDiagnosisAfterSelectHooks = append(surgeryDiagnosisAfterSelectHooks, surgeryDiagnosisHook)
	case boil.AfterUpdateHook:
		surgeryDiagnosisAfterUpdateHooks = append(surgeryDiagnosisAfterUpdateHooks, surgeryDiagnosisHook)
	case boil.AfterDeleteHook:
		surgeryDiagnosisAfterDeleteHooks = append(surgeryDiagnosisAfterDeleteHooks, surgeryDiagnosisHook)
	case boil.AfterUpsertHook:
		surgeryDiagnosisAfterUpsertHooks = append(surgeryDiagnosisAfterUpsertHooks, surgeryDiagnosisHook)
	}
}

// One returns a single surgeryDiagnosis record from the query.
func (q surgeryDiagnosisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SurgeryDiagnosis, error) {
	o := &SurgeryDiagnosis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for surgery_diagnosis")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SurgeryDiagnosis records from the query.
func (q surgeryDiagnosisQuery) All(ctx context.Context, exec boil.ContextExecutor) (SurgeryDiagnosisSlice, error) {
	var o []*SurgeryDiagnosis

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SurgeryDiagnosis slice")
	}

	if len(surgeryDiagnosisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SurgeryDiagnosis records in the query.
func (q surgeryDiagnosisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count surgery_diagnosis rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q surgeryDiagnosisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if surgery_diagnosis exists")
	}

	return count > 0, nil
}

// DiagnoseSurgeries retrieves all the surgery's Surgeries with an executor via diagnose_id column.
func (o *SurgeryDiagnosis) DiagnoseSurgeries(mods ...qm.QueryMod) surgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"surgeries\".\"diagnose_id\"=?", o.ID),
	)

	query := Surgeries(queryMods...)
	queries.SetFrom(query.Query, "\"surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"surgeries\".*"})
	}

	return query
}

// LoadDiagnoseSurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (surgeryDiagnosisL) LoadDiagnoseSurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgeryDiagnosis interface{}, mods queries.Applicator) error {
	var slice []*SurgeryDiagnosis
	var object *SurgeryDiagnosis

	if singular {
		object = maybeSurgeryDiagnosis.(*SurgeryDiagnosis)
	} else {
		slice = *maybeSurgeryDiagnosis.(*[]*SurgeryDiagnosis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryDiagnosisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryDiagnosisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgeries`),
		qm.WhereIn(`surgeries.diagnose_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load surgeries")
	}

	var resultSlice []*Surgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgeries")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiagnoseSurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &surgeryR{}
			}
			foreign.R.Diagnose = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DiagnoseID {
				local.R.DiagnoseSurgeries = append(local.R.DiagnoseSurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &surgeryR{}
				}
				foreign.R.Diagnose = local
				break
			}
		}
	}

	return nil
}

// AddDiagnoseSurgeries adds the given related objects to the existing relationships
// of the surgery_diagnosis, optionally inserting them as new records.
// Appends related to o.R.DiagnoseSurgeries.
// Sets related.R.Diagnose appropriately.
func (o *SurgeryDiagnosis) AddDiagnoseSurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Surgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiagnoseID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"diagnose_id"}),
				strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiagnoseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &surgeryDiagnosisR{
			DiagnoseSurgeries: related,
		}
	} else {
		o.R.DiagnoseSurgeries = append(o.R.DiagnoseSurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &surgeryR{
				Diagnose: o,
			}
		} else {
			rel.R.Diagnose = o
		}
	}
	return nil
}

// SurgeryDiagnoses retrieves all the records using an executor.
func SurgeryDiagnoses(mods ...qm.QueryMod) surgeryDiagnosisQuery {
	mods = append(mods, qm.From("\"surgery_diagnosis\""))
	return surgeryDiagnosisQuery{NewQuery(mods...)}
}

// FindSurgeryDiagnosis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSurgeryDiagnosis(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SurgeryDiagnosis, error) {
	surgeryDiagnosisObj := &SurgeryDiagnosis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"surgery_diagnosis\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, surgeryDiagnosisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from surgery_diagnosis")
	}

	if err = surgeryDiagnosisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return surgeryDiagnosisObj, err
	}

	return surgeryDiagnosisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SurgeryDiagnosis) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgery_diagnosis provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryDiagnosisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	surgeryDiagnosisInsertCacheMut.RLock()
	cache, cached := surgeryDiagnosisInsertCache[key]
	surgeryDiagnosisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			surgeryDiagnosisAllColumns,
			surgeryDiagnosisColumnsWithDefault,
			surgeryDiagnosisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"surgery_diagnosis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"surgery_diagnosis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into surgery_diagnosis")
	}

	if !cached {
		surgeryDiagnosisInsertCacheMut.Lock()
		surgeryDiagnosisInsertCache[key] = cache
		surgeryDiagnosisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SurgeryDiagnosis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SurgeryDiagnosis) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	surgeryDiagnosisUpdateCacheMut.RLock()
	cache, cached := surgeryDiagnosisUpdateCache[key]
	surgeryDiagnosisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			surgeryDiagnosisAllColumns,
			surgeryDiagnosisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update surgery_diagnosis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"surgery_diagnosis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, surgeryDiagnosisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, append(wl, surgeryDiagnosisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update surgery_diagnosis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for surgery_diagnosis")
	}

	if !cached {
		surgeryDiagnosisUpdateCacheMut.Lock()
		surgeryDiagnosisUpdateCache[key] = cache
		surgeryDiagnosisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q surgeryDiagnosisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for surgery_diagnosis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for surgery_diagnosis")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SurgeryDiagnosisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryDiagnosisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"surgery_diagnosis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, surgeryDiagnosisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in surgeryDiagnosis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all surgeryDiagnosis")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SurgeryDiagnosis) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgery_diagnosis provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryDiagnosisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	surgeryDiagnosisUpsertCacheMut.RLock()
	cache, cached := surgeryDiagnosisUpsertCache[key]
	surgeryDiagnosisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			surgeryDiagnosisAllColumns,
			surgeryDiagnosisColumnsWithDefault,
			surgeryDiagnosisColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			surgeryDiagnosisAllColumns,
			surgeryDiagnosisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert surgery_diagnosis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(surgeryDiagnosisPrimaryKeyColumns))
			copy(conflict, surgeryDiagnosisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"surgery_diagnosis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(surgeryDiagnosisType, surgeryDiagnosisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert surgery_diagnosis")
	}

	if !cached {
		surgeryDiagnosisUpsertCacheMut.Lock()
		surgeryDiagnosisUpsertCache[key] = cache
		surgeryDiagnosisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SurgeryDiagnosis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SurgeryDiagnosis) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SurgeryDiagnosis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), surgeryDiagnosisPrimaryKeyMapping)
	sql := "DELETE FROM \"surgery_diagnosis\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from surgery_diagnosis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for surgery_diagnosis")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q surgeryDiagnosisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no surgeryDiagnosisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgery_diagnosis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgery_diagnosis")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SurgeryDiagnosisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(surgeryDiagnosisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryDiagnosisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"surgery_diagnosis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryDiagnosisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgeryDiagnosis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgery_diagnosis")
	}

	if len(surgeryDiagnosisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SurgeryDiagnosis) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSurgeryDiagnosis(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SurgeryDiagnosisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SurgeryDiagnosisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryDiagnosisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"surgery_diagnosis\".* FROM \"surgery_diagnosis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryDiagnosisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SurgeryDiagnosisSlice")
	}

	*o = slice

	return nil
}

// SurgeryDiagnosisExists checks if the SurgeryDiagnosis row exists.
func SurgeryDiagnosisExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"surgery_diagnosis\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if surgery_diagnosis exists")
	}

	return exists, nil
}
