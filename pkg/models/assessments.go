// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Assessment is an object representing the database table.
type Assessment struct {
	ID                        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OccurredAt                time.Time   `boil:"occurred_at" json:"occurred_at" toml:"occurred_at" yaml:"occurred_at"`
	OrthopedicSurgeryReviewID null.String `boil:"orthopedic_surgery_review_id" json:"orthopedic_surgery_review_id,omitempty" toml:"orthopedic_surgery_review_id" yaml:"orthopedic_surgery_review_id,omitempty"`
	DopsID                    null.String `boil:"dops_id" json:"dops_id,omitempty" toml:"dops_id" yaml:"dops_id,omitempty"`
	MiniCexID                 null.String `boil:"mini_cex_id" json:"mini_cex_id,omitempty" toml:"mini_cex_id" yaml:"mini_cex_id,omitempty"`

	R *assessmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assessmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssessmentColumns = struct {
	ID                        string
	OccurredAt                string
	OrthopedicSurgeryReviewID string
	DopsID                    string
	MiniCexID                 string
}{
	ID:                        "id",
	OccurredAt:                "occurred_at",
	OrthopedicSurgeryReviewID: "orthopedic_surgery_review_id",
	DopsID:                    "dops_id",
	MiniCexID:                 "mini_cex_id",
}

var AssessmentTableColumns = struct {
	ID                        string
	OccurredAt                string
	OrthopedicSurgeryReviewID string
	DopsID                    string
	MiniCexID                 string
}{
	ID:                        "assessments.id",
	OccurredAt:                "assessments.occurred_at",
	OrthopedicSurgeryReviewID: "assessments.orthopedic_surgery_review_id",
	DopsID:                    "assessments.dops_id",
	MiniCexID:                 "assessments.mini_cex_id",
}

// Generated where

var AssessmentWhere = struct {
	ID                        whereHelperstring
	OccurredAt                whereHelpertime_Time
	OrthopedicSurgeryReviewID whereHelpernull_String
	DopsID                    whereHelpernull_String
	MiniCexID                 whereHelpernull_String
}{
	ID:                        whereHelperstring{field: "\"assessments\".\"id\""},
	OccurredAt:                whereHelpertime_Time{field: "\"assessments\".\"occurred_at\""},
	OrthopedicSurgeryReviewID: whereHelpernull_String{field: "\"assessments\".\"orthopedic_surgery_review_id\""},
	DopsID:                    whereHelpernull_String{field: "\"assessments\".\"dops_id\""},
	MiniCexID:                 whereHelpernull_String{field: "\"assessments\".\"mini_cex_id\""},
}

// AssessmentRels is where relationship names are stored.
var AssessmentRels = struct {
	Dop                     string
	MiniCex                 string
	OrthopedicSurgeryReview string
	Activity                string
}{
	Dop:                     "Dop",
	MiniCex:                 "MiniCex",
	OrthopedicSurgeryReview: "OrthopedicSurgeryReview",
	Activity:                "Activity",
}

// assessmentR is where relationships are stored.
type assessmentR struct {
	Dop                     *DopsEvaluation                    `boil:"Dop" json:"Dop" toml:"Dop" yaml:"Dop"`
	MiniCex                 *MiniCexEvaluation                 `boil:"MiniCex" json:"MiniCex" toml:"MiniCex" yaml:"MiniCex"`
	OrthopedicSurgeryReview *OrthopedicSurgeriesActivityReview `boil:"OrthopedicSurgeryReview" json:"OrthopedicSurgeryReview" toml:"OrthopedicSurgeryReview" yaml:"OrthopedicSurgeryReview"`
	Activity                *Activity                          `boil:"Activity" json:"Activity" toml:"Activity" yaml:"Activity"`
}

// NewStruct creates a new relationship struct
func (*assessmentR) NewStruct() *assessmentR {
	return &assessmentR{}
}

// assessmentL is where Load methods for each relationship are stored.
type assessmentL struct{}

var (
	assessmentAllColumns            = []string{"id", "occurred_at", "orthopedic_surgery_review_id", "dops_id", "mini_cex_id"}
	assessmentColumnsWithoutDefault = []string{"occurred_at", "orthopedic_surgery_review_id", "dops_id", "mini_cex_id"}
	assessmentColumnsWithDefault    = []string{"id"}
	assessmentPrimaryKeyColumns     = []string{"id"}
)

type (
	// AssessmentSlice is an alias for a slice of pointers to Assessment.
	// This should almost always be used instead of []Assessment.
	AssessmentSlice []*Assessment
	// AssessmentHook is the signature for custom Assessment hook methods
	AssessmentHook func(context.Context, boil.ContextExecutor, *Assessment) error

	assessmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assessmentType                 = reflect.TypeOf(&Assessment{})
	assessmentMapping              = queries.MakeStructMapping(assessmentType)
	assessmentPrimaryKeyMapping, _ = queries.BindMapping(assessmentType, assessmentMapping, assessmentPrimaryKeyColumns)
	assessmentInsertCacheMut       sync.RWMutex
	assessmentInsertCache          = make(map[string]insertCache)
	assessmentUpdateCacheMut       sync.RWMutex
	assessmentUpdateCache          = make(map[string]updateCache)
	assessmentUpsertCacheMut       sync.RWMutex
	assessmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assessmentBeforeInsertHooks []AssessmentHook
var assessmentBeforeUpdateHooks []AssessmentHook
var assessmentBeforeDeleteHooks []AssessmentHook
var assessmentBeforeUpsertHooks []AssessmentHook

var assessmentAfterInsertHooks []AssessmentHook
var assessmentAfterSelectHooks []AssessmentHook
var assessmentAfterUpdateHooks []AssessmentHook
var assessmentAfterDeleteHooks []AssessmentHook
var assessmentAfterUpsertHooks []AssessmentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Assessment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Assessment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Assessment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Assessment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Assessment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Assessment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Assessment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Assessment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Assessment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assessmentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssessmentHook registers your hook function for all future operations.
func AddAssessmentHook(hookPoint boil.HookPoint, assessmentHook AssessmentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assessmentBeforeInsertHooks = append(assessmentBeforeInsertHooks, assessmentHook)
	case boil.BeforeUpdateHook:
		assessmentBeforeUpdateHooks = append(assessmentBeforeUpdateHooks, assessmentHook)
	case boil.BeforeDeleteHook:
		assessmentBeforeDeleteHooks = append(assessmentBeforeDeleteHooks, assessmentHook)
	case boil.BeforeUpsertHook:
		assessmentBeforeUpsertHooks = append(assessmentBeforeUpsertHooks, assessmentHook)
	case boil.AfterInsertHook:
		assessmentAfterInsertHooks = append(assessmentAfterInsertHooks, assessmentHook)
	case boil.AfterSelectHook:
		assessmentAfterSelectHooks = append(assessmentAfterSelectHooks, assessmentHook)
	case boil.AfterUpdateHook:
		assessmentAfterUpdateHooks = append(assessmentAfterUpdateHooks, assessmentHook)
	case boil.AfterDeleteHook:
		assessmentAfterDeleteHooks = append(assessmentAfterDeleteHooks, assessmentHook)
	case boil.AfterUpsertHook:
		assessmentAfterUpsertHooks = append(assessmentAfterUpsertHooks, assessmentHook)
	}
}

// One returns a single assessment record from the query.
func (q assessmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Assessment, error) {
	o := &Assessment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assessments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Assessment records from the query.
func (q assessmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssessmentSlice, error) {
	var o []*Assessment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Assessment slice")
	}

	if len(assessmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Assessment records in the query.
func (q assessmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assessments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assessmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assessments exists")
	}

	return count > 0, nil
}

// Dop pointed to by the foreign key.
func (o *Assessment) Dop(mods ...qm.QueryMod) dopsEvaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DopsID),
	}

	queryMods = append(queryMods, mods...)

	query := DopsEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"dops_evaluations\"")

	return query
}

// MiniCex pointed to by the foreign key.
func (o *Assessment) MiniCex(mods ...qm.QueryMod) miniCexEvaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MiniCexID),
	}

	queryMods = append(queryMods, mods...)

	query := MiniCexEvaluations(queryMods...)
	queries.SetFrom(query.Query, "\"mini_cex_evaluations\"")

	return query
}

// OrthopedicSurgeryReview pointed to by the foreign key.
func (o *Assessment) OrthopedicSurgeryReview(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrthopedicSurgeryReviewID),
	}

	queryMods = append(queryMods, mods...)

	query := OrthopedicSurgeriesActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review\"")

	return query
}

// Activity pointed to by the foreign key.
func (o *Assessment) Activity(mods ...qm.QueryMod) activityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"assessment_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Activities(queryMods...)
	queries.SetFrom(query.Query, "\"activities\"")

	return query
}

// LoadDop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assessmentL) LoadDop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssessment interface{}, mods queries.Applicator) error {
	var slice []*Assessment
	var object *Assessment

	if singular {
		object = maybeAssessment.(*Assessment)
	} else {
		slice = *maybeAssessment.(*[]*Assessment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assessmentR{}
		}
		if !queries.IsNil(object.DopsID) {
			args = append(args, object.DopsID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assessmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DopsID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DopsID) {
				args = append(args, obj.DopsID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dops_evaluations`),
		qm.WhereIn(`dops_evaluations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DopsEvaluation")
	}

	var resultSlice []*DopsEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DopsEvaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for dops_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dops_evaluations")
	}

	if len(assessmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Dop = foreign
		if foreign.R == nil {
			foreign.R = &dopsEvaluationR{}
		}
		foreign.R.DopAssessment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DopsID, foreign.ID) {
				local.R.Dop = foreign
				if foreign.R == nil {
					foreign.R = &dopsEvaluationR{}
				}
				foreign.R.DopAssessment = local
				break
			}
		}
	}

	return nil
}

// LoadMiniCex allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assessmentL) LoadMiniCex(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssessment interface{}, mods queries.Applicator) error {
	var slice []*Assessment
	var object *Assessment

	if singular {
		object = maybeAssessment.(*Assessment)
	} else {
		slice = *maybeAssessment.(*[]*Assessment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assessmentR{}
		}
		if !queries.IsNil(object.MiniCexID) {
			args = append(args, object.MiniCexID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assessmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MiniCexID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MiniCexID) {
				args = append(args, obj.MiniCexID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mini_cex_evaluations`),
		qm.WhereIn(`mini_cex_evaluations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MiniCexEvaluation")
	}

	var resultSlice []*MiniCexEvaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MiniCexEvaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mini_cex_evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mini_cex_evaluations")
	}

	if len(assessmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MiniCex = foreign
		if foreign.R == nil {
			foreign.R = &miniCexEvaluationR{}
		}
		foreign.R.MiniCexAssessment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MiniCexID, foreign.ID) {
				local.R.MiniCex = foreign
				if foreign.R == nil {
					foreign.R = &miniCexEvaluationR{}
				}
				foreign.R.MiniCexAssessment = local
				break
			}
		}
	}

	return nil
}

// LoadOrthopedicSurgeryReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assessmentL) LoadOrthopedicSurgeryReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssessment interface{}, mods queries.Applicator) error {
	var slice []*Assessment
	var object *Assessment

	if singular {
		object = maybeAssessment.(*Assessment)
	} else {
		slice = *maybeAssessment.(*[]*Assessment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assessmentR{}
		}
		if !queries.IsNil(object.OrthopedicSurgeryReviewID) {
			args = append(args, object.OrthopedicSurgeryReviewID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assessmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrthopedicSurgeryReviewID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrthopedicSurgeryReviewID) {
				args = append(args, obj.OrthopedicSurgeryReviewID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review`),
		qm.WhereIn(`orthopedic_surgeries_activity_review.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrthopedicSurgeriesActivityReview")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrthopedicSurgeriesActivityReview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orthopedic_surgeries_activity_review")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review")
	}

	if len(assessmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrthopedicSurgeryReview = foreign
		if foreign.R == nil {
			foreign.R = &orthopedicSurgeriesActivityReviewR{}
		}
		foreign.R.OrthopedicSurgeryReviewAssessment = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrthopedicSurgeryReviewID, foreign.ID) {
				local.R.OrthopedicSurgeryReview = foreign
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewR{}
				}
				foreign.R.OrthopedicSurgeryReviewAssessment = local
				break
			}
		}
	}

	return nil
}

// LoadActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (assessmentL) LoadActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssessment interface{}, mods queries.Applicator) error {
	var slice []*Assessment
	var object *Assessment

	if singular {
		object = maybeAssessment.(*Assessment)
	} else {
		slice = *maybeAssessment.(*[]*Assessment)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assessmentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assessmentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`activities`),
		qm.WhereIn(`activities.assessment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Activity")
	}

	var resultSlice []*Activity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Activity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for activities")
	}

	if len(assessmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Activity = foreign
		if foreign.R == nil {
			foreign.R = &activityR{}
		}
		foreign.R.Assessment = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.AssessmentID) {
				local.R.Activity = foreign
				if foreign.R == nil {
					foreign.R = &activityR{}
				}
				foreign.R.Assessment = local
				break
			}
		}
	}

	return nil
}

// SetDop of the assessment to the related item.
// Sets o.R.Dop to related.
// Adds o to related.R.DopAssessment.
func (o *Assessment) SetDop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DopsEvaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assessments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"dops_id"}),
		strmangle.WhereClause("\"", "\"", 2, assessmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DopsID, related.ID)
	if o.R == nil {
		o.R = &assessmentR{
			Dop: related,
		}
	} else {
		o.R.Dop = related
	}

	if related.R == nil {
		related.R = &dopsEvaluationR{
			DopAssessment: o,
		}
	} else {
		related.R.DopAssessment = o
	}

	return nil
}

// RemoveDop relationship.
// Sets o.R.Dop to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Assessment) RemoveDop(ctx context.Context, exec boil.ContextExecutor, related *DopsEvaluation) error {
	var err error

	queries.SetScanner(&o.DopsID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("dops_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Dop = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.DopAssessment = nil
	return nil
}

// SetMiniCex of the assessment to the related item.
// Sets o.R.MiniCex to related.
// Adds o to related.R.MiniCexAssessment.
func (o *Assessment) SetMiniCex(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MiniCexEvaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assessments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mini_cex_id"}),
		strmangle.WhereClause("\"", "\"", 2, assessmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MiniCexID, related.ID)
	if o.R == nil {
		o.R = &assessmentR{
			MiniCex: related,
		}
	} else {
		o.R.MiniCex = related
	}

	if related.R == nil {
		related.R = &miniCexEvaluationR{
			MiniCexAssessment: o,
		}
	} else {
		related.R.MiniCexAssessment = o
	}

	return nil
}

// RemoveMiniCex relationship.
// Sets o.R.MiniCex to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Assessment) RemoveMiniCex(ctx context.Context, exec boil.ContextExecutor, related *MiniCexEvaluation) error {
	var err error

	queries.SetScanner(&o.MiniCexID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("mini_cex_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MiniCex = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.MiniCexAssessment = nil
	return nil
}

// SetOrthopedicSurgeryReview of the assessment to the related item.
// Sets o.R.OrthopedicSurgeryReview to related.
// Adds o to related.R.OrthopedicSurgeryReviewAssessment.
func (o *Assessment) SetOrthopedicSurgeryReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrthopedicSurgeriesActivityReview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assessments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orthopedic_surgery_review_id"}),
		strmangle.WhereClause("\"", "\"", 2, assessmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrthopedicSurgeryReviewID, related.ID)
	if o.R == nil {
		o.R = &assessmentR{
			OrthopedicSurgeryReview: related,
		}
	} else {
		o.R.OrthopedicSurgeryReview = related
	}

	if related.R == nil {
		related.R = &orthopedicSurgeriesActivityReviewR{
			OrthopedicSurgeryReviewAssessment: o,
		}
	} else {
		related.R.OrthopedicSurgeryReviewAssessment = o
	}

	return nil
}

// RemoveOrthopedicSurgeryReview relationship.
// Sets o.R.OrthopedicSurgeryReview to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Assessment) RemoveOrthopedicSurgeryReview(ctx context.Context, exec boil.ContextExecutor, related *OrthopedicSurgeriesActivityReview) error {
	var err error

	queries.SetScanner(&o.OrthopedicSurgeryReviewID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orthopedic_surgery_review_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrthopedicSurgeryReview = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.OrthopedicSurgeryReviewAssessment = nil
	return nil
}

// SetActivity of the assessment to the related item.
// Sets o.R.Activity to related.
// Adds o to related.R.Assessment.
func (o *Assessment) SetActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Activity) error {
	var err error

	if insert {
		queries.Assign(&related.AssessmentID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"assessment_id"}),
			strmangle.WhereClause("\"", "\"", 2, activityPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.AssessmentID, o.ID)
	}

	if o.R == nil {
		o.R = &assessmentR{
			Activity: related,
		}
	} else {
		o.R.Activity = related
	}

	if related.R == nil {
		related.R = &activityR{
			Assessment: o,
		}
	} else {
		related.R.Assessment = o
	}
	return nil
}

// RemoveActivity relationship.
// Sets o.R.Activity to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Assessment) RemoveActivity(ctx context.Context, exec boil.ContextExecutor, related *Activity) error {
	var err error

	queries.SetScanner(&related.AssessmentID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("assessment_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Activity = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Assessment = nil
	return nil
}

// Assessments retrieves all the records using an executor.
func Assessments(mods ...qm.QueryMod) assessmentQuery {
	mods = append(mods, qm.From("\"assessments\""))
	return assessmentQuery{NewQuery(mods...)}
}

// FindAssessment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssessment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Assessment, error) {
	assessmentObj := &Assessment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assessments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assessmentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assessments")
	}

	if err = assessmentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assessmentObj, err
	}

	return assessmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Assessment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assessments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assessmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assessmentInsertCacheMut.RLock()
	cache, cached := assessmentInsertCache[key]
	assessmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assessmentAllColumns,
			assessmentColumnsWithDefault,
			assessmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assessmentType, assessmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assessmentType, assessmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assessments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assessments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assessments")
	}

	if !cached {
		assessmentInsertCacheMut.Lock()
		assessmentInsertCache[key] = cache
		assessmentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Assessment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Assessment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assessmentUpdateCacheMut.RLock()
	cache, cached := assessmentUpdateCache[key]
	assessmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assessmentAllColumns,
			assessmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assessments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assessments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assessmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assessmentType, assessmentMapping, append(wl, assessmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assessments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assessments")
	}

	if !cached {
		assessmentUpdateCacheMut.Lock()
		assessmentUpdateCache[key] = cache
		assessmentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assessmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assessments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assessments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssessmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assessmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assessments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assessmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assessment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assessment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Assessment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assessments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assessmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assessmentUpsertCacheMut.RLock()
	cache, cached := assessmentUpsertCache[key]
	assessmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assessmentAllColumns,
			assessmentColumnsWithDefault,
			assessmentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assessmentAllColumns,
			assessmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assessments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assessmentPrimaryKeyColumns))
			copy(conflict, assessmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assessments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assessmentType, assessmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assessmentType, assessmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assessments")
	}

	if !cached {
		assessmentUpsertCacheMut.Lock()
		assessmentUpsertCache[key] = cache
		assessmentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Assessment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Assessment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Assessment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assessmentPrimaryKeyMapping)
	sql := "DELETE FROM \"assessments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assessments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assessments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assessmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assessmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assessments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assessments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssessmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assessmentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assessmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assessments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assessmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assessment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assessments")
	}

	if len(assessmentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Assessment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssessment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssessmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssessmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assessmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assessments\".* FROM \"assessments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assessmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssessmentSlice")
	}

	*o = slice

	return nil
}

// AssessmentExists checks if the Assessment row exists.
func AssessmentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assessments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assessments exists")
	}

	return exists, nil
}
