// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ExaminationsActivitiesReview is an object representing the database table.
type ExaminationsActivitiesReview struct {
	ID                            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ActivityAuthorUserID          string      `boil:"activity_author_user_id" json:"activity_author_user_id" toml:"activity_author_user_id" yaml:"activity_author_user_id"`
	ActivityReviewerUserID        string      `boil:"activity_reviewer_user_id" json:"activity_reviewer_user_id" toml:"activity_reviewer_user_id" yaml:"activity_reviewer_user_id"`
	ExaminationActivitiesID       string      `boil:"examination_activities_id" json:"examination_activities_id" toml:"examination_activities_id" yaml:"examination_activities_id"`
	ExaminationsActivityReviewsID null.String `boil:"examinations_activity_reviews_id" json:"examinations_activity_reviews_id,omitempty" toml:"examinations_activity_reviews_id" yaml:"examinations_activity_reviews_id,omitempty"`
	CreatedAt                     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ResidentUpdatedAt             null.Time   `boil:"resident_updated_at" json:"resident_updated_at,omitempty" toml:"resident_updated_at" yaml:"resident_updated_at,omitempty"`
	SupervisorUpdatedAt           null.Time   `boil:"supervisor_updated_at" json:"supervisor_updated_at,omitempty" toml:"supervisor_updated_at" yaml:"supervisor_updated_at,omitempty"`
	IsReviewed                    bool        `boil:"is_reviewed" json:"is_reviewed" toml:"is_reviewed" yaml:"is_reviewed"`

	R *examinationsActivitiesReviewR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examinationsActivitiesReviewL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExaminationsActivitiesReviewColumns = struct {
	ID                            string
	ActivityAuthorUserID          string
	ActivityReviewerUserID        string
	ExaminationActivitiesID       string
	ExaminationsActivityReviewsID string
	CreatedAt                     string
	ResidentUpdatedAt             string
	SupervisorUpdatedAt           string
	IsReviewed                    string
}{
	ID:                            "id",
	ActivityAuthorUserID:          "activity_author_user_id",
	ActivityReviewerUserID:        "activity_reviewer_user_id",
	ExaminationActivitiesID:       "examination_activities_id",
	ExaminationsActivityReviewsID: "examinations_activity_reviews_id",
	CreatedAt:                     "created_at",
	ResidentUpdatedAt:             "resident_updated_at",
	SupervisorUpdatedAt:           "supervisor_updated_at",
	IsReviewed:                    "is_reviewed",
}

var ExaminationsActivitiesReviewTableColumns = struct {
	ID                            string
	ActivityAuthorUserID          string
	ActivityReviewerUserID        string
	ExaminationActivitiesID       string
	ExaminationsActivityReviewsID string
	CreatedAt                     string
	ResidentUpdatedAt             string
	SupervisorUpdatedAt           string
	IsReviewed                    string
}{
	ID:                            "examinations_activities_reviews.id",
	ActivityAuthorUserID:          "examinations_activities_reviews.activity_author_user_id",
	ActivityReviewerUserID:        "examinations_activities_reviews.activity_reviewer_user_id",
	ExaminationActivitiesID:       "examinations_activities_reviews.examination_activities_id",
	ExaminationsActivityReviewsID: "examinations_activities_reviews.examinations_activity_reviews_id",
	CreatedAt:                     "examinations_activities_reviews.created_at",
	ResidentUpdatedAt:             "examinations_activities_reviews.resident_updated_at",
	SupervisorUpdatedAt:           "examinations_activities_reviews.supervisor_updated_at",
	IsReviewed:                    "examinations_activities_reviews.is_reviewed",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ExaminationsActivitiesReviewWhere = struct {
	ID                            whereHelperstring
	ActivityAuthorUserID          whereHelperstring
	ActivityReviewerUserID        whereHelperstring
	ExaminationActivitiesID       whereHelperstring
	ExaminationsActivityReviewsID whereHelpernull_String
	CreatedAt                     whereHelpertime_Time
	ResidentUpdatedAt             whereHelpernull_Time
	SupervisorUpdatedAt           whereHelpernull_Time
	IsReviewed                    whereHelperbool
}{
	ID:                            whereHelperstring{field: "\"examinations_activities_reviews\".\"id\""},
	ActivityAuthorUserID:          whereHelperstring{field: "\"examinations_activities_reviews\".\"activity_author_user_id\""},
	ActivityReviewerUserID:        whereHelperstring{field: "\"examinations_activities_reviews\".\"activity_reviewer_user_id\""},
	ExaminationActivitiesID:       whereHelperstring{field: "\"examinations_activities_reviews\".\"examination_activities_id\""},
	ExaminationsActivityReviewsID: whereHelpernull_String{field: "\"examinations_activities_reviews\".\"examinations_activity_reviews_id\""},
	CreatedAt:                     whereHelpertime_Time{field: "\"examinations_activities_reviews\".\"created_at\""},
	ResidentUpdatedAt:             whereHelpernull_Time{field: "\"examinations_activities_reviews\".\"resident_updated_at\""},
	SupervisorUpdatedAt:           whereHelpernull_Time{field: "\"examinations_activities_reviews\".\"supervisor_updated_at\""},
	IsReviewed:                    whereHelperbool{field: "\"examinations_activities_reviews\".\"is_reviewed\""},
}

// ExaminationsActivitiesReviewRels is where relationship names are stored.
var ExaminationsActivitiesReviewRels = struct {
	ExaminationsActivityReview string
	ActivityAuthorUser         string
	ActivityReviewerUser       string
	ExaminationActivity        string
}{
	ExaminationsActivityReview: "ExaminationsActivityReview",
	ActivityAuthorUser:         "ActivityAuthorUser",
	ActivityReviewerUser:       "ActivityReviewerUser",
	ExaminationActivity:        "ExaminationActivity",
}

// examinationsActivitiesReviewR is where relationships are stored.
type examinationsActivitiesReviewR struct {
	ExaminationsActivityReview *ExaminationsActivityReview `boil:"ExaminationsActivityReview" json:"ExaminationsActivityReview" toml:"ExaminationsActivityReview" yaml:"ExaminationsActivityReview"`
	ActivityAuthorUser         *User                       `boil:"ActivityAuthorUser" json:"ActivityAuthorUser" toml:"ActivityAuthorUser" yaml:"ActivityAuthorUser"`
	ActivityReviewerUser       *User                       `boil:"ActivityReviewerUser" json:"ActivityReviewerUser" toml:"ActivityReviewerUser" yaml:"ActivityReviewerUser"`
	ExaminationActivity        *ExaminationActivity        `boil:"ExaminationActivity" json:"ExaminationActivity" toml:"ExaminationActivity" yaml:"ExaminationActivity"`
}

// NewStruct creates a new relationship struct
func (*examinationsActivitiesReviewR) NewStruct() *examinationsActivitiesReviewR {
	return &examinationsActivitiesReviewR{}
}

// examinationsActivitiesReviewL is where Load methods for each relationship are stored.
type examinationsActivitiesReviewL struct{}

var (
	examinationsActivitiesReviewAllColumns            = []string{"id", "activity_author_user_id", "activity_reviewer_user_id", "examination_activities_id", "examinations_activity_reviews_id", "created_at", "resident_updated_at", "supervisor_updated_at", "is_reviewed"}
	examinationsActivitiesReviewColumnsWithoutDefault = []string{"activity_author_user_id", "activity_reviewer_user_id", "examination_activities_id", "examinations_activity_reviews_id", "resident_updated_at", "supervisor_updated_at"}
	examinationsActivitiesReviewColumnsWithDefault    = []string{"id", "created_at", "is_reviewed"}
	examinationsActivitiesReviewPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExaminationsActivitiesReviewSlice is an alias for a slice of pointers to ExaminationsActivitiesReview.
	// This should almost always be used instead of []ExaminationsActivitiesReview.
	ExaminationsActivitiesReviewSlice []*ExaminationsActivitiesReview
	// ExaminationsActivitiesReviewHook is the signature for custom ExaminationsActivitiesReview hook methods
	ExaminationsActivitiesReviewHook func(context.Context, boil.ContextExecutor, *ExaminationsActivitiesReview) error

	examinationsActivitiesReviewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examinationsActivitiesReviewType                 = reflect.TypeOf(&ExaminationsActivitiesReview{})
	examinationsActivitiesReviewMapping              = queries.MakeStructMapping(examinationsActivitiesReviewType)
	examinationsActivitiesReviewPrimaryKeyMapping, _ = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, examinationsActivitiesReviewPrimaryKeyColumns)
	examinationsActivitiesReviewInsertCacheMut       sync.RWMutex
	examinationsActivitiesReviewInsertCache          = make(map[string]insertCache)
	examinationsActivitiesReviewUpdateCacheMut       sync.RWMutex
	examinationsActivitiesReviewUpdateCache          = make(map[string]updateCache)
	examinationsActivitiesReviewUpsertCacheMut       sync.RWMutex
	examinationsActivitiesReviewUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examinationsActivitiesReviewBeforeInsertHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewBeforeUpdateHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewBeforeDeleteHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewBeforeUpsertHooks []ExaminationsActivitiesReviewHook

var examinationsActivitiesReviewAfterInsertHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewAfterSelectHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewAfterUpdateHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewAfterDeleteHooks []ExaminationsActivitiesReviewHook
var examinationsActivitiesReviewAfterUpsertHooks []ExaminationsActivitiesReviewHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExaminationsActivitiesReview) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExaminationsActivitiesReview) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExaminationsActivitiesReview) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExaminationsActivitiesReview) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExaminationsActivitiesReview) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExaminationsActivitiesReview) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExaminationsActivitiesReview) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExaminationsActivitiesReview) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExaminationsActivitiesReview) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationsActivitiesReviewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExaminationsActivitiesReviewHook registers your hook function for all future operations.
func AddExaminationsActivitiesReviewHook(hookPoint boil.HookPoint, examinationsActivitiesReviewHook ExaminationsActivitiesReviewHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		examinationsActivitiesReviewBeforeInsertHooks = append(examinationsActivitiesReviewBeforeInsertHooks, examinationsActivitiesReviewHook)
	case boil.BeforeUpdateHook:
		examinationsActivitiesReviewBeforeUpdateHooks = append(examinationsActivitiesReviewBeforeUpdateHooks, examinationsActivitiesReviewHook)
	case boil.BeforeDeleteHook:
		examinationsActivitiesReviewBeforeDeleteHooks = append(examinationsActivitiesReviewBeforeDeleteHooks, examinationsActivitiesReviewHook)
	case boil.BeforeUpsertHook:
		examinationsActivitiesReviewBeforeUpsertHooks = append(examinationsActivitiesReviewBeforeUpsertHooks, examinationsActivitiesReviewHook)
	case boil.AfterInsertHook:
		examinationsActivitiesReviewAfterInsertHooks = append(examinationsActivitiesReviewAfterInsertHooks, examinationsActivitiesReviewHook)
	case boil.AfterSelectHook:
		examinationsActivitiesReviewAfterSelectHooks = append(examinationsActivitiesReviewAfterSelectHooks, examinationsActivitiesReviewHook)
	case boil.AfterUpdateHook:
		examinationsActivitiesReviewAfterUpdateHooks = append(examinationsActivitiesReviewAfterUpdateHooks, examinationsActivitiesReviewHook)
	case boil.AfterDeleteHook:
		examinationsActivitiesReviewAfterDeleteHooks = append(examinationsActivitiesReviewAfterDeleteHooks, examinationsActivitiesReviewHook)
	case boil.AfterUpsertHook:
		examinationsActivitiesReviewAfterUpsertHooks = append(examinationsActivitiesReviewAfterUpsertHooks, examinationsActivitiesReviewHook)
	}
}

// One returns a single examinationsActivitiesReview record from the query.
func (q examinationsActivitiesReviewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExaminationsActivitiesReview, error) {
	o := &ExaminationsActivitiesReview{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for examinations_activities_reviews")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExaminationsActivitiesReview records from the query.
func (q examinationsActivitiesReviewQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExaminationsActivitiesReviewSlice, error) {
	var o []*ExaminationsActivitiesReview

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExaminationsActivitiesReview slice")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExaminationsActivitiesReview records in the query.
func (q examinationsActivitiesReviewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count examinations_activities_reviews rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examinationsActivitiesReviewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if examinations_activities_reviews exists")
	}

	return count > 0, nil
}

// ExaminationsActivityReview pointed to by the foreign key.
func (o *ExaminationsActivitiesReview) ExaminationsActivityReview(mods ...qm.QueryMod) examinationsActivityReviewQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExaminationsActivityReviewsID),
	}

	queryMods = append(queryMods, mods...)

	query := ExaminationsActivityReviews(queryMods...)
	queries.SetFrom(query.Query, "\"examinations_activity_reviews\"")

	return query
}

// ActivityAuthorUser pointed to by the foreign key.
func (o *ExaminationsActivitiesReview) ActivityAuthorUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ActivityAuthorUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ActivityReviewerUser pointed to by the foreign key.
func (o *ExaminationsActivitiesReview) ActivityReviewerUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ActivityReviewerUserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ExaminationActivity pointed to by the foreign key.
func (o *ExaminationsActivitiesReview) ExaminationActivity(mods ...qm.QueryMod) examinationActivityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ExaminationActivitiesID),
	}

	queryMods = append(queryMods, mods...)

	query := ExaminationActivities(queryMods...)
	queries.SetFrom(query.Query, "\"examination_activities\"")

	return query
}

// LoadExaminationsActivityReview allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationsActivitiesReviewL) LoadExaminationsActivityReview(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivitiesReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivitiesReview
	var object *ExaminationsActivitiesReview

	if singular {
		object = maybeExaminationsActivitiesReview.(*ExaminationsActivitiesReview)
	} else {
		slice = *maybeExaminationsActivitiesReview.(*[]*ExaminationsActivitiesReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivitiesReviewR{}
		}
		if !queries.IsNil(object.ExaminationsActivityReviewsID) {
			args = append(args, object.ExaminationsActivityReviewsID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivitiesReviewR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ExaminationsActivityReviewsID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ExaminationsActivityReviewsID) {
				args = append(args, obj.ExaminationsActivityReviewsID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examinations_activity_reviews`),
		qm.WhereIn(`examinations_activity_reviews.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExaminationsActivityReview")
	}

	var resultSlice []*ExaminationsActivityReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExaminationsActivityReview")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for examinations_activity_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examinations_activity_reviews")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExaminationsActivityReview = foreign
		if foreign.R == nil {
			foreign.R = &examinationsActivityReviewR{}
		}
		foreign.R.ExaminationsActivitiesReviews = append(foreign.R.ExaminationsActivitiesReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ExaminationsActivityReviewsID, foreign.ID) {
				local.R.ExaminationsActivityReview = foreign
				if foreign.R == nil {
					foreign.R = &examinationsActivityReviewR{}
				}
				foreign.R.ExaminationsActivitiesReviews = append(foreign.R.ExaminationsActivitiesReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadActivityAuthorUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationsActivitiesReviewL) LoadActivityAuthorUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivitiesReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivitiesReview
	var object *ExaminationsActivitiesReview

	if singular {
		object = maybeExaminationsActivitiesReview.(*ExaminationsActivitiesReview)
	} else {
		slice = *maybeExaminationsActivitiesReview.(*[]*ExaminationsActivitiesReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivitiesReviewR{}
		}
		args = append(args, object.ActivityAuthorUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivitiesReviewR{}
			}

			for _, a := range args {
				if a == obj.ActivityAuthorUserID {
					continue Outer
				}
			}

			args = append(args, obj.ActivityAuthorUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ActivityAuthorUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ActivityAuthorUserExaminationsActivitiesReviews = append(foreign.R.ActivityAuthorUserExaminationsActivitiesReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActivityAuthorUserID == foreign.ID {
				local.R.ActivityAuthorUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ActivityAuthorUserExaminationsActivitiesReviews = append(foreign.R.ActivityAuthorUserExaminationsActivitiesReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadActivityReviewerUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationsActivitiesReviewL) LoadActivityReviewerUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivitiesReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivitiesReview
	var object *ExaminationsActivitiesReview

	if singular {
		object = maybeExaminationsActivitiesReview.(*ExaminationsActivitiesReview)
	} else {
		slice = *maybeExaminationsActivitiesReview.(*[]*ExaminationsActivitiesReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivitiesReviewR{}
		}
		args = append(args, object.ActivityReviewerUserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivitiesReviewR{}
			}

			for _, a := range args {
				if a == obj.ActivityReviewerUserID {
					continue Outer
				}
			}

			args = append(args, obj.ActivityReviewerUserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ActivityReviewerUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ActivityReviewerUserExaminationsActivitiesReviews = append(foreign.R.ActivityReviewerUserExaminationsActivitiesReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ActivityReviewerUserID == foreign.ID {
				local.R.ActivityReviewerUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ActivityReviewerUserExaminationsActivitiesReviews = append(foreign.R.ActivityReviewerUserExaminationsActivitiesReviews, local)
				break
			}
		}
	}

	return nil
}

// LoadExaminationActivity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationsActivitiesReviewL) LoadExaminationActivity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExaminationsActivitiesReview interface{}, mods queries.Applicator) error {
	var slice []*ExaminationsActivitiesReview
	var object *ExaminationsActivitiesReview

	if singular {
		object = maybeExaminationsActivitiesReview.(*ExaminationsActivitiesReview)
	} else {
		slice = *maybeExaminationsActivitiesReview.(*[]*ExaminationsActivitiesReview)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationsActivitiesReviewR{}
		}
		args = append(args, object.ExaminationActivitiesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationsActivitiesReviewR{}
			}

			for _, a := range args {
				if a == obj.ExaminationActivitiesID {
					continue Outer
				}
			}

			args = append(args, obj.ExaminationActivitiesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examination_activities`),
		qm.WhereIn(`examination_activities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExaminationActivity")
	}

	var resultSlice []*ExaminationActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExaminationActivity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for examination_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination_activities")
	}

	if len(examinationsActivitiesReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExaminationActivity = foreign
		if foreign.R == nil {
			foreign.R = &examinationActivityR{}
		}
		foreign.R.ExaminationsActivitiesReviews = append(foreign.R.ExaminationsActivitiesReviews, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExaminationActivitiesID == foreign.ID {
				local.R.ExaminationActivity = foreign
				if foreign.R == nil {
					foreign.R = &examinationActivityR{}
				}
				foreign.R.ExaminationsActivitiesReviews = append(foreign.R.ExaminationsActivitiesReviews, local)
				break
			}
		}
	}

	return nil
}

// SetExaminationsActivityReview of the examinationsActivitiesReview to the related item.
// Sets o.R.ExaminationsActivityReview to related.
// Adds o to related.R.ExaminationsActivitiesReviews.
func (o *ExaminationsActivitiesReview) SetExaminationsActivityReview(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ExaminationsActivityReview) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"examinations_activity_reviews_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ExaminationsActivityReviewsID, related.ID)
	if o.R == nil {
		o.R = &examinationsActivitiesReviewR{
			ExaminationsActivityReview: related,
		}
	} else {
		o.R.ExaminationsActivityReview = related
	}

	if related.R == nil {
		related.R = &examinationsActivityReviewR{
			ExaminationsActivitiesReviews: ExaminationsActivitiesReviewSlice{o},
		}
	} else {
		related.R.ExaminationsActivitiesReviews = append(related.R.ExaminationsActivitiesReviews, o)
	}

	return nil
}

// RemoveExaminationsActivityReview relationship.
// Sets o.R.ExaminationsActivityReview to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ExaminationsActivitiesReview) RemoveExaminationsActivityReview(ctx context.Context, exec boil.ContextExecutor, related *ExaminationsActivityReview) error {
	var err error

	queries.SetScanner(&o.ExaminationsActivityReviewsID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("examinations_activity_reviews_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ExaminationsActivityReview = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ExaminationsActivitiesReviews {
		if queries.Equal(o.ExaminationsActivityReviewsID, ri.ExaminationsActivityReviewsID) {
			continue
		}

		ln := len(related.R.ExaminationsActivitiesReviews)
		if ln > 1 && i < ln-1 {
			related.R.ExaminationsActivitiesReviews[i] = related.R.ExaminationsActivitiesReviews[ln-1]
		}
		related.R.ExaminationsActivitiesReviews = related.R.ExaminationsActivitiesReviews[:ln-1]
		break
	}
	return nil
}

// SetActivityAuthorUser of the examinationsActivitiesReview to the related item.
// Sets o.R.ActivityAuthorUser to related.
// Adds o to related.R.ActivityAuthorUserExaminationsActivitiesReviews.
func (o *ExaminationsActivitiesReview) SetActivityAuthorUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"activity_author_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActivityAuthorUserID = related.ID
	if o.R == nil {
		o.R = &examinationsActivitiesReviewR{
			ActivityAuthorUser: related,
		}
	} else {
		o.R.ActivityAuthorUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ActivityAuthorUserExaminationsActivitiesReviews: ExaminationsActivitiesReviewSlice{o},
		}
	} else {
		related.R.ActivityAuthorUserExaminationsActivitiesReviews = append(related.R.ActivityAuthorUserExaminationsActivitiesReviews, o)
	}

	return nil
}

// SetActivityReviewerUser of the examinationsActivitiesReview to the related item.
// Sets o.R.ActivityReviewerUser to related.
// Adds o to related.R.ActivityReviewerUserExaminationsActivitiesReviews.
func (o *ExaminationsActivitiesReview) SetActivityReviewerUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"activity_reviewer_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ActivityReviewerUserID = related.ID
	if o.R == nil {
		o.R = &examinationsActivitiesReviewR{
			ActivityReviewerUser: related,
		}
	} else {
		o.R.ActivityReviewerUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ActivityReviewerUserExaminationsActivitiesReviews: ExaminationsActivitiesReviewSlice{o},
		}
	} else {
		related.R.ActivityReviewerUserExaminationsActivitiesReviews = append(related.R.ActivityReviewerUserExaminationsActivitiesReviews, o)
	}

	return nil
}

// SetExaminationActivity of the examinationsActivitiesReview to the related item.
// Sets o.R.ExaminationActivity to related.
// Adds o to related.R.ExaminationsActivitiesReviews.
func (o *ExaminationsActivitiesReview) SetExaminationActivity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ExaminationActivity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"examination_activities_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationsActivitiesReviewPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExaminationActivitiesID = related.ID
	if o.R == nil {
		o.R = &examinationsActivitiesReviewR{
			ExaminationActivity: related,
		}
	} else {
		o.R.ExaminationActivity = related
	}

	if related.R == nil {
		related.R = &examinationActivityR{
			ExaminationsActivitiesReviews: ExaminationsActivitiesReviewSlice{o},
		}
	} else {
		related.R.ExaminationsActivitiesReviews = append(related.R.ExaminationsActivitiesReviews, o)
	}

	return nil
}

// ExaminationsActivitiesReviews retrieves all the records using an executor.
func ExaminationsActivitiesReviews(mods ...qm.QueryMod) examinationsActivitiesReviewQuery {
	mods = append(mods, qm.From("\"examinations_activities_reviews\""))
	return examinationsActivitiesReviewQuery{NewQuery(mods...)}
}

// FindExaminationsActivitiesReview retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExaminationsActivitiesReview(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExaminationsActivitiesReview, error) {
	examinationsActivitiesReviewObj := &ExaminationsActivitiesReview{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"examinations_activities_reviews\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examinationsActivitiesReviewObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from examinations_activities_reviews")
	}

	if err = examinationsActivitiesReviewObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examinationsActivitiesReviewObj, err
	}

	return examinationsActivitiesReviewObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExaminationsActivitiesReview) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations_activities_reviews provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationsActivitiesReviewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examinationsActivitiesReviewInsertCacheMut.RLock()
	cache, cached := examinationsActivitiesReviewInsertCache[key]
	examinationsActivitiesReviewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examinationsActivitiesReviewAllColumns,
			examinationsActivitiesReviewColumnsWithDefault,
			examinationsActivitiesReviewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"examinations_activities_reviews\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"examinations_activities_reviews\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into examinations_activities_reviews")
	}

	if !cached {
		examinationsActivitiesReviewInsertCacheMut.Lock()
		examinationsActivitiesReviewInsertCache[key] = cache
		examinationsActivitiesReviewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExaminationsActivitiesReview.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExaminationsActivitiesReview) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examinationsActivitiesReviewUpdateCacheMut.RLock()
	cache, cached := examinationsActivitiesReviewUpdateCache[key]
	examinationsActivitiesReviewUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examinationsActivitiesReviewAllColumns,
			examinationsActivitiesReviewPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update examinations_activities_reviews, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examinationsActivitiesReviewPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, append(wl, examinationsActivitiesReviewPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update examinations_activities_reviews row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for examinations_activities_reviews")
	}

	if !cached {
		examinationsActivitiesReviewUpdateCacheMut.Lock()
		examinationsActivitiesReviewUpdateCache[key] = cache
		examinationsActivitiesReviewUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examinationsActivitiesReviewQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for examinations_activities_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for examinations_activities_reviews")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExaminationsActivitiesReviewSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivitiesReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"examinations_activities_reviews\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examinationsActivitiesReviewPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examinationsActivitiesReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examinationsActivitiesReview")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExaminationsActivitiesReview) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations_activities_reviews provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationsActivitiesReviewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examinationsActivitiesReviewUpsertCacheMut.RLock()
	cache, cached := examinationsActivitiesReviewUpsertCache[key]
	examinationsActivitiesReviewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			examinationsActivitiesReviewAllColumns,
			examinationsActivitiesReviewColumnsWithDefault,
			examinationsActivitiesReviewColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			examinationsActivitiesReviewAllColumns,
			examinationsActivitiesReviewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert examinations_activities_reviews, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(examinationsActivitiesReviewPrimaryKeyColumns))
			copy(conflict, examinationsActivitiesReviewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"examinations_activities_reviews\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examinationsActivitiesReviewType, examinationsActivitiesReviewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert examinations_activities_reviews")
	}

	if !cached {
		examinationsActivitiesReviewUpsertCacheMut.Lock()
		examinationsActivitiesReviewUpsertCache[key] = cache
		examinationsActivitiesReviewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExaminationsActivitiesReview record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExaminationsActivitiesReview) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExaminationsActivitiesReview provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examinationsActivitiesReviewPrimaryKeyMapping)
	sql := "DELETE FROM \"examinations_activities_reviews\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from examinations_activities_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for examinations_activities_reviews")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examinationsActivitiesReviewQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examinationsActivitiesReviewQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinations_activities_reviews")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations_activities_reviews")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExaminationsActivitiesReviewSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examinationsActivitiesReviewBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivitiesReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"examinations_activities_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationsActivitiesReviewPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinationsActivitiesReview slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations_activities_reviews")
	}

	if len(examinationsActivitiesReviewAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExaminationsActivitiesReview) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExaminationsActivitiesReview(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExaminationsActivitiesReviewSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExaminationsActivitiesReviewSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationsActivitiesReviewPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"examinations_activities_reviews\".* FROM \"examinations_activities_reviews\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationsActivitiesReviewPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExaminationsActivitiesReviewSlice")
	}

	*o = slice

	return nil
}

// ExaminationsActivitiesReviewExists checks if the ExaminationsActivitiesReview row exists.
func ExaminationsActivitiesReviewExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"examinations_activities_reviews\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if examinations_activities_reviews exists")
	}

	return exists, nil
}
