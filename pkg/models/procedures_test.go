// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProcedures(t *testing.T) {
	t.Parallel()

	query := Procedures()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProceduresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProceduresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Procedures().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProceduresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProcedureSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProceduresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProcedureExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Procedure exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProcedureExists to return true, but got false.")
	}
}

func testProceduresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	procedureFound, err := FindProcedure(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if procedureFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProceduresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Procedures().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProceduresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Procedures().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProceduresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	procedureOne := &Procedure{}
	procedureTwo := &Procedure{}
	if err = randomize.Struct(seed, procedureOne, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}
	if err = randomize.Struct(seed, procedureTwo, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = procedureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = procedureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Procedures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProceduresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	procedureOne := &Procedure{}
	procedureTwo := &Procedure{}
	if err = randomize.Struct(seed, procedureOne, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}
	if err = randomize.Struct(seed, procedureTwo, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = procedureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = procedureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func procedureBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func procedureAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Procedure) error {
	*o = Procedure{}
	return nil
}

func testProceduresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Procedure{}
	o := &Procedure{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, procedureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Procedure object: %s", err)
	}

	AddProcedureHook(boil.BeforeInsertHook, procedureBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	procedureBeforeInsertHooks = []ProcedureHook{}

	AddProcedureHook(boil.AfterInsertHook, procedureAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	procedureAfterInsertHooks = []ProcedureHook{}

	AddProcedureHook(boil.AfterSelectHook, procedureAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	procedureAfterSelectHooks = []ProcedureHook{}

	AddProcedureHook(boil.BeforeUpdateHook, procedureBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	procedureBeforeUpdateHooks = []ProcedureHook{}

	AddProcedureHook(boil.AfterUpdateHook, procedureAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	procedureAfterUpdateHooks = []ProcedureHook{}

	AddProcedureHook(boil.BeforeDeleteHook, procedureBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	procedureBeforeDeleteHooks = []ProcedureHook{}

	AddProcedureHook(boil.AfterDeleteHook, procedureAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	procedureAfterDeleteHooks = []ProcedureHook{}

	AddProcedureHook(boil.BeforeUpsertHook, procedureBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	procedureBeforeUpsertHooks = []ProcedureHook{}

	AddProcedureHook(boil.AfterUpsertHook, procedureAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	procedureAfterUpsertHooks = []ProcedureHook{}
}

func testProceduresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProceduresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(procedureColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProcedureOneToOneLogbookEntryUsingLogbookEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign LogbookEntry
	var local Procedure

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.ProcedureID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LogbookEntry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ProcedureID, foreign.ProcedureID) {
		t.Errorf("want: %v, got %v", foreign.ProcedureID, check.ProcedureID)
	}

	slice := ProcedureSlice{&local}
	if err = local.L.LoadLogbookEntry(ctx, tx, false, (*[]*Procedure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LogbookEntry = nil
	if err = local.L.LoadLogbookEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LogbookEntry == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProcedureOneToOneSetOpLogbookEntryUsingLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Procedure
	var b, c LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LogbookEntry{&b, &c} {
		err = a.SetLogbookEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LogbookEntry != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Procedure != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.ProcedureID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.ProcedureID))
		reflect.Indirect(reflect.ValueOf(&x.ProcedureID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.ProcedureID) {
			t.Error("foreign key was wrong value", a.ID, x.ProcedureID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testProcedureOneToOneRemoveOpLogbookEntryUsingLogbookEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Procedure
	var b LogbookEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLogbookEntry(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLogbookEntry(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LogbookEntry().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LogbookEntry != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.ProcedureID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Procedure != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProcedureToOneOrganizationalUnitUsingOrganizationalUnit(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Procedure
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrganizationalUnitID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrganizationalUnit().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProcedureSlice{&local}
	if err = local.L.LoadOrganizationalUnit(ctx, tx, false, (*[]*Procedure)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrganizationalUnit == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrganizationalUnit = nil
	if err = local.L.LoadOrganizationalUnit(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrganizationalUnit == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProcedureToOneSetOpOrganizationalUnitUsingOrganizationalUnit(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Procedure
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetOrganizationalUnit(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrganizationalUnit != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Procedures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganizationalUnitID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationalUnitID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganizationalUnitID))
		reflect.Indirect(reflect.ValueOf(&a.OrganizationalUnitID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganizationalUnitID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationalUnitID, x.ID)
		}
	}
}

func testProceduresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProceduresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProcedureSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProceduresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Procedures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	procedureDBTypes = map[string]string{`ID`: `uuid`, `DisplayName`: `character varying`, `CreatedAt`: `timestamp with time zone`, `Annotations`: `jsonb`, `OrganizationalUnitID`: `uuid`}
	_                = bytes.MinRead
)

func testProceduresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(procedurePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(procedureAllColumns) == len(procedurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProceduresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(procedureAllColumns) == len(procedurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Procedure{}
	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, procedureDBTypes, true, procedurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(procedureAllColumns, procedurePrimaryKeyColumns) {
		fields = procedureAllColumns
	} else {
		fields = strmangle.SetComplement(
			procedureAllColumns,
			procedurePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProcedureSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProceduresUpsert(t *testing.T) {
	t.Parallel()

	if len(procedureAllColumns) == len(procedurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Procedure{}
	if err = randomize.Struct(seed, &o, procedureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Procedure: %s", err)
	}

	count, err := Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, procedureDBTypes, false, procedurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Procedure: %s", err)
	}

	count, err = Procedures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
