// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserOrganizationalUnitRoles(t *testing.T) {
	t.Parallel()

	query := UserOrganizationalUnitRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserOrganizationalUnitRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOrganizationalUnitRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserOrganizationalUnitRoles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOrganizationalUnitRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserOrganizationalUnitRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserOrganizationalUnitRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserOrganizationalUnitRoleExists(ctx, tx, o.UnitID, o.UserID, o.RoleID)
	if err != nil {
		t.Errorf("Unable to check if UserOrganizationalUnitRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserOrganizationalUnitRoleExists to return true, but got false.")
	}
}

func testUserOrganizationalUnitRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userOrganizationalUnitRoleFound, err := FindUserOrganizationalUnitRole(ctx, tx, o.UnitID, o.UserID, o.RoleID)
	if err != nil {
		t.Error(err)
	}

	if userOrganizationalUnitRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserOrganizationalUnitRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserOrganizationalUnitRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserOrganizationalUnitRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserOrganizationalUnitRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserOrganizationalUnitRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userOrganizationalUnitRoleOne := &UserOrganizationalUnitRole{}
	userOrganizationalUnitRoleTwo := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, userOrganizationalUnitRoleOne, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}
	if err = randomize.Struct(seed, userOrganizationalUnitRoleTwo, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOrganizationalUnitRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userOrganizationalUnitRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserOrganizationalUnitRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserOrganizationalUnitRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userOrganizationalUnitRoleOne := &UserOrganizationalUnitRole{}
	userOrganizationalUnitRoleTwo := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, userOrganizationalUnitRoleOne, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}
	if err = randomize.Struct(seed, userOrganizationalUnitRoleTwo, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userOrganizationalUnitRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userOrganizationalUnitRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userOrganizationalUnitRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func userOrganizationalUnitRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserOrganizationalUnitRole) error {
	*o = UserOrganizationalUnitRole{}
	return nil
}

func testUserOrganizationalUnitRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserOrganizationalUnitRole{}
	o := &UserOrganizationalUnitRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole object: %s", err)
	}

	AddUserOrganizationalUnitRoleHook(boil.BeforeInsertHook, userOrganizationalUnitRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleBeforeInsertHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.AfterInsertHook, userOrganizationalUnitRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleAfterInsertHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.AfterSelectHook, userOrganizationalUnitRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleAfterSelectHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.BeforeUpdateHook, userOrganizationalUnitRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleBeforeUpdateHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.AfterUpdateHook, userOrganizationalUnitRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleAfterUpdateHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.BeforeDeleteHook, userOrganizationalUnitRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleBeforeDeleteHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.AfterDeleteHook, userOrganizationalUnitRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleAfterDeleteHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.BeforeUpsertHook, userOrganizationalUnitRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleBeforeUpsertHooks = []UserOrganizationalUnitRoleHook{}

	AddUserOrganizationalUnitRoleHook(boil.AfterUpsertHook, userOrganizationalUnitRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userOrganizationalUnitRoleAfterUpsertHooks = []UserOrganizationalUnitRoleHook{}
}

func testUserOrganizationalUnitRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserOrganizationalUnitRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userOrganizationalUnitRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserOrganizationalUnitRoleToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserOrganizationalUnitRole
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserOrganizationalUnitRoleSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*UserOrganizationalUnitRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserOrganizationalUnitRoleToOneOrganizationalUnitUsingUnit(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserOrganizationalUnitRole
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UnitID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Unit().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserOrganizationalUnitRoleSlice{&local}
	if err = local.L.LoadUnit(ctx, tx, false, (*[]*UserOrganizationalUnitRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Unit == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Unit = nil
	if err = local.L.LoadUnit(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Unit == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserOrganizationalUnitRoleToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserOrganizationalUnitRole
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserOrganizationalUnitRoleSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserOrganizationalUnitRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserOrganizationalUnitRoleToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserOrganizationalUnitRole
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userOrganizationalUnitRoleDBTypes, false, strmangle.SetComplement(userOrganizationalUnitRolePrimaryKeyColumns, userOrganizationalUnitRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserOrganizationalUnitRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		if exists, err := UserOrganizationalUnitRoleExists(ctx, tx, a.UnitID, a.UserID, a.RoleID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserOrganizationalUnitRoleToOneSetOpOrganizationalUnitUsingUnit(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserOrganizationalUnitRole
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userOrganizationalUnitRoleDBTypes, false, strmangle.SetComplement(userOrganizationalUnitRolePrimaryKeyColumns, userOrganizationalUnitRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetUnit(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Unit != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UnitUserOrganizationalUnitRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UnitID != x.ID {
			t.Error("foreign key was wrong value", a.UnitID)
		}

		if exists, err := UserOrganizationalUnitRoleExists(ctx, tx, a.UnitID, a.UserID, a.RoleID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testUserOrganizationalUnitRoleToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserOrganizationalUnitRole
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userOrganizationalUnitRoleDBTypes, false, strmangle.SetComplement(userOrganizationalUnitRolePrimaryKeyColumns, userOrganizationalUnitRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserOrganizationalUnitRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserOrganizationalUnitRoleExists(ctx, tx, a.UnitID, a.UserID, a.RoleID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserOrganizationalUnitRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserOrganizationalUnitRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserOrganizationalUnitRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserOrganizationalUnitRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserOrganizationalUnitRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userOrganizationalUnitRoleDBTypes = map[string]string{`UnitID`: `uuid`, `UserID`: `uuid`, `RoleID`: `integer`}
	_                                 = bytes.MinRead
)

func testUserOrganizationalUnitRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userOrganizationalUnitRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userOrganizationalUnitRoleAllColumns) == len(userOrganizationalUnitRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserOrganizationalUnitRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userOrganizationalUnitRoleAllColumns) == len(userOrganizationalUnitRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userOrganizationalUnitRoleDBTypes, true, userOrganizationalUnitRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userOrganizationalUnitRoleAllColumns, userOrganizationalUnitRolePrimaryKeyColumns) {
		fields = userOrganizationalUnitRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			userOrganizationalUnitRoleAllColumns,
			userOrganizationalUnitRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserOrganizationalUnitRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserOrganizationalUnitRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(userOrganizationalUnitRoleAllColumns) == len(userOrganizationalUnitRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserOrganizationalUnitRole{}
	if err = randomize.Struct(seed, &o, userOrganizationalUnitRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserOrganizationalUnitRole: %s", err)
	}

	count, err := UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userOrganizationalUnitRoleDBTypes, false, userOrganizationalUnitRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserOrganizationalUnitRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserOrganizationalUnitRole: %s", err)
	}

	count, err = UserOrganizationalUnitRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
