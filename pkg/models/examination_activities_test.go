// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExaminationActivities(t *testing.T) {
	t.Parallel()

	query := ExaminationActivities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExaminationActivitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationActivitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExaminationActivities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationActivitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationActivitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExaminationActivitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExaminationActivityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ExaminationActivity exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExaminationActivityExists to return true, but got false.")
	}
}

func testExaminationActivitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	examinationActivityFound, err := FindExaminationActivity(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if examinationActivityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExaminationActivitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExaminationActivities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExaminationActivitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExaminationActivities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExaminationActivitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	examinationActivityOne := &ExaminationActivity{}
	examinationActivityTwo := &ExaminationActivity{}
	if err = randomize.Struct(seed, examinationActivityOne, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationActivityTwo, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExaminationActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExaminationActivitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	examinationActivityOne := &ExaminationActivity{}
	examinationActivityTwo := &ExaminationActivity{}
	if err = randomize.Struct(seed, examinationActivityOne, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}
	if err = randomize.Struct(seed, examinationActivityTwo, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = examinationActivityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = examinationActivityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func examinationActivityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func examinationActivityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExaminationActivity) error {
	*o = ExaminationActivity{}
	return nil
}

func testExaminationActivitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExaminationActivity{}
	o := &ExaminationActivity{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity object: %s", err)
	}

	AddExaminationActivityHook(boil.BeforeInsertHook, examinationActivityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	examinationActivityBeforeInsertHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.AfterInsertHook, examinationActivityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	examinationActivityAfterInsertHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.AfterSelectHook, examinationActivityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	examinationActivityAfterSelectHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.BeforeUpdateHook, examinationActivityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	examinationActivityBeforeUpdateHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.AfterUpdateHook, examinationActivityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	examinationActivityAfterUpdateHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.BeforeDeleteHook, examinationActivityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	examinationActivityBeforeDeleteHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.AfterDeleteHook, examinationActivityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	examinationActivityAfterDeleteHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.BeforeUpsertHook, examinationActivityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	examinationActivityBeforeUpsertHooks = []ExaminationActivityHook{}

	AddExaminationActivityHook(boil.AfterUpsertHook, examinationActivityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	examinationActivityAfterUpsertHooks = []ExaminationActivityHook{}
}

func testExaminationActivitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationActivitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(examinationActivityColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExaminationActivityToManyExaminationsActivitiesReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b, c ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationsActivitiesReviewDBTypes, false, examinationsActivitiesReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ExaminationActivitiesID = a.ID
	c.ExaminationActivitiesID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ExaminationsActivitiesReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ExaminationActivitiesID == b.ExaminationActivitiesID {
			bFound = true
		}
		if v.ExaminationActivitiesID == c.ExaminationActivitiesID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExaminationActivitySlice{&a}
	if err = a.L.LoadExaminationsActivitiesReviews(ctx, tx, false, (*[]*ExaminationActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ExaminationsActivitiesReviews = nil
	if err = a.L.LoadExaminationsActivitiesReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExaminationsActivitiesReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExaminationActivityToManyAddOpExaminationsActivitiesReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b, c, d, e ExaminationsActivitiesReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExaminationsActivitiesReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, examinationsActivitiesReviewDBTypes, false, strmangle.SetComplement(examinationsActivitiesReviewPrimaryKeyColumns, examinationsActivitiesReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExaminationsActivitiesReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExaminationsActivitiesReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ExaminationActivitiesID {
			t.Error("foreign key was wrong value", a.ID, first.ExaminationActivitiesID)
		}
		if a.ID != second.ExaminationActivitiesID {
			t.Error("foreign key was wrong value", a.ID, second.ExaminationActivitiesID)
		}

		if first.R.ExaminationActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ExaminationActivity != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ExaminationsActivitiesReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ExaminationsActivitiesReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ExaminationsActivitiesReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testExaminationActivityToOneExaminationUsingExamination(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationActivity
	var foreign Examination

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ExaminationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Examination().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationActivitySlice{&local}
	if err = local.L.LoadExamination(ctx, tx, false, (*[]*ExaminationActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Examination == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Examination = nil
	if err = local.L.LoadExamination(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Examination == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationActivityToOneUserUsingResidentUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationActivityDBTypes, false, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResidentUserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ResidentUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationActivitySlice{&local}
	if err = local.L.LoadResidentUser(ctx, tx, false, (*[]*ExaminationActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ResidentUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ResidentUser = nil
	if err = local.L.LoadResidentUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ResidentUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationActivityToOneUserUsingSupervisorUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExaminationActivity
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SupervisorUserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SupervisorUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ExaminationActivitySlice{&local}
	if err = local.L.LoadSupervisorUser(ctx, tx, false, (*[]*ExaminationActivity)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SupervisorUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SupervisorUser = nil
	if err = local.L.LoadSupervisorUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SupervisorUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testExaminationActivityToOneSetOpExaminationUsingExamination(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b, c Examination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Examination{&b, &c} {
		err = a.SetExamination(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Examination != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ExaminationActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ExaminationID != x.ID {
			t.Error("foreign key was wrong value", a.ExaminationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExaminationID))
		reflect.Indirect(reflect.ValueOf(&a.ExaminationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ExaminationID != x.ID {
			t.Error("foreign key was wrong value", a.ExaminationID, x.ID)
		}
	}
}
func testExaminationActivityToOneSetOpUserUsingResidentUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetResidentUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ResidentUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResidentUserExaminationActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResidentUserID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResidentUserID))
		reflect.Indirect(reflect.ValueOf(&a.ResidentUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ResidentUserID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentUserID, x.ID)
		}
	}
}
func testExaminationActivityToOneSetOpUserUsingSupervisorUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetSupervisorUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SupervisorUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupervisorUserExaminationActivities[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SupervisorUserID, x.ID) {
			t.Error("foreign key was wrong value", a.SupervisorUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupervisorUserID))
		reflect.Indirect(reflect.ValueOf(&a.SupervisorUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SupervisorUserID, x.ID) {
			t.Error("foreign key was wrong value", a.SupervisorUserID, x.ID)
		}
	}
}

func testExaminationActivityToOneRemoveOpUserUsingSupervisorUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExaminationActivity
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, examinationActivityDBTypes, false, strmangle.SetComplement(examinationActivityPrimaryKeyColumns, examinationActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSupervisorUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSupervisorUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SupervisorUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SupervisorUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SupervisorUserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SupervisorUserExaminationActivities) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testExaminationActivitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationActivitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExaminationActivitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExaminationActivitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExaminationActivities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	examinationActivityDBTypes = map[string]string{`ID`: `uuid`, `ResidentUserID`: `uuid`, `SupervisorUserID`: `uuid`, `ExaminationID`: `uuid`, `DisplayName`: `character varying`, `CreatedAt`: `timestamp with time zone`, `Annotations`: `jsonb`}
	_                          = bytes.MinRead
)

func testExaminationActivitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(examinationActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(examinationActivityAllColumns) == len(examinationActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExaminationActivitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(examinationActivityAllColumns) == len(examinationActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExaminationActivity{}
	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, examinationActivityDBTypes, true, examinationActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(examinationActivityAllColumns, examinationActivityPrimaryKeyColumns) {
		fields = examinationActivityAllColumns
	} else {
		fields = strmangle.SetComplement(
			examinationActivityAllColumns,
			examinationActivityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExaminationActivitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExaminationActivitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(examinationActivityAllColumns) == len(examinationActivityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExaminationActivity{}
	if err = randomize.Struct(seed, &o, examinationActivityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExaminationActivity: %s", err)
	}

	count, err := ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, examinationActivityDBTypes, false, examinationActivityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExaminationActivity struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExaminationActivity: %s", err)
	}

	count, err = ExaminationActivities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
