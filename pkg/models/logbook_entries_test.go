// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLogbookEntries(t *testing.T) {
	t.Parallel()

	query := LogbookEntries()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLogbookEntriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogbookEntriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LogbookEntries().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogbookEntriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LogbookEntrySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLogbookEntriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LogbookEntryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LogbookEntry exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LogbookEntryExists to return true, but got false.")
	}
}

func testLogbookEntriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	logbookEntryFound, err := FindLogbookEntry(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if logbookEntryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLogbookEntriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LogbookEntries().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLogbookEntriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LogbookEntries().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLogbookEntriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	logbookEntryOne := &LogbookEntry{}
	logbookEntryTwo := &LogbookEntry{}
	if err = randomize.Struct(seed, logbookEntryOne, logbookEntryDBTypes, false, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, logbookEntryTwo, logbookEntryDBTypes, false, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = logbookEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = logbookEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LogbookEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLogbookEntriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	logbookEntryOne := &LogbookEntry{}
	logbookEntryTwo := &LogbookEntry{}
	if err = randomize.Struct(seed, logbookEntryOne, logbookEntryDBTypes, false, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err = randomize.Struct(seed, logbookEntryTwo, logbookEntryDBTypes, false, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = logbookEntryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = logbookEntryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func logbookEntryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func logbookEntryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LogbookEntry) error {
	*o = LogbookEntry{}
	return nil
}

func testLogbookEntriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LogbookEntry{}
	o := &LogbookEntry{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LogbookEntry object: %s", err)
	}

	AddLogbookEntryHook(boil.BeforeInsertHook, logbookEntryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	logbookEntryBeforeInsertHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.AfterInsertHook, logbookEntryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	logbookEntryAfterInsertHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.AfterSelectHook, logbookEntryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	logbookEntryAfterSelectHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.BeforeUpdateHook, logbookEntryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	logbookEntryBeforeUpdateHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.AfterUpdateHook, logbookEntryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	logbookEntryAfterUpdateHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.BeforeDeleteHook, logbookEntryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	logbookEntryBeforeDeleteHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.AfterDeleteHook, logbookEntryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	logbookEntryAfterDeleteHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.BeforeUpsertHook, logbookEntryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	logbookEntryBeforeUpsertHooks = []LogbookEntryHook{}

	AddLogbookEntryHook(boil.AfterUpsertHook, logbookEntryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	logbookEntryAfterUpsertHooks = []LogbookEntryHook{}
}

func testLogbookEntriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogbookEntriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(logbookEntryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLogbookEntryOneToOneActivityUsingActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Activity
	var local LogbookEntry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, activityDBTypes, true, activityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Activity struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.LogbookEntryID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Activity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.LogbookEntryID, foreign.LogbookEntryID) {
		t.Errorf("want: %v, got %v", foreign.LogbookEntryID, check.LogbookEntryID)
	}

	slice := LogbookEntrySlice{&local}
	if err = local.L.LoadActivity(ctx, tx, false, (*[]*LogbookEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Activity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Activity = nil
	if err = local.L.LoadActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Activity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLogbookEntryOneToOneSetOpActivityUsingActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b, c Activity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Activity{&b, &c} {
		err = a.SetActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Activity != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.LogbookEntry != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.LogbookEntryID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.LogbookEntryID))
		reflect.Indirect(reflect.ValueOf(&x.LogbookEntryID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.LogbookEntryID) {
			t.Error("foreign key was wrong value", a.ID, x.LogbookEntryID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testLogbookEntryOneToOneRemoveOpActivityUsingActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b Activity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, activityDBTypes, false, strmangle.SetComplement(activityPrimaryKeyColumns, activityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetActivity(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveActivity(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Activity().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Activity != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.LogbookEntryID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.LogbookEntry != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testLogbookEntryToOneExaminationUsingExamination(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LogbookEntry
	var foreign Examination

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, examinationDBTypes, false, examinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Examination struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ExaminationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Examination().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LogbookEntrySlice{&local}
	if err = local.L.LoadExamination(ctx, tx, false, (*[]*LogbookEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Examination == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Examination = nil
	if err = local.L.LoadExamination(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Examination == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLogbookEntryToOneOrthopedicSurgeryActivityUsingOrthopedicSurgery(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LogbookEntry
	var foreign OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrthopedicSurgeryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgery().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LogbookEntrySlice{&local}
	if err = local.L.LoadOrthopedicSurgery(ctx, tx, false, (*[]*LogbookEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgery == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgery = nil
	if err = local.L.LoadOrthopedicSurgery(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgery == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLogbookEntryToOneProcedureUsingProcedure(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LogbookEntry
	var foreign Procedure

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, procedureDBTypes, false, procedureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Procedure struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProcedureID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Procedure().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LogbookEntrySlice{&local}
	if err = local.L.LoadProcedure(ctx, tx, false, (*[]*LogbookEntry)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Procedure == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Procedure = nil
	if err = local.L.LoadProcedure(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Procedure == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLogbookEntryToOneSetOpExaminationUsingExamination(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b, c Examination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Examination{&b, &c} {
		err = a.SetExamination(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Examination != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LogbookEntry != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ExaminationID, x.ID) {
			t.Error("foreign key was wrong value", a.ExaminationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExaminationID))
		reflect.Indirect(reflect.ValueOf(&a.ExaminationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ExaminationID, x.ID) {
			t.Error("foreign key was wrong value", a.ExaminationID, x.ID)
		}
	}
}

func testLogbookEntryToOneRemoveOpExaminationUsingExamination(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b Examination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, examinationDBTypes, false, strmangle.SetComplement(examinationPrimaryKeyColumns, examinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetExamination(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveExamination(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Examination().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Examination != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ExaminationID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.LogbookEntry != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testLogbookEntryToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrthopedicSurgeryActivity{&b, &c} {
		err = a.SetOrthopedicSurgery(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgery != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrthopedicSurgeryLogbookEntry != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrthopedicSurgeryID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrthopedicSurgeryID))
		reflect.Indirect(reflect.ValueOf(&a.OrthopedicSurgeryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrthopedicSurgeryID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryID, x.ID)
		}
	}
}

func testLogbookEntryToOneRemoveOpOrthopedicSurgeryActivityUsingOrthopedicSurgery(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrthopedicSurgery(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrthopedicSurgery(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrthopedicSurgery().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrthopedicSurgery != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrthopedicSurgeryID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.OrthopedicSurgeryLogbookEntry != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testLogbookEntryToOneSetOpProcedureUsingProcedure(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b, c Procedure

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Procedure{&b, &c} {
		err = a.SetProcedure(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Procedure != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LogbookEntry != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProcedureID, x.ID) {
			t.Error("foreign key was wrong value", a.ProcedureID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProcedureID))
		reflect.Indirect(reflect.ValueOf(&a.ProcedureID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProcedureID, x.ID) {
			t.Error("foreign key was wrong value", a.ProcedureID, x.ID)
		}
	}
}

func testLogbookEntryToOneRemoveOpProcedureUsingProcedure(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LogbookEntry
	var b Procedure

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, logbookEntryDBTypes, false, strmangle.SetComplement(logbookEntryPrimaryKeyColumns, logbookEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, procedureDBTypes, false, strmangle.SetComplement(procedurePrimaryKeyColumns, procedureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProcedure(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProcedure(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Procedure().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Procedure != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProcedureID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.LogbookEntry != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testLogbookEntriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLogbookEntriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LogbookEntrySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLogbookEntriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LogbookEntries().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	logbookEntryDBTypes = map[string]string{`ID`: `uuid`, `OccurredAt`: `timestamp with time zone`, `OrthopedicSurgeryID`: `uuid`, `ExaminationID`: `uuid`, `ProcedureID`: `uuid`}
	_                   = bytes.MinRead
)

func testLogbookEntriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(logbookEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(logbookEntryAllColumns) == len(logbookEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLogbookEntriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(logbookEntryAllColumns) == len(logbookEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LogbookEntry{}
	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, logbookEntryDBTypes, true, logbookEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(logbookEntryAllColumns, logbookEntryPrimaryKeyColumns) {
		fields = logbookEntryAllColumns
	} else {
		fields = strmangle.SetComplement(
			logbookEntryAllColumns,
			logbookEntryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LogbookEntrySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLogbookEntriesUpsert(t *testing.T) {
	t.Parallel()

	if len(logbookEntryAllColumns) == len(logbookEntryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LogbookEntry{}
	if err = randomize.Struct(seed, &o, logbookEntryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LogbookEntry: %s", err)
	}

	count, err := LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, logbookEntryDBTypes, false, logbookEntryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LogbookEntry struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LogbookEntry: %s", err)
	}

	count, err = LogbookEntries().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
