// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MiniCexEvaluation is an object representing the database table.
type MiniCexEvaluation struct {
	ID            string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	ResidentID    string            `boil:"resident_id" json:"resident_id" toml:"resident_id" yaml:"resident_id"`
	SupervisorID  string            `boil:"supervisor_id" json:"supervisor_id" toml:"supervisor_id" yaml:"supervisor_id"`
	OccurredAt    time.Time         `boil:"occurred_at" json:"occurred_at" toml:"occurred_at" yaml:"occurred_at"`
	Difficulty    string            `boil:"difficulty" json:"difficulty" toml:"difficulty" yaml:"difficulty"`
	Area          string            `boil:"area" json:"area" toml:"area" yaml:"area"`
	Focuses       types.StringArray `boil:"focuses" json:"focuses" toml:"focuses" yaml:"focuses"`
	DepartmentID  null.String       `boil:"department_id" json:"department_id,omitempty" toml:"department_id" yaml:"department_id,omitempty"`
	Annotations   types.JSON        `boil:"annotations" json:"annotations" toml:"annotations" yaml:"annotations"`
	IsEvaluated   bool              `boil:"is_evaluated" json:"is_evaluated" toml:"is_evaluated" yaml:"is_evaluated"`
	CreatedAt     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	InProgress    bool              `boil:"in_progress" json:"in_progress" toml:"in_progress" yaml:"in_progress"`
	ActiveStep    int               `boil:"active_step" json:"active_step" toml:"active_step" yaml:"active_step"`
	CompletedStep int               `boil:"completed_step" json:"completed_step" toml:"completed_step" yaml:"completed_step"`

	R *miniCexEvaluationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L miniCexEvaluationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MiniCexEvaluationColumns = struct {
	ID            string
	ResidentID    string
	SupervisorID  string
	OccurredAt    string
	Difficulty    string
	Area          string
	Focuses       string
	DepartmentID  string
	Annotations   string
	IsEvaluated   string
	CreatedAt     string
	InProgress    string
	ActiveStep    string
	CompletedStep string
}{
	ID:            "id",
	ResidentID:    "resident_id",
	SupervisorID:  "supervisor_id",
	OccurredAt:    "occurred_at",
	Difficulty:    "difficulty",
	Area:          "area",
	Focuses:       "focuses",
	DepartmentID:  "department_id",
	Annotations:   "annotations",
	IsEvaluated:   "is_evaluated",
	CreatedAt:     "created_at",
	InProgress:    "in_progress",
	ActiveStep:    "active_step",
	CompletedStep: "completed_step",
}

var MiniCexEvaluationTableColumns = struct {
	ID            string
	ResidentID    string
	SupervisorID  string
	OccurredAt    string
	Difficulty    string
	Area          string
	Focuses       string
	DepartmentID  string
	Annotations   string
	IsEvaluated   string
	CreatedAt     string
	InProgress    string
	ActiveStep    string
	CompletedStep string
}{
	ID:            "mini_cex_evaluations.id",
	ResidentID:    "mini_cex_evaluations.resident_id",
	SupervisorID:  "mini_cex_evaluations.supervisor_id",
	OccurredAt:    "mini_cex_evaluations.occurred_at",
	Difficulty:    "mini_cex_evaluations.difficulty",
	Area:          "mini_cex_evaluations.area",
	Focuses:       "mini_cex_evaluations.focuses",
	DepartmentID:  "mini_cex_evaluations.department_id",
	Annotations:   "mini_cex_evaluations.annotations",
	IsEvaluated:   "mini_cex_evaluations.is_evaluated",
	CreatedAt:     "mini_cex_evaluations.created_at",
	InProgress:    "mini_cex_evaluations.in_progress",
	ActiveStep:    "mini_cex_evaluations.active_step",
	CompletedStep: "mini_cex_evaluations.completed_step",
}

// Generated where

var MiniCexEvaluationWhere = struct {
	ID            whereHelperstring
	ResidentID    whereHelperstring
	SupervisorID  whereHelperstring
	OccurredAt    whereHelpertime_Time
	Difficulty    whereHelperstring
	Area          whereHelperstring
	Focuses       whereHelpertypes_StringArray
	DepartmentID  whereHelpernull_String
	Annotations   whereHelpertypes_JSON
	IsEvaluated   whereHelperbool
	CreatedAt     whereHelpertime_Time
	InProgress    whereHelperbool
	ActiveStep    whereHelperint
	CompletedStep whereHelperint
}{
	ID:            whereHelperstring{field: "\"mini_cex_evaluations\".\"id\""},
	ResidentID:    whereHelperstring{field: "\"mini_cex_evaluations\".\"resident_id\""},
	SupervisorID:  whereHelperstring{field: "\"mini_cex_evaluations\".\"supervisor_id\""},
	OccurredAt:    whereHelpertime_Time{field: "\"mini_cex_evaluations\".\"occurred_at\""},
	Difficulty:    whereHelperstring{field: "\"mini_cex_evaluations\".\"difficulty\""},
	Area:          whereHelperstring{field: "\"mini_cex_evaluations\".\"area\""},
	Focuses:       whereHelpertypes_StringArray{field: "\"mini_cex_evaluations\".\"focuses\""},
	DepartmentID:  whereHelpernull_String{field: "\"mini_cex_evaluations\".\"department_id\""},
	Annotations:   whereHelpertypes_JSON{field: "\"mini_cex_evaluations\".\"annotations\""},
	IsEvaluated:   whereHelperbool{field: "\"mini_cex_evaluations\".\"is_evaluated\""},
	CreatedAt:     whereHelpertime_Time{field: "\"mini_cex_evaluations\".\"created_at\""},
	InProgress:    whereHelperbool{field: "\"mini_cex_evaluations\".\"in_progress\""},
	ActiveStep:    whereHelperint{field: "\"mini_cex_evaluations\".\"active_step\""},
	CompletedStep: whereHelperint{field: "\"mini_cex_evaluations\".\"completed_step\""},
}

// MiniCexEvaluationRels is where relationship names are stored.
var MiniCexEvaluationRels = struct {
	Department        string
	Resident          string
	Supervisor        string
	MiniCexAssessment string
}{
	Department:        "Department",
	Resident:          "Resident",
	Supervisor:        "Supervisor",
	MiniCexAssessment: "MiniCexAssessment",
}

// miniCexEvaluationR is where relationships are stored.
type miniCexEvaluationR struct {
	Department        *OrganizationalUnit `boil:"Department" json:"Department" toml:"Department" yaml:"Department"`
	Resident          *User               `boil:"Resident" json:"Resident" toml:"Resident" yaml:"Resident"`
	Supervisor        *User               `boil:"Supervisor" json:"Supervisor" toml:"Supervisor" yaml:"Supervisor"`
	MiniCexAssessment *Assessment         `boil:"MiniCexAssessment" json:"MiniCexAssessment" toml:"MiniCexAssessment" yaml:"MiniCexAssessment"`
}

// NewStruct creates a new relationship struct
func (*miniCexEvaluationR) NewStruct() *miniCexEvaluationR {
	return &miniCexEvaluationR{}
}

// miniCexEvaluationL is where Load methods for each relationship are stored.
type miniCexEvaluationL struct{}

var (
	miniCexEvaluationAllColumns            = []string{"id", "resident_id", "supervisor_id", "occurred_at", "difficulty", "area", "focuses", "department_id", "annotations", "is_evaluated", "created_at", "in_progress", "active_step", "completed_step"}
	miniCexEvaluationColumnsWithoutDefault = []string{"resident_id", "supervisor_id", "occurred_at", "department_id"}
	miniCexEvaluationColumnsWithDefault    = []string{"id", "difficulty", "area", "focuses", "annotations", "is_evaluated", "created_at", "in_progress", "active_step", "completed_step"}
	miniCexEvaluationPrimaryKeyColumns     = []string{"id"}
)

type (
	// MiniCexEvaluationSlice is an alias for a slice of pointers to MiniCexEvaluation.
	// This should almost always be used instead of []MiniCexEvaluation.
	MiniCexEvaluationSlice []*MiniCexEvaluation
	// MiniCexEvaluationHook is the signature for custom MiniCexEvaluation hook methods
	MiniCexEvaluationHook func(context.Context, boil.ContextExecutor, *MiniCexEvaluation) error

	miniCexEvaluationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	miniCexEvaluationType                 = reflect.TypeOf(&MiniCexEvaluation{})
	miniCexEvaluationMapping              = queries.MakeStructMapping(miniCexEvaluationType)
	miniCexEvaluationPrimaryKeyMapping, _ = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, miniCexEvaluationPrimaryKeyColumns)
	miniCexEvaluationInsertCacheMut       sync.RWMutex
	miniCexEvaluationInsertCache          = make(map[string]insertCache)
	miniCexEvaluationUpdateCacheMut       sync.RWMutex
	miniCexEvaluationUpdateCache          = make(map[string]updateCache)
	miniCexEvaluationUpsertCacheMut       sync.RWMutex
	miniCexEvaluationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var miniCexEvaluationBeforeInsertHooks []MiniCexEvaluationHook
var miniCexEvaluationBeforeUpdateHooks []MiniCexEvaluationHook
var miniCexEvaluationBeforeDeleteHooks []MiniCexEvaluationHook
var miniCexEvaluationBeforeUpsertHooks []MiniCexEvaluationHook

var miniCexEvaluationAfterInsertHooks []MiniCexEvaluationHook
var miniCexEvaluationAfterSelectHooks []MiniCexEvaluationHook
var miniCexEvaluationAfterUpdateHooks []MiniCexEvaluationHook
var miniCexEvaluationAfterDeleteHooks []MiniCexEvaluationHook
var miniCexEvaluationAfterUpsertHooks []MiniCexEvaluationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MiniCexEvaluation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MiniCexEvaluation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MiniCexEvaluation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MiniCexEvaluation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MiniCexEvaluation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MiniCexEvaluation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MiniCexEvaluation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MiniCexEvaluation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MiniCexEvaluation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range miniCexEvaluationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMiniCexEvaluationHook registers your hook function for all future operations.
func AddMiniCexEvaluationHook(hookPoint boil.HookPoint, miniCexEvaluationHook MiniCexEvaluationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		miniCexEvaluationBeforeInsertHooks = append(miniCexEvaluationBeforeInsertHooks, miniCexEvaluationHook)
	case boil.BeforeUpdateHook:
		miniCexEvaluationBeforeUpdateHooks = append(miniCexEvaluationBeforeUpdateHooks, miniCexEvaluationHook)
	case boil.BeforeDeleteHook:
		miniCexEvaluationBeforeDeleteHooks = append(miniCexEvaluationBeforeDeleteHooks, miniCexEvaluationHook)
	case boil.BeforeUpsertHook:
		miniCexEvaluationBeforeUpsertHooks = append(miniCexEvaluationBeforeUpsertHooks, miniCexEvaluationHook)
	case boil.AfterInsertHook:
		miniCexEvaluationAfterInsertHooks = append(miniCexEvaluationAfterInsertHooks, miniCexEvaluationHook)
	case boil.AfterSelectHook:
		miniCexEvaluationAfterSelectHooks = append(miniCexEvaluationAfterSelectHooks, miniCexEvaluationHook)
	case boil.AfterUpdateHook:
		miniCexEvaluationAfterUpdateHooks = append(miniCexEvaluationAfterUpdateHooks, miniCexEvaluationHook)
	case boil.AfterDeleteHook:
		miniCexEvaluationAfterDeleteHooks = append(miniCexEvaluationAfterDeleteHooks, miniCexEvaluationHook)
	case boil.AfterUpsertHook:
		miniCexEvaluationAfterUpsertHooks = append(miniCexEvaluationAfterUpsertHooks, miniCexEvaluationHook)
	}
}

// One returns a single miniCexEvaluation record from the query.
func (q miniCexEvaluationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MiniCexEvaluation, error) {
	o := &MiniCexEvaluation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mini_cex_evaluations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MiniCexEvaluation records from the query.
func (q miniCexEvaluationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MiniCexEvaluationSlice, error) {
	var o []*MiniCexEvaluation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MiniCexEvaluation slice")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MiniCexEvaluation records in the query.
func (q miniCexEvaluationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mini_cex_evaluations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q miniCexEvaluationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mini_cex_evaluations exists")
	}

	return count > 0, nil
}

// Department pointed to by the foreign key.
func (o *MiniCexEvaluation) Department(mods ...qm.QueryMod) organizationalUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DepartmentID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	return query
}

// Resident pointed to by the foreign key.
func (o *MiniCexEvaluation) Resident(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ResidentID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Supervisor pointed to by the foreign key.
func (o *MiniCexEvaluation) Supervisor(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupervisorID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// MiniCexAssessment pointed to by the foreign key.
func (o *MiniCexEvaluation) MiniCexAssessment(mods ...qm.QueryMod) assessmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mini_cex_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Assessments(queryMods...)
	queries.SetFrom(query.Query, "\"assessments\"")

	return query
}

// LoadDepartment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (miniCexEvaluationL) LoadDepartment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMiniCexEvaluation interface{}, mods queries.Applicator) error {
	var slice []*MiniCexEvaluation
	var object *MiniCexEvaluation

	if singular {
		object = maybeMiniCexEvaluation.(*MiniCexEvaluation)
	} else {
		slice = *maybeMiniCexEvaluation.(*[]*MiniCexEvaluation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &miniCexEvaluationR{}
		}
		if !queries.IsNil(object.DepartmentID) {
			args = append(args, object.DepartmentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &miniCexEvaluationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DepartmentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DepartmentID) {
				args = append(args, obj.DepartmentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnit")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Department = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitR{}
		}
		foreign.R.DepartmentMiniCexEvaluations = append(foreign.R.DepartmentMiniCexEvaluations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DepartmentID, foreign.ID) {
				local.R.Department = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.DepartmentMiniCexEvaluations = append(foreign.R.DepartmentMiniCexEvaluations, local)
				break
			}
		}
	}

	return nil
}

// LoadResident allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (miniCexEvaluationL) LoadResident(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMiniCexEvaluation interface{}, mods queries.Applicator) error {
	var slice []*MiniCexEvaluation
	var object *MiniCexEvaluation

	if singular {
		object = maybeMiniCexEvaluation.(*MiniCexEvaluation)
	} else {
		slice = *maybeMiniCexEvaluation.(*[]*MiniCexEvaluation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &miniCexEvaluationR{}
		}
		args = append(args, object.ResidentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &miniCexEvaluationR{}
			}

			for _, a := range args {
				if a == obj.ResidentID {
					continue Outer
				}
			}

			args = append(args, obj.ResidentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Resident = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ResidentMiniCexEvaluations = append(foreign.R.ResidentMiniCexEvaluations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ResidentID == foreign.ID {
				local.R.Resident = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ResidentMiniCexEvaluations = append(foreign.R.ResidentMiniCexEvaluations, local)
				break
			}
		}
	}

	return nil
}

// LoadSupervisor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (miniCexEvaluationL) LoadSupervisor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMiniCexEvaluation interface{}, mods queries.Applicator) error {
	var slice []*MiniCexEvaluation
	var object *MiniCexEvaluation

	if singular {
		object = maybeMiniCexEvaluation.(*MiniCexEvaluation)
	} else {
		slice = *maybeMiniCexEvaluation.(*[]*MiniCexEvaluation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &miniCexEvaluationR{}
		}
		args = append(args, object.SupervisorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &miniCexEvaluationR{}
			}

			for _, a := range args {
				if a == obj.SupervisorID {
					continue Outer
				}
			}

			args = append(args, obj.SupervisorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supervisor = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SupervisorMiniCexEvaluations = append(foreign.R.SupervisorMiniCexEvaluations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupervisorID == foreign.ID {
				local.R.Supervisor = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SupervisorMiniCexEvaluations = append(foreign.R.SupervisorMiniCexEvaluations, local)
				break
			}
		}
	}

	return nil
}

// LoadMiniCexAssessment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (miniCexEvaluationL) LoadMiniCexAssessment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMiniCexEvaluation interface{}, mods queries.Applicator) error {
	var slice []*MiniCexEvaluation
	var object *MiniCexEvaluation

	if singular {
		object = maybeMiniCexEvaluation.(*MiniCexEvaluation)
	} else {
		slice = *maybeMiniCexEvaluation.(*[]*MiniCexEvaluation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &miniCexEvaluationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &miniCexEvaluationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assessments`),
		qm.WhereIn(`assessments.mini_cex_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Assessment")
	}

	var resultSlice []*Assessment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Assessment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assessments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assessments")
	}

	if len(miniCexEvaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MiniCexAssessment = foreign
		if foreign.R == nil {
			foreign.R = &assessmentR{}
		}
		foreign.R.MiniCex = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.MiniCexID) {
				local.R.MiniCexAssessment = foreign
				if foreign.R == nil {
					foreign.R = &assessmentR{}
				}
				foreign.R.MiniCex = local
				break
			}
		}
	}

	return nil
}

// SetDepartment of the miniCexEvaluation to the related item.
// Sets o.R.Department to related.
// Adds o to related.R.DepartmentMiniCexEvaluations.
func (o *MiniCexEvaluation) SetDepartment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
		strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DepartmentID, related.ID)
	if o.R == nil {
		o.R = &miniCexEvaluationR{
			Department: related,
		}
	} else {
		o.R.Department = related
	}

	if related.R == nil {
		related.R = &organizationalUnitR{
			DepartmentMiniCexEvaluations: MiniCexEvaluationSlice{o},
		}
	} else {
		related.R.DepartmentMiniCexEvaluations = append(related.R.DepartmentMiniCexEvaluations, o)
	}

	return nil
}

// RemoveDepartment relationship.
// Sets o.R.Department to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MiniCexEvaluation) RemoveDepartment(ctx context.Context, exec boil.ContextExecutor, related *OrganizationalUnit) error {
	var err error

	queries.SetScanner(&o.DepartmentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("department_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Department = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DepartmentMiniCexEvaluations {
		if queries.Equal(o.DepartmentID, ri.DepartmentID) {
			continue
		}

		ln := len(related.R.DepartmentMiniCexEvaluations)
		if ln > 1 && i < ln-1 {
			related.R.DepartmentMiniCexEvaluations[i] = related.R.DepartmentMiniCexEvaluations[ln-1]
		}
		related.R.DepartmentMiniCexEvaluations = related.R.DepartmentMiniCexEvaluations[:ln-1]
		break
	}
	return nil
}

// SetResident of the miniCexEvaluation to the related item.
// Sets o.R.Resident to related.
// Adds o to related.R.ResidentMiniCexEvaluations.
func (o *MiniCexEvaluation) SetResident(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"resident_id"}),
		strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ResidentID = related.ID
	if o.R == nil {
		o.R = &miniCexEvaluationR{
			Resident: related,
		}
	} else {
		o.R.Resident = related
	}

	if related.R == nil {
		related.R = &userR{
			ResidentMiniCexEvaluations: MiniCexEvaluationSlice{o},
		}
	} else {
		related.R.ResidentMiniCexEvaluations = append(related.R.ResidentMiniCexEvaluations, o)
	}

	return nil
}

// SetSupervisor of the miniCexEvaluation to the related item.
// Sets o.R.Supervisor to related.
// Adds o to related.R.SupervisorMiniCexEvaluations.
func (o *MiniCexEvaluation) SetSupervisor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supervisor_id"}),
		strmangle.WhereClause("\"", "\"", 2, miniCexEvaluationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupervisorID = related.ID
	if o.R == nil {
		o.R = &miniCexEvaluationR{
			Supervisor: related,
		}
	} else {
		o.R.Supervisor = related
	}

	if related.R == nil {
		related.R = &userR{
			SupervisorMiniCexEvaluations: MiniCexEvaluationSlice{o},
		}
	} else {
		related.R.SupervisorMiniCexEvaluations = append(related.R.SupervisorMiniCexEvaluations, o)
	}

	return nil
}

// SetMiniCexAssessment of the miniCexEvaluation to the related item.
// Sets o.R.MiniCexAssessment to related.
// Adds o to related.R.MiniCex.
func (o *MiniCexEvaluation) SetMiniCexAssessment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Assessment) error {
	var err error

	if insert {
		queries.Assign(&related.MiniCexID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"assessments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mini_cex_id"}),
			strmangle.WhereClause("\"", "\"", 2, assessmentPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.MiniCexID, o.ID)
	}

	if o.R == nil {
		o.R = &miniCexEvaluationR{
			MiniCexAssessment: related,
		}
	} else {
		o.R.MiniCexAssessment = related
	}

	if related.R == nil {
		related.R = &assessmentR{
			MiniCex: o,
		}
	} else {
		related.R.MiniCex = o
	}
	return nil
}

// RemoveMiniCexAssessment relationship.
// Sets o.R.MiniCexAssessment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MiniCexEvaluation) RemoveMiniCexAssessment(ctx context.Context, exec boil.ContextExecutor, related *Assessment) error {
	var err error

	queries.SetScanner(&related.MiniCexID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("mini_cex_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MiniCexAssessment = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.MiniCex = nil
	return nil
}

// MiniCexEvaluations retrieves all the records using an executor.
func MiniCexEvaluations(mods ...qm.QueryMod) miniCexEvaluationQuery {
	mods = append(mods, qm.From("\"mini_cex_evaluations\""))
	return miniCexEvaluationQuery{NewQuery(mods...)}
}

// FindMiniCexEvaluation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMiniCexEvaluation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MiniCexEvaluation, error) {
	miniCexEvaluationObj := &MiniCexEvaluation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mini_cex_evaluations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, miniCexEvaluationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mini_cex_evaluations")
	}

	if err = miniCexEvaluationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return miniCexEvaluationObj, err
	}

	return miniCexEvaluationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MiniCexEvaluation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mini_cex_evaluations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(miniCexEvaluationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	miniCexEvaluationInsertCacheMut.RLock()
	cache, cached := miniCexEvaluationInsertCache[key]
	miniCexEvaluationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			miniCexEvaluationAllColumns,
			miniCexEvaluationColumnsWithDefault,
			miniCexEvaluationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mini_cex_evaluations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mini_cex_evaluations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mini_cex_evaluations")
	}

	if !cached {
		miniCexEvaluationInsertCacheMut.Lock()
		miniCexEvaluationInsertCache[key] = cache
		miniCexEvaluationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MiniCexEvaluation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MiniCexEvaluation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	miniCexEvaluationUpdateCacheMut.RLock()
	cache, cached := miniCexEvaluationUpdateCache[key]
	miniCexEvaluationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			miniCexEvaluationAllColumns,
			miniCexEvaluationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mini_cex_evaluations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, miniCexEvaluationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, append(wl, miniCexEvaluationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mini_cex_evaluations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mini_cex_evaluations")
	}

	if !cached {
		miniCexEvaluationUpdateCacheMut.Lock()
		miniCexEvaluationUpdateCache[key] = cache
		miniCexEvaluationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q miniCexEvaluationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mini_cex_evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mini_cex_evaluations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MiniCexEvaluationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexEvaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mini_cex_evaluations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, miniCexEvaluationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in miniCexEvaluation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all miniCexEvaluation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MiniCexEvaluation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mini_cex_evaluations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(miniCexEvaluationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	miniCexEvaluationUpsertCacheMut.RLock()
	cache, cached := miniCexEvaluationUpsertCache[key]
	miniCexEvaluationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			miniCexEvaluationAllColumns,
			miniCexEvaluationColumnsWithDefault,
			miniCexEvaluationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			miniCexEvaluationAllColumns,
			miniCexEvaluationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mini_cex_evaluations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(miniCexEvaluationPrimaryKeyColumns))
			copy(conflict, miniCexEvaluationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mini_cex_evaluations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(miniCexEvaluationType, miniCexEvaluationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mini_cex_evaluations")
	}

	if !cached {
		miniCexEvaluationUpsertCacheMut.Lock()
		miniCexEvaluationUpsertCache[key] = cache
		miniCexEvaluationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MiniCexEvaluation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MiniCexEvaluation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MiniCexEvaluation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), miniCexEvaluationPrimaryKeyMapping)
	sql := "DELETE FROM \"mini_cex_evaluations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mini_cex_evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mini_cex_evaluations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q miniCexEvaluationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no miniCexEvaluationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mini_cex_evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mini_cex_evaluations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MiniCexEvaluationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(miniCexEvaluationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexEvaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mini_cex_evaluations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, miniCexEvaluationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from miniCexEvaluation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mini_cex_evaluations")
	}

	if len(miniCexEvaluationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MiniCexEvaluation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMiniCexEvaluation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MiniCexEvaluationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MiniCexEvaluationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), miniCexEvaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mini_cex_evaluations\".* FROM \"mini_cex_evaluations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, miniCexEvaluationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MiniCexEvaluationSlice")
	}

	*o = slice

	return nil
}

// MiniCexEvaluationExists checks if the MiniCexEvaluation row exists.
func MiniCexEvaluationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mini_cex_evaluations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mini_cex_evaluations exists")
	}

	return exists, nil
}
