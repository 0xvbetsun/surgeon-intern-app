// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Specialty is an object representing the database table.
type Specialty struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *specialtyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L specialtyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SpecialtyColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var SpecialtyTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "specialties.id",
	Name: "specialties.name",
}

// Generated where

var SpecialtyWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"specialties\".\"id\""},
	Name: whereHelperstring{field: "\"specialties\".\"name\""},
}

// SpecialtyRels is where relationship names are stored.
var SpecialtyRels = struct {
	UnitOrganizationalUnits            string
	ActivityTypePracticalActivityTypes string
	SurgerySpecialtySurgeries          string
}{
	UnitOrganizationalUnits:            "UnitOrganizationalUnits",
	ActivityTypePracticalActivityTypes: "ActivityTypePracticalActivityTypes",
	SurgerySpecialtySurgeries:          "SurgerySpecialtySurgeries",
}

// specialtyR is where relationships are stored.
type specialtyR struct {
	UnitOrganizationalUnits            OrganizationalUnitSlice    `boil:"UnitOrganizationalUnits" json:"UnitOrganizationalUnits" toml:"UnitOrganizationalUnits" yaml:"UnitOrganizationalUnits"`
	ActivityTypePracticalActivityTypes PracticalActivityTypeSlice `boil:"ActivityTypePracticalActivityTypes" json:"ActivityTypePracticalActivityTypes" toml:"ActivityTypePracticalActivityTypes" yaml:"ActivityTypePracticalActivityTypes"`
	SurgerySpecialtySurgeries          SurgerySlice               `boil:"SurgerySpecialtySurgeries" json:"SurgerySpecialtySurgeries" toml:"SurgerySpecialtySurgeries" yaml:"SurgerySpecialtySurgeries"`
}

// NewStruct creates a new relationship struct
func (*specialtyR) NewStruct() *specialtyR {
	return &specialtyR{}
}

// specialtyL is where Load methods for each relationship are stored.
type specialtyL struct{}

var (
	specialtyAllColumns            = []string{"id", "name"}
	specialtyColumnsWithoutDefault = []string{"name"}
	specialtyColumnsWithDefault    = []string{"id"}
	specialtyPrimaryKeyColumns     = []string{"id"}
)

type (
	// SpecialtySlice is an alias for a slice of pointers to Specialty.
	// This should almost always be used instead of []Specialty.
	SpecialtySlice []*Specialty
	// SpecialtyHook is the signature for custom Specialty hook methods
	SpecialtyHook func(context.Context, boil.ContextExecutor, *Specialty) error

	specialtyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	specialtyType                 = reflect.TypeOf(&Specialty{})
	specialtyMapping              = queries.MakeStructMapping(specialtyType)
	specialtyPrimaryKeyMapping, _ = queries.BindMapping(specialtyType, specialtyMapping, specialtyPrimaryKeyColumns)
	specialtyInsertCacheMut       sync.RWMutex
	specialtyInsertCache          = make(map[string]insertCache)
	specialtyUpdateCacheMut       sync.RWMutex
	specialtyUpdateCache          = make(map[string]updateCache)
	specialtyUpsertCacheMut       sync.RWMutex
	specialtyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var specialtyBeforeInsertHooks []SpecialtyHook
var specialtyBeforeUpdateHooks []SpecialtyHook
var specialtyBeforeDeleteHooks []SpecialtyHook
var specialtyBeforeUpsertHooks []SpecialtyHook

var specialtyAfterInsertHooks []SpecialtyHook
var specialtyAfterSelectHooks []SpecialtyHook
var specialtyAfterUpdateHooks []SpecialtyHook
var specialtyAfterDeleteHooks []SpecialtyHook
var specialtyAfterUpsertHooks []SpecialtyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Specialty) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Specialty) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Specialty) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Specialty) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Specialty) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Specialty) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Specialty) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Specialty) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Specialty) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range specialtyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSpecialtyHook registers your hook function for all future operations.
func AddSpecialtyHook(hookPoint boil.HookPoint, specialtyHook SpecialtyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		specialtyBeforeInsertHooks = append(specialtyBeforeInsertHooks, specialtyHook)
	case boil.BeforeUpdateHook:
		specialtyBeforeUpdateHooks = append(specialtyBeforeUpdateHooks, specialtyHook)
	case boil.BeforeDeleteHook:
		specialtyBeforeDeleteHooks = append(specialtyBeforeDeleteHooks, specialtyHook)
	case boil.BeforeUpsertHook:
		specialtyBeforeUpsertHooks = append(specialtyBeforeUpsertHooks, specialtyHook)
	case boil.AfterInsertHook:
		specialtyAfterInsertHooks = append(specialtyAfterInsertHooks, specialtyHook)
	case boil.AfterSelectHook:
		specialtyAfterSelectHooks = append(specialtyAfterSelectHooks, specialtyHook)
	case boil.AfterUpdateHook:
		specialtyAfterUpdateHooks = append(specialtyAfterUpdateHooks, specialtyHook)
	case boil.AfterDeleteHook:
		specialtyAfterDeleteHooks = append(specialtyAfterDeleteHooks, specialtyHook)
	case boil.AfterUpsertHook:
		specialtyAfterUpsertHooks = append(specialtyAfterUpsertHooks, specialtyHook)
	}
}

// One returns a single specialty record from the query.
func (q specialtyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Specialty, error) {
	o := &Specialty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for specialties")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Specialty records from the query.
func (q specialtyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SpecialtySlice, error) {
	var o []*Specialty

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Specialty slice")
	}

	if len(specialtyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Specialty records in the query.
func (q specialtyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count specialties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q specialtyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if specialties exists")
	}

	return count > 0, nil
}

// UnitOrganizationalUnits retrieves all the organizational_unit's OrganizationalUnits with an executor via id column.
func (o *Specialty) UnitOrganizationalUnits(mods ...qm.QueryMod) organizationalUnitQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"organizational_unit_specialties\" on \"organizational_units\".\"id\" = \"organizational_unit_specialties\".\"unit_id\""),
		qm.Where("\"organizational_unit_specialties\".\"specialty_id\"=?", o.ID),
	)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"organizational_units\".*"})
	}

	return query
}

// ActivityTypePracticalActivityTypes retrieves all the practical_activity_type's PracticalActivityTypes with an executor via id column.
func (o *Specialty) ActivityTypePracticalActivityTypes(mods ...qm.QueryMod) practicalActivityTypeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"specialties_activity_types\" on \"practical_activity_types\".\"id\" = \"specialties_activity_types\".\"activity_type_id\""),
		qm.Where("\"specialties_activity_types\".\"specialty_id\"=?", o.ID),
	)

	query := PracticalActivityTypes(queryMods...)
	queries.SetFrom(query.Query, "\"practical_activity_types\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"practical_activity_types\".*"})
	}

	return query
}

// SurgerySpecialtySurgeries retrieves all the surgery's Surgeries with an executor via surgery_specialty column.
func (o *Specialty) SurgerySpecialtySurgeries(mods ...qm.QueryMod) surgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"surgeries\".\"surgery_specialty\"=?", o.ID),
	)

	query := Surgeries(queryMods...)
	queries.SetFrom(query.Query, "\"surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"surgeries\".*"})
	}

	return query
}

// LoadUnitOrganizationalUnits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (specialtyL) LoadUnitOrganizationalUnits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpecialty interface{}, mods queries.Applicator) error {
	var slice []*Specialty
	var object *Specialty

	if singular {
		object = maybeSpecialty.(*Specialty)
	} else {
		slice = *maybeSpecialty.(*[]*Specialty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &specialtyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &specialtyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"organizational_units\".id, \"organizational_units\".display_name, \"organizational_units\".created_at, \"organizational_units\".deleted_at, \"organizational_units\".parent_id, \"organizational_units\".metadata, \"organizational_units\".type_id, \"a\".\"specialty_id\""),
		qm.From("\"organizational_units\""),
		qm.InnerJoin("\"organizational_unit_specialties\" as \"a\" on \"organizational_units\".\"id\" = \"a\".\"unit_id\""),
		qm.WhereIn("\"a\".\"specialty_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load organizational_units")
	}

	var resultSlice []*OrganizationalUnit

	var localJoinCols []string
	for results.Next() {
		one := new(OrganizationalUnit)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.DisplayName, &one.CreatedAt, &one.DeletedAt, &one.ParentID, &one.Metadata, &one.TypeID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for organizational_units")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice organizational_units")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(organizationalUnitAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UnitOrganizationalUnits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &organizationalUnitR{}
			}
			foreign.R.Specialties = append(foreign.R.Specialties, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.UnitOrganizationalUnits = append(local.R.UnitOrganizationalUnits, foreign)
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.Specialties = append(foreign.R.Specialties, local)
				break
			}
		}
	}

	return nil
}

// LoadActivityTypePracticalActivityTypes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (specialtyL) LoadActivityTypePracticalActivityTypes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpecialty interface{}, mods queries.Applicator) error {
	var slice []*Specialty
	var object *Specialty

	if singular {
		object = maybeSpecialty.(*Specialty)
	} else {
		slice = *maybeSpecialty.(*[]*Specialty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &specialtyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &specialtyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"practical_activity_types\".id, \"practical_activity_types\".display_name, \"practical_activity_types\".name, \"practical_activity_types\".created_at, \"a\".\"specialty_id\""),
		qm.From("\"practical_activity_types\""),
		qm.InnerJoin("\"specialties_activity_types\" as \"a\" on \"practical_activity_types\".\"id\" = \"a\".\"activity_type_id\""),
		qm.WhereIn("\"a\".\"specialty_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load practical_activity_types")
	}

	var resultSlice []*PracticalActivityType

	var localJoinCols []string
	for results.Next() {
		one := new(PracticalActivityType)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.DisplayName, &one.Name, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for practical_activity_types")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice practical_activity_types")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on practical_activity_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for practical_activity_types")
	}

	if len(practicalActivityTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ActivityTypePracticalActivityTypes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &practicalActivityTypeR{}
			}
			foreign.R.Specialties = append(foreign.R.Specialties, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ActivityTypePracticalActivityTypes = append(local.R.ActivityTypePracticalActivityTypes, foreign)
				if foreign.R == nil {
					foreign.R = &practicalActivityTypeR{}
				}
				foreign.R.Specialties = append(foreign.R.Specialties, local)
				break
			}
		}
	}

	return nil
}

// LoadSurgerySpecialtySurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (specialtyL) LoadSurgerySpecialtySurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSpecialty interface{}, mods queries.Applicator) error {
	var slice []*Specialty
	var object *Specialty

	if singular {
		object = maybeSpecialty.(*Specialty)
	} else {
		slice = *maybeSpecialty.(*[]*Specialty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &specialtyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &specialtyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgeries`),
		qm.WhereIn(`surgeries.surgery_specialty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load surgeries")
	}

	var resultSlice []*Surgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgeries")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SurgerySpecialtySurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &surgeryR{}
			}
			foreign.R.SurgerySpecialtySpecialty = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SurgerySpecialty {
				local.R.SurgerySpecialtySurgeries = append(local.R.SurgerySpecialtySurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &surgeryR{}
				}
				foreign.R.SurgerySpecialtySpecialty = local
				break
			}
		}
	}

	return nil
}

// AddUnitOrganizationalUnits adds the given related objects to the existing relationships
// of the specialty, optionally inserting them as new records.
// Appends related to o.R.UnitOrganizationalUnits.
// Sets related.R.Specialties appropriately.
func (o *Specialty) AddUnitOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationalUnit) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"organizational_unit_specialties\" (\"specialty_id\", \"unit_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &specialtyR{
			UnitOrganizationalUnits: related,
		}
	} else {
		o.R.UnitOrganizationalUnits = append(o.R.UnitOrganizationalUnits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &organizationalUnitR{
				Specialties: SpecialtySlice{o},
			}
		} else {
			rel.R.Specialties = append(rel.R.Specialties, o)
		}
	}
	return nil
}

// SetUnitOrganizationalUnits removes all previously related items of the
// specialty replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Specialties's UnitOrganizationalUnits accordingly.
// Replaces o.R.UnitOrganizationalUnits with related.
// Sets related.R.Specialties's UnitOrganizationalUnits accordingly.
func (o *Specialty) SetUnitOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrganizationalUnit) error {
	query := "delete from \"organizational_unit_specialties\" where \"specialty_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeUnitOrganizationalUnitsFromSpecialtiesSlice(o, related)
	if o.R != nil {
		o.R.UnitOrganizationalUnits = nil
	}
	return o.AddUnitOrganizationalUnits(ctx, exec, insert, related...)
}

// RemoveUnitOrganizationalUnits relationships from objects passed in.
// Removes related items from R.UnitOrganizationalUnits (uses pointer comparison, removal does not keep order)
// Sets related.R.Specialties.
func (o *Specialty) RemoveUnitOrganizationalUnits(ctx context.Context, exec boil.ContextExecutor, related ...*OrganizationalUnit) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"organizational_unit_specialties\" where \"specialty_id\" = $1 and \"unit_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeUnitOrganizationalUnitsFromSpecialtiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UnitOrganizationalUnits {
			if rel != ri {
				continue
			}

			ln := len(o.R.UnitOrganizationalUnits)
			if ln > 1 && i < ln-1 {
				o.R.UnitOrganizationalUnits[i] = o.R.UnitOrganizationalUnits[ln-1]
			}
			o.R.UnitOrganizationalUnits = o.R.UnitOrganizationalUnits[:ln-1]
			break
		}
	}

	return nil
}

func removeUnitOrganizationalUnitsFromSpecialtiesSlice(o *Specialty, related []*OrganizationalUnit) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Specialties {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Specialties)
			if ln > 1 && i < ln-1 {
				rel.R.Specialties[i] = rel.R.Specialties[ln-1]
			}
			rel.R.Specialties = rel.R.Specialties[:ln-1]
			break
		}
	}
}

// AddActivityTypePracticalActivityTypes adds the given related objects to the existing relationships
// of the specialty, optionally inserting them as new records.
// Appends related to o.R.ActivityTypePracticalActivityTypes.
// Sets related.R.Specialties appropriately.
func (o *Specialty) AddActivityTypePracticalActivityTypes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PracticalActivityType) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"specialties_activity_types\" (\"specialty_id\", \"activity_type_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &specialtyR{
			ActivityTypePracticalActivityTypes: related,
		}
	} else {
		o.R.ActivityTypePracticalActivityTypes = append(o.R.ActivityTypePracticalActivityTypes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &practicalActivityTypeR{
				Specialties: SpecialtySlice{o},
			}
		} else {
			rel.R.Specialties = append(rel.R.Specialties, o)
		}
	}
	return nil
}

// SetActivityTypePracticalActivityTypes removes all previously related items of the
// specialty replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Specialties's ActivityTypePracticalActivityTypes accordingly.
// Replaces o.R.ActivityTypePracticalActivityTypes with related.
// Sets related.R.Specialties's ActivityTypePracticalActivityTypes accordingly.
func (o *Specialty) SetActivityTypePracticalActivityTypes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PracticalActivityType) error {
	query := "delete from \"specialties_activity_types\" where \"specialty_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeActivityTypePracticalActivityTypesFromSpecialtiesSlice(o, related)
	if o.R != nil {
		o.R.ActivityTypePracticalActivityTypes = nil
	}
	return o.AddActivityTypePracticalActivityTypes(ctx, exec, insert, related...)
}

// RemoveActivityTypePracticalActivityTypes relationships from objects passed in.
// Removes related items from R.ActivityTypePracticalActivityTypes (uses pointer comparison, removal does not keep order)
// Sets related.R.Specialties.
func (o *Specialty) RemoveActivityTypePracticalActivityTypes(ctx context.Context, exec boil.ContextExecutor, related ...*PracticalActivityType) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"specialties_activity_types\" where \"specialty_id\" = $1 and \"activity_type_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeActivityTypePracticalActivityTypesFromSpecialtiesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ActivityTypePracticalActivityTypes {
			if rel != ri {
				continue
			}

			ln := len(o.R.ActivityTypePracticalActivityTypes)
			if ln > 1 && i < ln-1 {
				o.R.ActivityTypePracticalActivityTypes[i] = o.R.ActivityTypePracticalActivityTypes[ln-1]
			}
			o.R.ActivityTypePracticalActivityTypes = o.R.ActivityTypePracticalActivityTypes[:ln-1]
			break
		}
	}

	return nil
}

func removeActivityTypePracticalActivityTypesFromSpecialtiesSlice(o *Specialty, related []*PracticalActivityType) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Specialties {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Specialties)
			if ln > 1 && i < ln-1 {
				rel.R.Specialties[i] = rel.R.Specialties[ln-1]
			}
			rel.R.Specialties = rel.R.Specialties[:ln-1]
			break
		}
	}
}

// AddSurgerySpecialtySurgeries adds the given related objects to the existing relationships
// of the specialty, optionally inserting them as new records.
// Appends related to o.R.SurgerySpecialtySurgeries.
// Sets related.R.SurgerySpecialtySpecialty appropriately.
func (o *Specialty) AddSurgerySpecialtySurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Surgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SurgerySpecialty = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_specialty"}),
				strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SurgerySpecialty = o.ID
		}
	}

	if o.R == nil {
		o.R = &specialtyR{
			SurgerySpecialtySurgeries: related,
		}
	} else {
		o.R.SurgerySpecialtySurgeries = append(o.R.SurgerySpecialtySurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &surgeryR{
				SurgerySpecialtySpecialty: o,
			}
		} else {
			rel.R.SurgerySpecialtySpecialty = o
		}
	}
	return nil
}

// Specialties retrieves all the records using an executor.
func Specialties(mods ...qm.QueryMod) specialtyQuery {
	mods = append(mods, qm.From("\"specialties\""))
	return specialtyQuery{NewQuery(mods...)}
}

// FindSpecialty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSpecialty(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Specialty, error) {
	specialtyObj := &Specialty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"specialties\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, specialtyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from specialties")
	}

	if err = specialtyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return specialtyObj, err
	}

	return specialtyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Specialty) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no specialties provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(specialtyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	specialtyInsertCacheMut.RLock()
	cache, cached := specialtyInsertCache[key]
	specialtyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			specialtyAllColumns,
			specialtyColumnsWithDefault,
			specialtyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(specialtyType, specialtyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(specialtyType, specialtyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"specialties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"specialties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into specialties")
	}

	if !cached {
		specialtyInsertCacheMut.Lock()
		specialtyInsertCache[key] = cache
		specialtyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Specialty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Specialty) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	specialtyUpdateCacheMut.RLock()
	cache, cached := specialtyUpdateCache[key]
	specialtyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			specialtyAllColumns,
			specialtyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update specialties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"specialties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, specialtyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(specialtyType, specialtyMapping, append(wl, specialtyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update specialties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for specialties")
	}

	if !cached {
		specialtyUpdateCacheMut.Lock()
		specialtyUpdateCache[key] = cache
		specialtyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q specialtyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for specialties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for specialties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SpecialtySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specialtyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"specialties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, specialtyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in specialty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all specialty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Specialty) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no specialties provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(specialtyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	specialtyUpsertCacheMut.RLock()
	cache, cached := specialtyUpsertCache[key]
	specialtyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			specialtyAllColumns,
			specialtyColumnsWithDefault,
			specialtyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			specialtyAllColumns,
			specialtyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert specialties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(specialtyPrimaryKeyColumns))
			copy(conflict, specialtyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"specialties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(specialtyType, specialtyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(specialtyType, specialtyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert specialties")
	}

	if !cached {
		specialtyUpsertCacheMut.Lock()
		specialtyUpsertCache[key] = cache
		specialtyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Specialty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Specialty) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Specialty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), specialtyPrimaryKeyMapping)
	sql := "DELETE FROM \"specialties\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from specialties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for specialties")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q specialtyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no specialtyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from specialties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for specialties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SpecialtySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(specialtyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specialtyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"specialties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, specialtyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from specialty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for specialties")
	}

	if len(specialtyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Specialty) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSpecialty(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SpecialtySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SpecialtySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), specialtyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"specialties\".* FROM \"specialties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, specialtyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SpecialtySlice")
	}

	*o = slice

	return nil
}

// SpecialtyExists checks if the Specialty row exists.
func SpecialtyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"specialties\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if specialties exists")
	}

	return exists, nil
}
