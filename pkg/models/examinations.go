// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Examination is an object representing the database table.
type Examination struct {
	ID                      string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DisplayName             string     `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Annotations             types.JSON `boil:"annotations" json:"annotations" toml:"annotations" yaml:"annotations"`
	CreatedAt               time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DepartmentID            string     `boil:"department_id" json:"department_id" toml:"department_id" yaml:"department_id"`
	PracticalActivityTypeID int        `boil:"practical_activity_type_id" json:"practical_activity_type_id" toml:"practical_activity_type_id" yaml:"practical_activity_type_id"`

	R *examinationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L examinationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExaminationColumns = struct {
	ID                      string
	DisplayName             string
	Annotations             string
	CreatedAt               string
	DepartmentID            string
	PracticalActivityTypeID string
}{
	ID:                      "id",
	DisplayName:             "display_name",
	Annotations:             "annotations",
	CreatedAt:               "created_at",
	DepartmentID:            "department_id",
	PracticalActivityTypeID: "practical_activity_type_id",
}

var ExaminationTableColumns = struct {
	ID                      string
	DisplayName             string
	Annotations             string
	CreatedAt               string
	DepartmentID            string
	PracticalActivityTypeID string
}{
	ID:                      "examinations.id",
	DisplayName:             "examinations.display_name",
	Annotations:             "examinations.annotations",
	CreatedAt:               "examinations.created_at",
	DepartmentID:            "examinations.department_id",
	PracticalActivityTypeID: "examinations.practical_activity_type_id",
}

// Generated where

var ExaminationWhere = struct {
	ID                      whereHelperstring
	DisplayName             whereHelperstring
	Annotations             whereHelpertypes_JSON
	CreatedAt               whereHelpertime_Time
	DepartmentID            whereHelperstring
	PracticalActivityTypeID whereHelperint
}{
	ID:                      whereHelperstring{field: "\"examinations\".\"id\""},
	DisplayName:             whereHelperstring{field: "\"examinations\".\"display_name\""},
	Annotations:             whereHelpertypes_JSON{field: "\"examinations\".\"annotations\""},
	CreatedAt:               whereHelpertime_Time{field: "\"examinations\".\"created_at\""},
	DepartmentID:            whereHelperstring{field: "\"examinations\".\"department_id\""},
	PracticalActivityTypeID: whereHelperint{field: "\"examinations\".\"practical_activity_type_id\""},
}

// ExaminationRels is where relationship names are stored.
var ExaminationRels = struct {
	Department            string
	PracticalActivityType string
	LogbookEntry          string
	ExaminationActivities string
}{
	Department:            "Department",
	PracticalActivityType: "PracticalActivityType",
	LogbookEntry:          "LogbookEntry",
	ExaminationActivities: "ExaminationActivities",
}

// examinationR is where relationships are stored.
type examinationR struct {
	Department            *OrganizationalUnit      `boil:"Department" json:"Department" toml:"Department" yaml:"Department"`
	PracticalActivityType *PracticalActivityType   `boil:"PracticalActivityType" json:"PracticalActivityType" toml:"PracticalActivityType" yaml:"PracticalActivityType"`
	LogbookEntry          *LogbookEntry            `boil:"LogbookEntry" json:"LogbookEntry" toml:"LogbookEntry" yaml:"LogbookEntry"`
	ExaminationActivities ExaminationActivitySlice `boil:"ExaminationActivities" json:"ExaminationActivities" toml:"ExaminationActivities" yaml:"ExaminationActivities"`
}

// NewStruct creates a new relationship struct
func (*examinationR) NewStruct() *examinationR {
	return &examinationR{}
}

// examinationL is where Load methods for each relationship are stored.
type examinationL struct{}

var (
	examinationAllColumns            = []string{"id", "display_name", "annotations", "created_at", "department_id", "practical_activity_type_id"}
	examinationColumnsWithoutDefault = []string{"display_name", "annotations", "department_id", "practical_activity_type_id"}
	examinationColumnsWithDefault    = []string{"id", "created_at"}
	examinationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExaminationSlice is an alias for a slice of pointers to Examination.
	// This should almost always be used instead of []Examination.
	ExaminationSlice []*Examination
	// ExaminationHook is the signature for custom Examination hook methods
	ExaminationHook func(context.Context, boil.ContextExecutor, *Examination) error

	examinationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	examinationType                 = reflect.TypeOf(&Examination{})
	examinationMapping              = queries.MakeStructMapping(examinationType)
	examinationPrimaryKeyMapping, _ = queries.BindMapping(examinationType, examinationMapping, examinationPrimaryKeyColumns)
	examinationInsertCacheMut       sync.RWMutex
	examinationInsertCache          = make(map[string]insertCache)
	examinationUpdateCacheMut       sync.RWMutex
	examinationUpdateCache          = make(map[string]updateCache)
	examinationUpsertCacheMut       sync.RWMutex
	examinationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var examinationBeforeInsertHooks []ExaminationHook
var examinationBeforeUpdateHooks []ExaminationHook
var examinationBeforeDeleteHooks []ExaminationHook
var examinationBeforeUpsertHooks []ExaminationHook

var examinationAfterInsertHooks []ExaminationHook
var examinationAfterSelectHooks []ExaminationHook
var examinationAfterUpdateHooks []ExaminationHook
var examinationAfterDeleteHooks []ExaminationHook
var examinationAfterUpsertHooks []ExaminationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Examination) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Examination) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Examination) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Examination) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Examination) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Examination) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Examination) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Examination) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Examination) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range examinationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExaminationHook registers your hook function for all future operations.
func AddExaminationHook(hookPoint boil.HookPoint, examinationHook ExaminationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		examinationBeforeInsertHooks = append(examinationBeforeInsertHooks, examinationHook)
	case boil.BeforeUpdateHook:
		examinationBeforeUpdateHooks = append(examinationBeforeUpdateHooks, examinationHook)
	case boil.BeforeDeleteHook:
		examinationBeforeDeleteHooks = append(examinationBeforeDeleteHooks, examinationHook)
	case boil.BeforeUpsertHook:
		examinationBeforeUpsertHooks = append(examinationBeforeUpsertHooks, examinationHook)
	case boil.AfterInsertHook:
		examinationAfterInsertHooks = append(examinationAfterInsertHooks, examinationHook)
	case boil.AfterSelectHook:
		examinationAfterSelectHooks = append(examinationAfterSelectHooks, examinationHook)
	case boil.AfterUpdateHook:
		examinationAfterUpdateHooks = append(examinationAfterUpdateHooks, examinationHook)
	case boil.AfterDeleteHook:
		examinationAfterDeleteHooks = append(examinationAfterDeleteHooks, examinationHook)
	case boil.AfterUpsertHook:
		examinationAfterUpsertHooks = append(examinationAfterUpsertHooks, examinationHook)
	}
}

// One returns a single examination record from the query.
func (q examinationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Examination, error) {
	o := &Examination{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for examinations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Examination records from the query.
func (q examinationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExaminationSlice, error) {
	var o []*Examination

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Examination slice")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Examination records in the query.
func (q examinationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count examinations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q examinationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if examinations exists")
	}

	return count > 0, nil
}

// Department pointed to by the foreign key.
func (o *Examination) Department(mods ...qm.QueryMod) organizationalUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DepartmentID),
	}

	queryMods = append(queryMods, mods...)

	query := OrganizationalUnits(queryMods...)
	queries.SetFrom(query.Query, "\"organizational_units\"")

	return query
}

// PracticalActivityType pointed to by the foreign key.
func (o *Examination) PracticalActivityType(mods ...qm.QueryMod) practicalActivityTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PracticalActivityTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := PracticalActivityTypes(queryMods...)
	queries.SetFrom(query.Query, "\"practical_activity_types\"")

	return query
}

// LogbookEntry pointed to by the foreign key.
func (o *Examination) LogbookEntry(mods ...qm.QueryMod) logbookEntryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"examination_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := LogbookEntries(queryMods...)
	queries.SetFrom(query.Query, "\"logbook_entries\"")

	return query
}

// ExaminationActivities retrieves all the examination_activity's ExaminationActivities with an executor.
func (o *Examination) ExaminationActivities(mods ...qm.QueryMod) examinationActivityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"examination_activities\".\"examination_id\"=?", o.ID),
	)

	query := ExaminationActivities(queryMods...)
	queries.SetFrom(query.Query, "\"examination_activities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"examination_activities\".*"})
	}

	return query
}

// LoadDepartment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationL) LoadDepartment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		object = maybeExamination.(*Examination)
	} else {
		slice = *maybeExamination.(*[]*Examination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args = append(args, object.DepartmentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			for _, a := range args {
				if a == obj.DepartmentID {
					continue Outer
				}
			}

			args = append(args, obj.DepartmentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`organizational_units`),
		qm.WhereIn(`organizational_units.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrganizationalUnit")
	}

	var resultSlice []*OrganizationalUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrganizationalUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizational_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizational_units")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Department = foreign
		if foreign.R == nil {
			foreign.R = &organizationalUnitR{}
		}
		foreign.R.DepartmentExaminations = append(foreign.R.DepartmentExaminations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DepartmentID == foreign.ID {
				local.R.Department = foreign
				if foreign.R == nil {
					foreign.R = &organizationalUnitR{}
				}
				foreign.R.DepartmentExaminations = append(foreign.R.DepartmentExaminations, local)
				break
			}
		}
	}

	return nil
}

// LoadPracticalActivityType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (examinationL) LoadPracticalActivityType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		object = maybeExamination.(*Examination)
	} else {
		slice = *maybeExamination.(*[]*Examination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args = append(args, object.PracticalActivityTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			for _, a := range args {
				if a == obj.PracticalActivityTypeID {
					continue Outer
				}
			}

			args = append(args, obj.PracticalActivityTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`practical_activity_types`),
		qm.WhereIn(`practical_activity_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PracticalActivityType")
	}

	var resultSlice []*PracticalActivityType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PracticalActivityType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for practical_activity_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for practical_activity_types")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PracticalActivityType = foreign
		if foreign.R == nil {
			foreign.R = &practicalActivityTypeR{}
		}
		foreign.R.Examinations = append(foreign.R.Examinations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PracticalActivityTypeID == foreign.ID {
				local.R.PracticalActivityType = foreign
				if foreign.R == nil {
					foreign.R = &practicalActivityTypeR{}
				}
				foreign.R.Examinations = append(foreign.R.Examinations, local)
				break
			}
		}
	}

	return nil
}

// LoadLogbookEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (examinationL) LoadLogbookEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		object = maybeExamination.(*Examination)
	} else {
		slice = *maybeExamination.(*[]*Examination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`logbook_entries`),
		qm.WhereIn(`logbook_entries.examination_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LogbookEntry")
	}

	var resultSlice []*LogbookEntry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LogbookEntry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for logbook_entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for logbook_entries")
	}

	if len(examinationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LogbookEntry = foreign
		if foreign.R == nil {
			foreign.R = &logbookEntryR{}
		}
		foreign.R.Examination = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.ExaminationID) {
				local.R.LogbookEntry = foreign
				if foreign.R == nil {
					foreign.R = &logbookEntryR{}
				}
				foreign.R.Examination = local
				break
			}
		}
	}

	return nil
}

// LoadExaminationActivities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (examinationL) LoadExaminationActivities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExamination interface{}, mods queries.Applicator) error {
	var slice []*Examination
	var object *Examination

	if singular {
		object = maybeExamination.(*Examination)
	} else {
		slice = *maybeExamination.(*[]*Examination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &examinationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &examinationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`examination_activities`),
		qm.WhereIn(`examination_activities.examination_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load examination_activities")
	}

	var resultSlice []*ExaminationActivity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice examination_activities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on examination_activities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for examination_activities")
	}

	if len(examinationActivityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExaminationActivities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &examinationActivityR{}
			}
			foreign.R.Examination = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExaminationID {
				local.R.ExaminationActivities = append(local.R.ExaminationActivities, foreign)
				if foreign.R == nil {
					foreign.R = &examinationActivityR{}
				}
				foreign.R.Examination = local
				break
			}
		}
	}

	return nil
}

// SetDepartment of the examination to the related item.
// Sets o.R.Department to related.
// Adds o to related.R.DepartmentExaminations.
func (o *Examination) SetDepartment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrganizationalUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"department_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DepartmentID = related.ID
	if o.R == nil {
		o.R = &examinationR{
			Department: related,
		}
	} else {
		o.R.Department = related
	}

	if related.R == nil {
		related.R = &organizationalUnitR{
			DepartmentExaminations: ExaminationSlice{o},
		}
	} else {
		related.R.DepartmentExaminations = append(related.R.DepartmentExaminations, o)
	}

	return nil
}

// SetPracticalActivityType of the examination to the related item.
// Sets o.R.PracticalActivityType to related.
// Adds o to related.R.Examinations.
func (o *Examination) SetPracticalActivityType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PracticalActivityType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"examinations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"practical_activity_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, examinationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PracticalActivityTypeID = related.ID
	if o.R == nil {
		o.R = &examinationR{
			PracticalActivityType: related,
		}
	} else {
		o.R.PracticalActivityType = related
	}

	if related.R == nil {
		related.R = &practicalActivityTypeR{
			Examinations: ExaminationSlice{o},
		}
	} else {
		related.R.Examinations = append(related.R.Examinations, o)
	}

	return nil
}

// SetLogbookEntry of the examination to the related item.
// Sets o.R.LogbookEntry to related.
// Adds o to related.R.Examination.
func (o *Examination) SetLogbookEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LogbookEntry) error {
	var err error

	if insert {
		queries.Assign(&related.ExaminationID, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"logbook_entries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"examination_id"}),
			strmangle.WhereClause("\"", "\"", 2, logbookEntryPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.ExaminationID, o.ID)
	}

	if o.R == nil {
		o.R = &examinationR{
			LogbookEntry: related,
		}
	} else {
		o.R.LogbookEntry = related
	}

	if related.R == nil {
		related.R = &logbookEntryR{
			Examination: o,
		}
	} else {
		related.R.Examination = o
	}
	return nil
}

// RemoveLogbookEntry relationship.
// Sets o.R.LogbookEntry to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Examination) RemoveLogbookEntry(ctx context.Context, exec boil.ContextExecutor, related *LogbookEntry) error {
	var err error

	queries.SetScanner(&related.ExaminationID, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("examination_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LogbookEntry = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.Examination = nil
	return nil
}

// AddExaminationActivities adds the given related objects to the existing relationships
// of the examination, optionally inserting them as new records.
// Appends related to o.R.ExaminationActivities.
// Sets related.R.Examination appropriately.
func (o *Examination) AddExaminationActivities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExaminationActivity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExaminationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"examination_activities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"examination_id"}),
				strmangle.WhereClause("\"", "\"", 2, examinationActivityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExaminationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &examinationR{
			ExaminationActivities: related,
		}
	} else {
		o.R.ExaminationActivities = append(o.R.ExaminationActivities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &examinationActivityR{
				Examination: o,
			}
		} else {
			rel.R.Examination = o
		}
	}
	return nil
}

// Examinations retrieves all the records using an executor.
func Examinations(mods ...qm.QueryMod) examinationQuery {
	mods = append(mods, qm.From("\"examinations\""))
	return examinationQuery{NewQuery(mods...)}
}

// FindExamination retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExamination(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Examination, error) {
	examinationObj := &Examination{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"examinations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, examinationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from examinations")
	}

	if err = examinationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return examinationObj, err
	}

	return examinationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Examination) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	examinationInsertCacheMut.RLock()
	cache, cached := examinationInsertCache[key]
	examinationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			examinationAllColumns,
			examinationColumnsWithDefault,
			examinationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(examinationType, examinationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"examinations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"examinations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into examinations")
	}

	if !cached {
		examinationInsertCacheMut.Lock()
		examinationInsertCache[key] = cache
		examinationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Examination.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Examination) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	examinationUpdateCacheMut.RLock()
	cache, cached := examinationUpdateCache[key]
	examinationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			examinationAllColumns,
			examinationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update examinations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"examinations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, examinationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, append(wl, examinationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update examinations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for examinations")
	}

	if !cached {
		examinationUpdateCacheMut.Lock()
		examinationUpdateCache[key] = cache
		examinationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q examinationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for examinations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for examinations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExaminationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"examinations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, examinationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in examination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all examination")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Examination) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no examinations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(examinationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	examinationUpsertCacheMut.RLock()
	cache, cached := examinationUpsertCache[key]
	examinationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			examinationAllColumns,
			examinationColumnsWithDefault,
			examinationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			examinationAllColumns,
			examinationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert examinations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(examinationPrimaryKeyColumns))
			copy(conflict, examinationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"examinations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(examinationType, examinationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(examinationType, examinationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert examinations")
	}

	if !cached {
		examinationUpsertCacheMut.Lock()
		examinationUpsertCache[key] = cache
		examinationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Examination record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Examination) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Examination provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), examinationPrimaryKeyMapping)
	sql := "DELETE FROM \"examinations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from examinations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for examinations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q examinationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no examinationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examinations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExaminationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(examinationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"examinations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from examination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for examinations")
	}

	if len(examinationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Examination) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExamination(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExaminationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExaminationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), examinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"examinations\".* FROM \"examinations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, examinationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExaminationSlice")
	}

	*o = slice

	return nil
}

// ExaminationExists checks if the Examination row exists.
func ExaminationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"examinations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if examinations exists")
	}

	return exists, nil
}
