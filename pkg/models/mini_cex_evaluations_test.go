// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMiniCexEvaluations(t *testing.T) {
	t.Parallel()

	query := MiniCexEvaluations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMiniCexEvaluationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexEvaluationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MiniCexEvaluations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexEvaluationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MiniCexEvaluationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMiniCexEvaluationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MiniCexEvaluationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MiniCexEvaluation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MiniCexEvaluationExists to return true, but got false.")
	}
}

func testMiniCexEvaluationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	miniCexEvaluationFound, err := FindMiniCexEvaluation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if miniCexEvaluationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMiniCexEvaluationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MiniCexEvaluations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMiniCexEvaluationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MiniCexEvaluations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMiniCexEvaluationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	miniCexEvaluationOne := &MiniCexEvaluation{}
	miniCexEvaluationTwo := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, miniCexEvaluationOne, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}
	if err = randomize.Struct(seed, miniCexEvaluationTwo, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = miniCexEvaluationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = miniCexEvaluationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MiniCexEvaluations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMiniCexEvaluationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	miniCexEvaluationOne := &MiniCexEvaluation{}
	miniCexEvaluationTwo := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, miniCexEvaluationOne, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}
	if err = randomize.Struct(seed, miniCexEvaluationTwo, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = miniCexEvaluationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = miniCexEvaluationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func miniCexEvaluationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func miniCexEvaluationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MiniCexEvaluation) error {
	*o = MiniCexEvaluation{}
	return nil
}

func testMiniCexEvaluationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MiniCexEvaluation{}
	o := &MiniCexEvaluation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation object: %s", err)
	}

	AddMiniCexEvaluationHook(boil.BeforeInsertHook, miniCexEvaluationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationBeforeInsertHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.AfterInsertHook, miniCexEvaluationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationAfterInsertHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.AfterSelectHook, miniCexEvaluationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationAfterSelectHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.BeforeUpdateHook, miniCexEvaluationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationBeforeUpdateHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.AfterUpdateHook, miniCexEvaluationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationAfterUpdateHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.BeforeDeleteHook, miniCexEvaluationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationBeforeDeleteHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.AfterDeleteHook, miniCexEvaluationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationAfterDeleteHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.BeforeUpsertHook, miniCexEvaluationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationBeforeUpsertHooks = []MiniCexEvaluationHook{}

	AddMiniCexEvaluationHook(boil.AfterUpsertHook, miniCexEvaluationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	miniCexEvaluationAfterUpsertHooks = []MiniCexEvaluationHook{}
}

func testMiniCexEvaluationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMiniCexEvaluationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(miniCexEvaluationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMiniCexEvaluationOneToOneAssessmentUsingMiniCexAssessment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Assessment
	var local MiniCexEvaluation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.MiniCexID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.MiniCexAssessment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.MiniCexID, foreign.MiniCexID) {
		t.Errorf("want: %v, got %v", foreign.MiniCexID, check.MiniCexID)
	}

	slice := MiniCexEvaluationSlice{&local}
	if err = local.L.LoadMiniCexAssessment(ctx, tx, false, (*[]*MiniCexEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MiniCexAssessment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.MiniCexAssessment = nil
	if err = local.L.LoadMiniCexAssessment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.MiniCexAssessment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMiniCexEvaluationOneToOneSetOpAssessmentUsingMiniCexAssessment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b, c Assessment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Assessment{&b, &c} {
		err = a.SetMiniCexAssessment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.MiniCexAssessment != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.MiniCex != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.MiniCexID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.MiniCexID))
		reflect.Indirect(reflect.ValueOf(&x.MiniCexID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.MiniCexID) {
			t.Error("foreign key was wrong value", a.ID, x.MiniCexID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testMiniCexEvaluationOneToOneRemoveOpAssessmentUsingMiniCexAssessment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b Assessment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMiniCexAssessment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMiniCexAssessment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.MiniCexAssessment().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.MiniCexAssessment != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.MiniCexID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.MiniCex != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMiniCexEvaluationToOneOrganizationalUnitUsingDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MiniCexEvaluation
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DepartmentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Department().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MiniCexEvaluationSlice{&local}
	if err = local.L.LoadDepartment(ctx, tx, false, (*[]*MiniCexEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Department = nil
	if err = local.L.LoadDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMiniCexEvaluationToOneUserUsingResident(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MiniCexEvaluation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResidentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resident().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MiniCexEvaluationSlice{&local}
	if err = local.L.LoadResident(ctx, tx, false, (*[]*MiniCexEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resident = nil
	if err = local.L.LoadResident(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMiniCexEvaluationToOneUserUsingSupervisor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MiniCexEvaluation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, miniCexEvaluationDBTypes, false, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupervisorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supervisor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MiniCexEvaluationSlice{&local}
	if err = local.L.LoadSupervisor(ctx, tx, false, (*[]*MiniCexEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supervisor = nil
	if err = local.L.LoadSupervisor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMiniCexEvaluationToOneSetOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Department != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DepartmentMiniCexEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DepartmentID, x.ID) {
			t.Error("foreign key was wrong value", a.DepartmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DepartmentID))
		reflect.Indirect(reflect.ValueOf(&a.DepartmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DepartmentID, x.ID) {
			t.Error("foreign key was wrong value", a.DepartmentID, x.ID)
		}
	}
}

func testMiniCexEvaluationToOneRemoveOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDepartment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDepartment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Department().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Department != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DepartmentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DepartmentMiniCexEvaluations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMiniCexEvaluationToOneSetOpUserUsingResident(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetResident(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resident != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResidentMiniCexEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResidentID))
		reflect.Indirect(reflect.ValueOf(&a.ResidentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID, x.ID)
		}
	}
}
func testMiniCexEvaluationToOneSetOpUserUsingSupervisor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MiniCexEvaluation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, miniCexEvaluationDBTypes, false, strmangle.SetComplement(miniCexEvaluationPrimaryKeyColumns, miniCexEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetSupervisor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supervisor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupervisorMiniCexEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupervisorID != x.ID {
			t.Error("foreign key was wrong value", a.SupervisorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupervisorID))
		reflect.Indirect(reflect.ValueOf(&a.SupervisorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupervisorID != x.ID {
			t.Error("foreign key was wrong value", a.SupervisorID, x.ID)
		}
	}
}

func testMiniCexEvaluationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMiniCexEvaluationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MiniCexEvaluationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMiniCexEvaluationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MiniCexEvaluations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	miniCexEvaluationDBTypes = map[string]string{`ID`: `uuid`, `ResidentID`: `uuid`, `SupervisorID`: `uuid`, `OccurredAt`: `timestamp with time zone`, `Difficulty`: `character varying`, `Area`: `character varying`, `Focuses`: `ARRAYtext`, `DepartmentID`: `uuid`, `Annotations`: `jsonb`, `IsEvaluated`: `boolean`, `CreatedAt`: `timestamp with time zone`, `InProgress`: `boolean`, `ActiveStep`: `integer`, `CompletedStep`: `integer`}
	_                        = bytes.MinRead
)

func testMiniCexEvaluationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(miniCexEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(miniCexEvaluationAllColumns) == len(miniCexEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMiniCexEvaluationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(miniCexEvaluationAllColumns) == len(miniCexEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MiniCexEvaluation{}
	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, miniCexEvaluationDBTypes, true, miniCexEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(miniCexEvaluationAllColumns, miniCexEvaluationPrimaryKeyColumns) {
		fields = miniCexEvaluationAllColumns
	} else {
		fields = strmangle.SetComplement(
			miniCexEvaluationAllColumns,
			miniCexEvaluationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MiniCexEvaluationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMiniCexEvaluationsUpsert(t *testing.T) {
	t.Parallel()

	if len(miniCexEvaluationAllColumns) == len(miniCexEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MiniCexEvaluation{}
	if err = randomize.Struct(seed, &o, miniCexEvaluationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MiniCexEvaluation: %s", err)
	}

	count, err := MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, miniCexEvaluationDBTypes, false, miniCexEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MiniCexEvaluation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MiniCexEvaluation: %s", err)
	}

	count, err = MiniCexEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
