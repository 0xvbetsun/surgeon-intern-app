// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEvaluationForms(t *testing.T) {
	t.Parallel()

	query := EvaluationForms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEvaluationFormsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEvaluationFormsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EvaluationForms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEvaluationFormsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EvaluationFormSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEvaluationFormsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EvaluationFormExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EvaluationForm exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EvaluationFormExists to return true, but got false.")
	}
}

func testEvaluationFormsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	evaluationFormFound, err := FindEvaluationForm(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if evaluationFormFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEvaluationFormsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EvaluationForms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEvaluationFormsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EvaluationForms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEvaluationFormsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	evaluationFormOne := &EvaluationForm{}
	evaluationFormTwo := &EvaluationForm{}
	if err = randomize.Struct(seed, evaluationFormOne, evaluationFormDBTypes, false, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}
	if err = randomize.Struct(seed, evaluationFormTwo, evaluationFormDBTypes, false, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = evaluationFormOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = evaluationFormTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EvaluationForms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEvaluationFormsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	evaluationFormOne := &EvaluationForm{}
	evaluationFormTwo := &EvaluationForm{}
	if err = randomize.Struct(seed, evaluationFormOne, evaluationFormDBTypes, false, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}
	if err = randomize.Struct(seed, evaluationFormTwo, evaluationFormDBTypes, false, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = evaluationFormOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = evaluationFormTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func evaluationFormBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func evaluationFormAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EvaluationForm) error {
	*o = EvaluationForm{}
	return nil
}

func testEvaluationFormsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EvaluationForm{}
	o := &EvaluationForm{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EvaluationForm object: %s", err)
	}

	AddEvaluationFormHook(boil.BeforeInsertHook, evaluationFormBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	evaluationFormBeforeInsertHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.AfterInsertHook, evaluationFormAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	evaluationFormAfterInsertHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.AfterSelectHook, evaluationFormAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	evaluationFormAfterSelectHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.BeforeUpdateHook, evaluationFormBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	evaluationFormBeforeUpdateHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.AfterUpdateHook, evaluationFormAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	evaluationFormAfterUpdateHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.BeforeDeleteHook, evaluationFormBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	evaluationFormBeforeDeleteHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.AfterDeleteHook, evaluationFormAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	evaluationFormAfterDeleteHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.BeforeUpsertHook, evaluationFormBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	evaluationFormBeforeUpsertHooks = []EvaluationFormHook{}

	AddEvaluationFormHook(boil.AfterUpsertHook, evaluationFormAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	evaluationFormAfterUpsertHooks = []EvaluationFormHook{}
}

func testEvaluationFormsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEvaluationFormsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(evaluationFormColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEvaluationFormToOneOrganizationalUnitUsingDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local EvaluationForm
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, evaluationFormDBTypes, false, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DepartmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Department().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EvaluationFormSlice{&local}
	if err = local.L.LoadDepartment(ctx, tx, false, (*[]*EvaluationForm)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Department = nil
	if err = local.L.LoadDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEvaluationFormToOneSetOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a EvaluationForm
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, evaluationFormDBTypes, false, strmangle.SetComplement(evaluationFormPrimaryKeyColumns, evaluationFormColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Department != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DepartmentEvaluationForms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DepartmentID))
		reflect.Indirect(reflect.ValueOf(&a.DepartmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DepartmentID != x.ID {
			t.Error("foreign key was wrong value", a.DepartmentID, x.ID)
		}
	}
}

func testEvaluationFormsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEvaluationFormsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EvaluationFormSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEvaluationFormsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EvaluationForms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	evaluationFormDBTypes = map[string]string{`ID`: `integer`, `DepartmentID`: `uuid`, `Name`: `character varying`, `Annotations`: `jsonb`, `Difficulty`: `ARRAYtext`, `Citations`: `ARRAYtext`}
	_                     = bytes.MinRead
)

func testEvaluationFormsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(evaluationFormPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(evaluationFormAllColumns) == len(evaluationFormPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEvaluationFormsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(evaluationFormAllColumns) == len(evaluationFormPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EvaluationForm{}
	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, evaluationFormDBTypes, true, evaluationFormPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(evaluationFormAllColumns, evaluationFormPrimaryKeyColumns) {
		fields = evaluationFormAllColumns
	} else {
		fields = strmangle.SetComplement(
			evaluationFormAllColumns,
			evaluationFormPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EvaluationFormSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEvaluationFormsUpsert(t *testing.T) {
	t.Parallel()

	if len(evaluationFormAllColumns) == len(evaluationFormPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EvaluationForm{}
	if err = randomize.Struct(seed, &o, evaluationFormDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EvaluationForm: %s", err)
	}

	count, err := EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, evaluationFormDBTypes, false, evaluationFormPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EvaluationForm struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EvaluationForm: %s", err)
	}

	count, err = EvaluationForms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
