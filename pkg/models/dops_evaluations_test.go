// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDopsEvaluations(t *testing.T) {
	t.Parallel()

	query := DopsEvaluations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDopsEvaluationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDopsEvaluationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DopsEvaluations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDopsEvaluationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DopsEvaluationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDopsEvaluationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DopsEvaluationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DopsEvaluation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DopsEvaluationExists to return true, but got false.")
	}
}

func testDopsEvaluationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dopsEvaluationFound, err := FindDopsEvaluation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if dopsEvaluationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDopsEvaluationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DopsEvaluations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDopsEvaluationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DopsEvaluations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDopsEvaluationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dopsEvaluationOne := &DopsEvaluation{}
	dopsEvaluationTwo := &DopsEvaluation{}
	if err = randomize.Struct(seed, dopsEvaluationOne, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err = randomize.Struct(seed, dopsEvaluationTwo, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dopsEvaluationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dopsEvaluationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DopsEvaluations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDopsEvaluationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dopsEvaluationOne := &DopsEvaluation{}
	dopsEvaluationTwo := &DopsEvaluation{}
	if err = randomize.Struct(seed, dopsEvaluationOne, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err = randomize.Struct(seed, dopsEvaluationTwo, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dopsEvaluationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dopsEvaluationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dopsEvaluationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func dopsEvaluationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DopsEvaluation) error {
	*o = DopsEvaluation{}
	return nil
}

func testDopsEvaluationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DopsEvaluation{}
	o := &DopsEvaluation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation object: %s", err)
	}

	AddDopsEvaluationHook(boil.BeforeInsertHook, dopsEvaluationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationBeforeInsertHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.AfterInsertHook, dopsEvaluationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationAfterInsertHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.AfterSelectHook, dopsEvaluationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationAfterSelectHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.BeforeUpdateHook, dopsEvaluationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationBeforeUpdateHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.AfterUpdateHook, dopsEvaluationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationAfterUpdateHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.BeforeDeleteHook, dopsEvaluationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationBeforeDeleteHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.AfterDeleteHook, dopsEvaluationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationAfterDeleteHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.BeforeUpsertHook, dopsEvaluationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationBeforeUpsertHooks = []DopsEvaluationHook{}

	AddDopsEvaluationHook(boil.AfterUpsertHook, dopsEvaluationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dopsEvaluationAfterUpsertHooks = []DopsEvaluationHook{}
}

func testDopsEvaluationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDopsEvaluationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dopsEvaluationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDopsEvaluationOneToOneAssessmentUsingDopAssessment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign Assessment
	var local DopsEvaluation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, assessmentDBTypes, true, assessmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Assessment struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.DopsID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DopAssessment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.DopsID, foreign.DopsID) {
		t.Errorf("want: %v, got %v", foreign.DopsID, check.DopsID)
	}

	slice := DopsEvaluationSlice{&local}
	if err = local.L.LoadDopAssessment(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DopAssessment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DopAssessment = nil
	if err = local.L.LoadDopAssessment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DopAssessment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDopsEvaluationOneToOneSetOpAssessmentUsingDopAssessment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c Assessment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Assessment{&b, &c} {
		err = a.SetDopAssessment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DopAssessment != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Dop != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.DopsID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.DopsID))
		reflect.Indirect(reflect.ValueOf(&x.DopsID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.DopsID) {
			t.Error("foreign key was wrong value", a.ID, x.DopsID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testDopsEvaluationOneToOneRemoveOpAssessmentUsingDopAssessment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b Assessment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assessmentDBTypes, false, strmangle.SetComplement(assessmentPrimaryKeyColumns, assessmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDopAssessment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDopAssessment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DopAssessment().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DopAssessment != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.DopsID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Dop != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDopsEvaluationToManyDopsEvaluationsSurgeries(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c DopsEvaluationsSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dopsEvaluationsSurgeryDBTypes, false, dopsEvaluationsSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dopsEvaluationsSurgeryDBTypes, false, dopsEvaluationsSurgeryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DopsEvaluationID = a.ID
	c.DopsEvaluationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DopsEvaluationsSurgeries().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DopsEvaluationID == b.DopsEvaluationID {
			bFound = true
		}
		if v.DopsEvaluationID == c.DopsEvaluationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DopsEvaluationSlice{&a}
	if err = a.L.LoadDopsEvaluationsSurgeries(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DopsEvaluationsSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DopsEvaluationsSurgeries = nil
	if err = a.L.LoadDopsEvaluationsSurgeries(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DopsEvaluationsSurgeries); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDopsEvaluationToManyAddOpDopsEvaluationsSurgeries(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c, d, e DopsEvaluationsSurgery

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DopsEvaluationsSurgery{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dopsEvaluationsSurgeryDBTypes, false, strmangle.SetComplement(dopsEvaluationsSurgeryPrimaryKeyColumns, dopsEvaluationsSurgeryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DopsEvaluationsSurgery{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDopsEvaluationsSurgeries(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DopsEvaluationID {
			t.Error("foreign key was wrong value", a.ID, first.DopsEvaluationID)
		}
		if a.ID != second.DopsEvaluationID {
			t.Error("foreign key was wrong value", a.ID, second.DopsEvaluationID)
		}

		if first.R.DopsEvaluation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DopsEvaluation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DopsEvaluationsSurgeries[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DopsEvaluationsSurgeries[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DopsEvaluationsSurgeries().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDopsEvaluationToOneOrganizationalUnitUsingDepartment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DopsEvaluation
	var foreign OrganizationalUnit

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationalUnitDBTypes, false, organizationalUnitColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationalUnit struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DepartmentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Department().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DopsEvaluationSlice{&local}
	if err = local.L.LoadDepartment(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Department = nil
	if err = local.L.LoadDepartment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Department == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDopsEvaluationToOneOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DopsEvaluation
	var foreign OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orthopedicSurgeryActivityDBTypes, false, orthopedicSurgeryActivityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrthopedicSurgeryActivity struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrthopedicSurgeryActivityID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrthopedicSurgeryActivity().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DopsEvaluationSlice{&local}
	if err = local.L.LoadOrthopedicSurgeryActivity(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryActivity == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrthopedicSurgeryActivity = nil
	if err = local.L.LoadOrthopedicSurgeryActivity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrthopedicSurgeryActivity == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDopsEvaluationToOneUserUsingResident(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DopsEvaluation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ResidentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Resident().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DopsEvaluationSlice{&local}
	if err = local.L.LoadResident(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Resident = nil
	if err = local.L.LoadResident(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Resident == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDopsEvaluationToOneUserUsingSupervisor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DopsEvaluation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, dopsEvaluationDBTypes, false, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupervisorID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supervisor().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DopsEvaluationSlice{&local}
	if err = local.L.LoadSupervisor(ctx, tx, false, (*[]*DopsEvaluation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supervisor = nil
	if err = local.L.LoadSupervisor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supervisor == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDopsEvaluationToOneSetOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrganizationalUnit{&b, &c} {
		err = a.SetDepartment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Department != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DepartmentDopsEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DepartmentID, x.ID) {
			t.Error("foreign key was wrong value", a.DepartmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DepartmentID))
		reflect.Indirect(reflect.ValueOf(&a.DepartmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DepartmentID, x.ID) {
			t.Error("foreign key was wrong value", a.DepartmentID, x.ID)
		}
	}
}

func testDopsEvaluationToOneRemoveOpOrganizationalUnitUsingDepartment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b OrganizationalUnit

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationalUnitDBTypes, false, strmangle.SetComplement(organizationalUnitPrimaryKeyColumns, organizationalUnitColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDepartment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDepartment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Department().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Department != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DepartmentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DepartmentDopsEvaluations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDopsEvaluationToOneSetOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrthopedicSurgeryActivity{&b, &c} {
		err = a.SetOrthopedicSurgeryActivity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrthopedicSurgeryActivity != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DopsEvaluation != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrthopedicSurgeryActivityID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryActivityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrthopedicSurgeryActivityID))
		reflect.Indirect(reflect.ValueOf(&a.OrthopedicSurgeryActivityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrthopedicSurgeryActivityID, x.ID) {
			t.Error("foreign key was wrong value", a.OrthopedicSurgeryActivityID, x.ID)
		}
	}
}

func testDopsEvaluationToOneRemoveOpOrthopedicSurgeryActivityUsingOrthopedicSurgeryActivity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b OrthopedicSurgeryActivity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orthopedicSurgeryActivityDBTypes, false, strmangle.SetComplement(orthopedicSurgeryActivityPrimaryKeyColumns, orthopedicSurgeryActivityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrthopedicSurgeryActivity(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrthopedicSurgeryActivity(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrthopedicSurgeryActivity().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrthopedicSurgeryActivity != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrthopedicSurgeryActivityID) {
		t.Error("foreign key value should be nil")
	}

	if b.R.DopsEvaluation != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testDopsEvaluationToOneSetOpUserUsingResident(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetResident(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Resident != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ResidentDopsEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ResidentID))
		reflect.Indirect(reflect.ValueOf(&a.ResidentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ResidentID != x.ID {
			t.Error("foreign key was wrong value", a.ResidentID, x.ID)
		}
	}
}
func testDopsEvaluationToOneSetOpUserUsingSupervisor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DopsEvaluation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, dopsEvaluationDBTypes, false, strmangle.SetComplement(dopsEvaluationPrimaryKeyColumns, dopsEvaluationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetSupervisor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supervisor != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupervisorDopsEvaluations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupervisorID != x.ID {
			t.Error("foreign key was wrong value", a.SupervisorID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupervisorID))
		reflect.Indirect(reflect.ValueOf(&a.SupervisorID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupervisorID != x.ID {
			t.Error("foreign key was wrong value", a.SupervisorID, x.ID)
		}
	}
}

func testDopsEvaluationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDopsEvaluationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DopsEvaluationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDopsEvaluationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DopsEvaluations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dopsEvaluationDBTypes = map[string]string{`ID`: `uuid`, `OrthopedicSurgeryActivityID`: `uuid`, `ResidentID`: `uuid`, `SupervisorID`: `uuid`, `OccurredAt`: `timestamp with time zone`, `CaseNotes`: `character varying`, `PatientAge`: `integer`, `PatientGender`: `character varying`, `Difficulty`: `character varying`, `DepartmentID`: `uuid`, `Annotations`: `jsonb`, `IsEvaluated`: `boolean`, `CreatedAt`: `timestamp with time zone`, `InProgress`: `boolean`, `ActiveStep`: `integer`, `CompletedStep`: `integer`}
	_                     = bytes.MinRead
)

func testDopsEvaluationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dopsEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dopsEvaluationAllColumns) == len(dopsEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDopsEvaluationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dopsEvaluationAllColumns) == len(dopsEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DopsEvaluation{}
	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dopsEvaluationDBTypes, true, dopsEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dopsEvaluationAllColumns, dopsEvaluationPrimaryKeyColumns) {
		fields = dopsEvaluationAllColumns
	} else {
		fields = strmangle.SetComplement(
			dopsEvaluationAllColumns,
			dopsEvaluationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DopsEvaluationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDopsEvaluationsUpsert(t *testing.T) {
	t.Parallel()

	if len(dopsEvaluationAllColumns) == len(dopsEvaluationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DopsEvaluation{}
	if err = randomize.Struct(seed, &o, dopsEvaluationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DopsEvaluation: %s", err)
	}

	count, err := DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dopsEvaluationDBTypes, false, dopsEvaluationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DopsEvaluation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DopsEvaluation: %s", err)
	}

	count, err = DopsEvaluations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
