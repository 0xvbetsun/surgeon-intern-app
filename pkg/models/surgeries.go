// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Surgery is an object representing the database table.
type Surgery struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiagnoseID       string `boil:"diagnose_id" json:"diagnose_id" toml:"diagnose_id" yaml:"diagnose_id"`
	MethodID         string `boil:"method_id" json:"method_id" toml:"method_id" yaml:"method_id"`
	SurgerySpecialty string `boil:"surgery_specialty" json:"surgery_specialty" toml:"surgery_specialty" yaml:"surgery_specialty"`

	R *surgeryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L surgeryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SurgeryColumns = struct {
	ID               string
	DiagnoseID       string
	MethodID         string
	SurgerySpecialty string
}{
	ID:               "id",
	DiagnoseID:       "diagnose_id",
	MethodID:         "method_id",
	SurgerySpecialty: "surgery_specialty",
}

var SurgeryTableColumns = struct {
	ID               string
	DiagnoseID       string
	MethodID         string
	SurgerySpecialty string
}{
	ID:               "surgeries.id",
	DiagnoseID:       "surgeries.diagnose_id",
	MethodID:         "surgeries.method_id",
	SurgerySpecialty: "surgeries.surgery_specialty",
}

// Generated where

var SurgeryWhere = struct {
	ID               whereHelperstring
	DiagnoseID       whereHelperstring
	MethodID         whereHelperstring
	SurgerySpecialty whereHelperstring
}{
	ID:               whereHelperstring{field: "\"surgeries\".\"id\""},
	DiagnoseID:       whereHelperstring{field: "\"surgeries\".\"diagnose_id\""},
	MethodID:         whereHelperstring{field: "\"surgeries\".\"method_id\""},
	SurgerySpecialty: whereHelperstring{field: "\"surgeries\".\"surgery_specialty\""},
}

// SurgeryRels is where relationship names are stored.
var SurgeryRels = struct {
	Diagnose                                   string
	Method                                     string
	SurgerySpecialtySpecialty                  string
	DopsEvaluationsSurgeries                   string
	OrthopedicSurgeriesActivityReviewSurgeries string
	OrthopedicSurgeryActivitiesSurgeries       string
}{
	Diagnose:                  "Diagnose",
	Method:                    "Method",
	SurgerySpecialtySpecialty: "SurgerySpecialtySpecialty",
	DopsEvaluationsSurgeries:  "DopsEvaluationsSurgeries",
	OrthopedicSurgeriesActivityReviewSurgeries: "OrthopedicSurgeriesActivityReviewSurgeries",
	OrthopedicSurgeryActivitiesSurgeries:       "OrthopedicSurgeryActivitiesSurgeries",
}

// surgeryR is where relationships are stored.
type surgeryR struct {
	Diagnose                                   *SurgeryDiagnosis                             `boil:"Diagnose" json:"Diagnose" toml:"Diagnose" yaml:"Diagnose"`
	Method                                     *SurgeryMethod                                `boil:"Method" json:"Method" toml:"Method" yaml:"Method"`
	SurgerySpecialtySpecialty                  *Specialty                                    `boil:"SurgerySpecialtySpecialty" json:"SurgerySpecialtySpecialty" toml:"SurgerySpecialtySpecialty" yaml:"SurgerySpecialtySpecialty"`
	DopsEvaluationsSurgeries                   DopsEvaluationsSurgerySlice                   `boil:"DopsEvaluationsSurgeries" json:"DopsEvaluationsSurgeries" toml:"DopsEvaluationsSurgeries" yaml:"DopsEvaluationsSurgeries"`
	OrthopedicSurgeriesActivityReviewSurgeries OrthopedicSurgeriesActivityReviewSurgerySlice `boil:"OrthopedicSurgeriesActivityReviewSurgeries" json:"OrthopedicSurgeriesActivityReviewSurgeries" toml:"OrthopedicSurgeriesActivityReviewSurgeries" yaml:"OrthopedicSurgeriesActivityReviewSurgeries"`
	OrthopedicSurgeryActivitiesSurgeries       OrthopedicSurgeryActivitiesSurgerySlice       `boil:"OrthopedicSurgeryActivitiesSurgeries" json:"OrthopedicSurgeryActivitiesSurgeries" toml:"OrthopedicSurgeryActivitiesSurgeries" yaml:"OrthopedicSurgeryActivitiesSurgeries"`
}

// NewStruct creates a new relationship struct
func (*surgeryR) NewStruct() *surgeryR {
	return &surgeryR{}
}

// surgeryL is where Load methods for each relationship are stored.
type surgeryL struct{}

var (
	surgeryAllColumns            = []string{"id", "diagnose_id", "method_id", "surgery_specialty"}
	surgeryColumnsWithoutDefault = []string{"diagnose_id", "method_id", "surgery_specialty"}
	surgeryColumnsWithDefault    = []string{"id"}
	surgeryPrimaryKeyColumns     = []string{"id"}
)

type (
	// SurgerySlice is an alias for a slice of pointers to Surgery.
	// This should almost always be used instead of []Surgery.
	SurgerySlice []*Surgery
	// SurgeryHook is the signature for custom Surgery hook methods
	SurgeryHook func(context.Context, boil.ContextExecutor, *Surgery) error

	surgeryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	surgeryType                 = reflect.TypeOf(&Surgery{})
	surgeryMapping              = queries.MakeStructMapping(surgeryType)
	surgeryPrimaryKeyMapping, _ = queries.BindMapping(surgeryType, surgeryMapping, surgeryPrimaryKeyColumns)
	surgeryInsertCacheMut       sync.RWMutex
	surgeryInsertCache          = make(map[string]insertCache)
	surgeryUpdateCacheMut       sync.RWMutex
	surgeryUpdateCache          = make(map[string]updateCache)
	surgeryUpsertCacheMut       sync.RWMutex
	surgeryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var surgeryBeforeInsertHooks []SurgeryHook
var surgeryBeforeUpdateHooks []SurgeryHook
var surgeryBeforeDeleteHooks []SurgeryHook
var surgeryBeforeUpsertHooks []SurgeryHook

var surgeryAfterInsertHooks []SurgeryHook
var surgeryAfterSelectHooks []SurgeryHook
var surgeryAfterUpdateHooks []SurgeryHook
var surgeryAfterDeleteHooks []SurgeryHook
var surgeryAfterUpsertHooks []SurgeryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Surgery) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Surgery) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Surgery) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Surgery) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Surgery) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Surgery) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Surgery) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Surgery) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Surgery) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range surgeryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSurgeryHook registers your hook function for all future operations.
func AddSurgeryHook(hookPoint boil.HookPoint, surgeryHook SurgeryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		surgeryBeforeInsertHooks = append(surgeryBeforeInsertHooks, surgeryHook)
	case boil.BeforeUpdateHook:
		surgeryBeforeUpdateHooks = append(surgeryBeforeUpdateHooks, surgeryHook)
	case boil.BeforeDeleteHook:
		surgeryBeforeDeleteHooks = append(surgeryBeforeDeleteHooks, surgeryHook)
	case boil.BeforeUpsertHook:
		surgeryBeforeUpsertHooks = append(surgeryBeforeUpsertHooks, surgeryHook)
	case boil.AfterInsertHook:
		surgeryAfterInsertHooks = append(surgeryAfterInsertHooks, surgeryHook)
	case boil.AfterSelectHook:
		surgeryAfterSelectHooks = append(surgeryAfterSelectHooks, surgeryHook)
	case boil.AfterUpdateHook:
		surgeryAfterUpdateHooks = append(surgeryAfterUpdateHooks, surgeryHook)
	case boil.AfterDeleteHook:
		surgeryAfterDeleteHooks = append(surgeryAfterDeleteHooks, surgeryHook)
	case boil.AfterUpsertHook:
		surgeryAfterUpsertHooks = append(surgeryAfterUpsertHooks, surgeryHook)
	}
}

// One returns a single surgery record from the query.
func (q surgeryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Surgery, error) {
	o := &Surgery{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for surgeries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Surgery records from the query.
func (q surgeryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SurgerySlice, error) {
	var o []*Surgery

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Surgery slice")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Surgery records in the query.
func (q surgeryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count surgeries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q surgeryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if surgeries exists")
	}

	return count > 0, nil
}

// Diagnose pointed to by the foreign key.
func (o *Surgery) Diagnose(mods ...qm.QueryMod) surgeryDiagnosisQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DiagnoseID),
	}

	queryMods = append(queryMods, mods...)

	query := SurgeryDiagnoses(queryMods...)
	queries.SetFrom(query.Query, "\"surgery_diagnosis\"")

	return query
}

// Method pointed to by the foreign key.
func (o *Surgery) Method(mods ...qm.QueryMod) surgeryMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MethodID),
	}

	queryMods = append(queryMods, mods...)

	query := SurgeryMethods(queryMods...)
	queries.SetFrom(query.Query, "\"surgery_methods\"")

	return query
}

// SurgerySpecialtySpecialty pointed to by the foreign key.
func (o *Surgery) SurgerySpecialtySpecialty(mods ...qm.QueryMod) specialtyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SurgerySpecialty),
	}

	queryMods = append(queryMods, mods...)

	query := Specialties(queryMods...)
	queries.SetFrom(query.Query, "\"specialties\"")

	return query
}

// DopsEvaluationsSurgeries retrieves all the dops_evaluations_surgery's DopsEvaluationsSurgeries with an executor.
func (o *Surgery) DopsEvaluationsSurgeries(mods ...qm.QueryMod) dopsEvaluationsSurgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dops_evaluations_surgeries\".\"surgery_id\"=?", o.ID),
	)

	query := DopsEvaluationsSurgeries(queryMods...)
	queries.SetFrom(query.Query, "\"dops_evaluations_surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dops_evaluations_surgeries\".*"})
	}

	return query
}

// OrthopedicSurgeriesActivityReviewSurgeries retrieves all the orthopedic_surgeries_activity_review_surgery's OrthopedicSurgeriesActivityReviewSurgeries with an executor.
func (o *Surgery) OrthopedicSurgeriesActivityReviewSurgeries(mods ...qm.QueryMod) orthopedicSurgeriesActivityReviewSurgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgeries_activity_review_surgeries\".\"surgery_id\"=?", o.ID),
	)

	query := OrthopedicSurgeriesActivityReviewSurgeries(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgeries_activity_review_surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgeries_activity_review_surgeries\".*"})
	}

	return query
}

// OrthopedicSurgeryActivitiesSurgeries retrieves all the orthopedic_surgery_activities_surgery's OrthopedicSurgeryActivitiesSurgeries with an executor.
func (o *Surgery) OrthopedicSurgeryActivitiesSurgeries(mods ...qm.QueryMod) orthopedicSurgeryActivitiesSurgeryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orthopedic_surgery_activities_surgeries\".\"surgery_id\"=?", o.ID),
	)

	query := OrthopedicSurgeryActivitiesSurgeries(queryMods...)
	queries.SetFrom(query.Query, "\"orthopedic_surgery_activities_surgeries\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"orthopedic_surgery_activities_surgeries\".*"})
	}

	return query
}

// LoadDiagnose allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (surgeryL) LoadDiagnose(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.DiagnoseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.DiagnoseID {
					continue Outer
				}
			}

			args = append(args, obj.DiagnoseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgery_diagnosis`),
		qm.WhereIn(`surgery_diagnosis.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SurgeryDiagnosis")
	}

	var resultSlice []*SurgeryDiagnosis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SurgeryDiagnosis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for surgery_diagnosis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgery_diagnosis")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Diagnose = foreign
		if foreign.R == nil {
			foreign.R = &surgeryDiagnosisR{}
		}
		foreign.R.DiagnoseSurgeries = append(foreign.R.DiagnoseSurgeries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DiagnoseID == foreign.ID {
				local.R.Diagnose = foreign
				if foreign.R == nil {
					foreign.R = &surgeryDiagnosisR{}
				}
				foreign.R.DiagnoseSurgeries = append(foreign.R.DiagnoseSurgeries, local)
				break
			}
		}
	}

	return nil
}

// LoadMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (surgeryL) LoadMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.MethodID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.MethodID {
					continue Outer
				}
			}

			args = append(args, obj.MethodID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`surgery_methods`),
		qm.WhereIn(`surgery_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SurgeryMethod")
	}

	var resultSlice []*SurgeryMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SurgeryMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for surgery_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for surgery_methods")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Method = foreign
		if foreign.R == nil {
			foreign.R = &surgeryMethodR{}
		}
		foreign.R.MethodSurgeries = append(foreign.R.MethodSurgeries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MethodID == foreign.ID {
				local.R.Method = foreign
				if foreign.R == nil {
					foreign.R = &surgeryMethodR{}
				}
				foreign.R.MethodSurgeries = append(foreign.R.MethodSurgeries, local)
				break
			}
		}
	}

	return nil
}

// LoadSurgerySpecialtySpecialty allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (surgeryL) LoadSurgerySpecialtySpecialty(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.SurgerySpecialty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.SurgerySpecialty {
					continue Outer
				}
			}

			args = append(args, obj.SurgerySpecialty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`specialties`),
		qm.WhereIn(`specialties.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Specialty")
	}

	var resultSlice []*Specialty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Specialty")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for specialties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for specialties")
	}

	if len(surgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SurgerySpecialtySpecialty = foreign
		if foreign.R == nil {
			foreign.R = &specialtyR{}
		}
		foreign.R.SurgerySpecialtySurgeries = append(foreign.R.SurgerySpecialtySurgeries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SurgerySpecialty == foreign.ID {
				local.R.SurgerySpecialtySpecialty = foreign
				if foreign.R == nil {
					foreign.R = &specialtyR{}
				}
				foreign.R.SurgerySpecialtySurgeries = append(foreign.R.SurgerySpecialtySurgeries, local)
				break
			}
		}
	}

	return nil
}

// LoadDopsEvaluationsSurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (surgeryL) LoadDopsEvaluationsSurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dops_evaluations_surgeries`),
		qm.WhereIn(`dops_evaluations_surgeries.surgery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dops_evaluations_surgeries")
	}

	var resultSlice []*DopsEvaluationsSurgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dops_evaluations_surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dops_evaluations_surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dops_evaluations_surgeries")
	}

	if len(dopsEvaluationsSurgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DopsEvaluationsSurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dopsEvaluationsSurgeryR{}
			}
			foreign.R.Surgery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SurgeryID {
				local.R.DopsEvaluationsSurgeries = append(local.R.DopsEvaluationsSurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &dopsEvaluationsSurgeryR{}
				}
				foreign.R.Surgery = local
				break
			}
		}
	}

	return nil
}

// LoadOrthopedicSurgeriesActivityReviewSurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (surgeryL) LoadOrthopedicSurgeriesActivityReviewSurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgeries_activity_review_surgeries`),
		qm.WhereIn(`orthopedic_surgeries_activity_review_surgeries.surgery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgeries_activity_review_surgeries")
	}

	var resultSlice []*OrthopedicSurgeriesActivityReviewSurgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgeries_activity_review_surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgeries_activity_review_surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgeries_activity_review_surgeries")
	}

	if len(orthopedicSurgeriesActivityReviewSurgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrthopedicSurgeriesActivityReviewSurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
			}
			foreign.R.Surgery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SurgeryID {
				local.R.OrthopedicSurgeriesActivityReviewSurgeries = append(local.R.OrthopedicSurgeriesActivityReviewSurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeriesActivityReviewSurgeryR{}
				}
				foreign.R.Surgery = local
				break
			}
		}
	}

	return nil
}

// LoadOrthopedicSurgeryActivitiesSurgeries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (surgeryL) LoadOrthopedicSurgeryActivitiesSurgeries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSurgery interface{}, mods queries.Applicator) error {
	var slice []*Surgery
	var object *Surgery

	if singular {
		object = maybeSurgery.(*Surgery)
	} else {
		slice = *maybeSurgery.(*[]*Surgery)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &surgeryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &surgeryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orthopedic_surgery_activities_surgeries`),
		qm.WhereIn(`orthopedic_surgery_activities_surgeries.surgery_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orthopedic_surgery_activities_surgeries")
	}

	var resultSlice []*OrthopedicSurgeryActivitiesSurgery
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orthopedic_surgery_activities_surgeries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orthopedic_surgery_activities_surgeries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orthopedic_surgery_activities_surgeries")
	}

	if len(orthopedicSurgeryActivitiesSurgeryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrthopedicSurgeryActivitiesSurgeries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orthopedicSurgeryActivitiesSurgeryR{}
			}
			foreign.R.Surgery = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SurgeryID {
				local.R.OrthopedicSurgeryActivitiesSurgeries = append(local.R.OrthopedicSurgeryActivitiesSurgeries, foreign)
				if foreign.R == nil {
					foreign.R = &orthopedicSurgeryActivitiesSurgeryR{}
				}
				foreign.R.Surgery = local
				break
			}
		}
	}

	return nil
}

// SetDiagnose of the surgery to the related item.
// Sets o.R.Diagnose to related.
// Adds o to related.R.DiagnoseSurgeries.
func (o *Surgery) SetDiagnose(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SurgeryDiagnosis) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"diagnose_id"}),
		strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DiagnoseID = related.ID
	if o.R == nil {
		o.R = &surgeryR{
			Diagnose: related,
		}
	} else {
		o.R.Diagnose = related
	}

	if related.R == nil {
		related.R = &surgeryDiagnosisR{
			DiagnoseSurgeries: SurgerySlice{o},
		}
	} else {
		related.R.DiagnoseSurgeries = append(related.R.DiagnoseSurgeries, o)
	}

	return nil
}

// SetMethod of the surgery to the related item.
// Sets o.R.Method to related.
// Adds o to related.R.MethodSurgeries.
func (o *Surgery) SetMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SurgeryMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"method_id"}),
		strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MethodID = related.ID
	if o.R == nil {
		o.R = &surgeryR{
			Method: related,
		}
	} else {
		o.R.Method = related
	}

	if related.R == nil {
		related.R = &surgeryMethodR{
			MethodSurgeries: SurgerySlice{o},
		}
	} else {
		related.R.MethodSurgeries = append(related.R.MethodSurgeries, o)
	}

	return nil
}

// SetSurgerySpecialtySpecialty of the surgery to the related item.
// Sets o.R.SurgerySpecialtySpecialty to related.
// Adds o to related.R.SurgerySpecialtySurgeries.
func (o *Surgery) SetSurgerySpecialtySpecialty(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Specialty) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_specialty"}),
		strmangle.WhereClause("\"", "\"", 2, surgeryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SurgerySpecialty = related.ID
	if o.R == nil {
		o.R = &surgeryR{
			SurgerySpecialtySpecialty: related,
		}
	} else {
		o.R.SurgerySpecialtySpecialty = related
	}

	if related.R == nil {
		related.R = &specialtyR{
			SurgerySpecialtySurgeries: SurgerySlice{o},
		}
	} else {
		related.R.SurgerySpecialtySurgeries = append(related.R.SurgerySpecialtySurgeries, o)
	}

	return nil
}

// AddDopsEvaluationsSurgeries adds the given related objects to the existing relationships
// of the surgery, optionally inserting them as new records.
// Appends related to o.R.DopsEvaluationsSurgeries.
// Sets related.R.Surgery appropriately.
func (o *Surgery) AddDopsEvaluationsSurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DopsEvaluationsSurgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SurgeryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dops_evaluations_surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_id"}),
				strmangle.WhereClause("\"", "\"", 2, dopsEvaluationsSurgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SurgeryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &surgeryR{
			DopsEvaluationsSurgeries: related,
		}
	} else {
		o.R.DopsEvaluationsSurgeries = append(o.R.DopsEvaluationsSurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dopsEvaluationsSurgeryR{
				Surgery: o,
			}
		} else {
			rel.R.Surgery = o
		}
	}
	return nil
}

// AddOrthopedicSurgeriesActivityReviewSurgeries adds the given related objects to the existing relationships
// of the surgery, optionally inserting them as new records.
// Appends related to o.R.OrthopedicSurgeriesActivityReviewSurgeries.
// Sets related.R.Surgery appropriately.
func (o *Surgery) AddOrthopedicSurgeriesActivityReviewSurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeriesActivityReviewSurgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SurgeryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgeries_activity_review_surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeriesActivityReviewSurgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SurgeryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &surgeryR{
			OrthopedicSurgeriesActivityReviewSurgeries: related,
		}
	} else {
		o.R.OrthopedicSurgeriesActivityReviewSurgeries = append(o.R.OrthopedicSurgeriesActivityReviewSurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeriesActivityReviewSurgeryR{
				Surgery: o,
			}
		} else {
			rel.R.Surgery = o
		}
	}
	return nil
}

// AddOrthopedicSurgeryActivitiesSurgeries adds the given related objects to the existing relationships
// of the surgery, optionally inserting them as new records.
// Appends related to o.R.OrthopedicSurgeryActivitiesSurgeries.
// Sets related.R.Surgery appropriately.
func (o *Surgery) AddOrthopedicSurgeryActivitiesSurgeries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrthopedicSurgeryActivitiesSurgery) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SurgeryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orthopedic_surgery_activities_surgeries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"surgery_id"}),
				strmangle.WhereClause("\"", "\"", 2, orthopedicSurgeryActivitiesSurgeryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SurgeryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &surgeryR{
			OrthopedicSurgeryActivitiesSurgeries: related,
		}
	} else {
		o.R.OrthopedicSurgeryActivitiesSurgeries = append(o.R.OrthopedicSurgeryActivitiesSurgeries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orthopedicSurgeryActivitiesSurgeryR{
				Surgery: o,
			}
		} else {
			rel.R.Surgery = o
		}
	}
	return nil
}

// Surgeries retrieves all the records using an executor.
func Surgeries(mods ...qm.QueryMod) surgeryQuery {
	mods = append(mods, qm.From("\"surgeries\""))
	return surgeryQuery{NewQuery(mods...)}
}

// FindSurgery retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSurgery(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Surgery, error) {
	surgeryObj := &Surgery{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"surgeries\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, surgeryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from surgeries")
	}

	if err = surgeryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return surgeryObj, err
	}

	return surgeryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Surgery) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgeries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	surgeryInsertCacheMut.RLock()
	cache, cached := surgeryInsertCache[key]
	surgeryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			surgeryAllColumns,
			surgeryColumnsWithDefault,
			surgeryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(surgeryType, surgeryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(surgeryType, surgeryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"surgeries\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"surgeries\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into surgeries")
	}

	if !cached {
		surgeryInsertCacheMut.Lock()
		surgeryInsertCache[key] = cache
		surgeryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Surgery.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Surgery) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	surgeryUpdateCacheMut.RLock()
	cache, cached := surgeryUpdateCache[key]
	surgeryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			surgeryAllColumns,
			surgeryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update surgeries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"surgeries\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, surgeryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(surgeryType, surgeryMapping, append(wl, surgeryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update surgeries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for surgeries")
	}

	if !cached {
		surgeryUpdateCacheMut.Lock()
		surgeryUpdateCache[key] = cache
		surgeryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q surgeryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for surgeries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SurgerySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"surgeries\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, surgeryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in surgery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all surgery")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Surgery) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no surgeries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(surgeryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	surgeryUpsertCacheMut.RLock()
	cache, cached := surgeryUpsertCache[key]
	surgeryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			surgeryAllColumns,
			surgeryColumnsWithDefault,
			surgeryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			surgeryAllColumns,
			surgeryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert surgeries, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(surgeryPrimaryKeyColumns))
			copy(conflict, surgeryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"surgeries\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(surgeryType, surgeryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(surgeryType, surgeryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert surgeries")
	}

	if !cached {
		surgeryUpsertCacheMut.Lock()
		surgeryUpsertCache[key] = cache
		surgeryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Surgery record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Surgery) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Surgery provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), surgeryPrimaryKeyMapping)
	sql := "DELETE FROM \"surgeries\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for surgeries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q surgeryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no surgeryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgeries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgeries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SurgerySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(surgeryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"surgeries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from surgery slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for surgeries")
	}

	if len(surgeryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Surgery) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSurgery(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SurgerySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SurgerySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), surgeryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"surgeries\".* FROM \"surgeries\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, surgeryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SurgerySlice")
	}

	*o = slice

	return nil
}

// SurgeryExists checks if the Surgery row exists.
func SurgeryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"surgeries\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if surgeries exists")
	}

	return exists, nil
}
